
Servo_Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e68  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005a  00800060  00000e68  00000edc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      0000005c  00000000  00000000  00000f36  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f94  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000158  00000000  00000000  00000fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a03  00000000  00000000  00001128  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009ec  00000000  00000000  00002b2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b6d  00000000  00000000  00003517  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000248  00000000  00000000  00004084  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000577  00000000  00000000  000042cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000062d  00000000  00000000  00004843  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  00004e70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e6       	ldi	r30, 0x68	; 104
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 3b       	cpi	r26, 0xBA	; 186
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 32 07 	jmp	0xe64	; 0xe64 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include "MainApp.h"



int main() {
	PWM_init();
  82:	0e 94 f5 01 	call	0x3ea	; 0x3ea <PWM_init>
	UART_init(9600);
  86:	80 e8       	ldi	r24, 0x80	; 128
  88:	95 e2       	ldi	r25, 0x25	; 37
  8a:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <UART_init>
	Motor_init();
  8e:	0e 94 08 02 	call	0x410	; 0x410 <Motor_init>
	ADC_Init();
  92:	0e 94 a2 02 	call	0x544	; 0x544 <ADC_Init>
	setup_modes_pins();
  96:	0e 94 7a 00 	call	0xf4	; 0xf4 <setup_modes_pins>
	
	while (1) {
		u8 Chosen_Mode = get_mode();
  9a:	0e 94 ad 00 	call	0x15a	; 0x15a <get_mode>
  9e:	c8 2f       	mov	r28, r24

		if (Chosen_Mode == MODE_VOICE || Chosen_Mode == MODE_EYE) {
  a0:	8e ef       	ldi	r24, 0xFE	; 254
  a2:	8c 0f       	add	r24, r28
  a4:	82 30       	cpi	r24, 0x02	; 2
  a6:	30 f4       	brcc	.+12     	; 0xb4 <main+0x32>
			DIO_SetPinValue(PORT_C, PIN4, PIN_LOW);  // Raspberry Pi -> 0
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	64 e0       	ldi	r22, 0x04	; 4
  ac:	83 e0       	ldi	r24, 0x03	; 3
  ae:	0e 94 28 03 	call	0x650	; 0x650 <DIO_SetPinValue>
  b2:	07 c0       	rjmp	.+14     	; 0xc2 <main+0x40>
		}
		else if (Chosen_Mode == MODE_MOBILE) {
  b4:	c1 30       	cpi	r28, 0x01	; 1
  b6:	29 f4       	brne	.+10     	; 0xc2 <main+0x40>
			DIO_SetPinValue(PORT_C, PIN4, PIN_HIGH); //  ESP -> 1
  b8:	41 e0       	ldi	r20, 0x01	; 1
  ba:	64 e0       	ldi	r22, 0x04	; 4
  bc:	83 e0       	ldi	r24, 0x03	; 3
  be:	0e 94 28 03 	call	0x650	; 0x650 <DIO_SetPinValue>
		}

		switch (Chosen_Mode) {
  c2:	c1 30       	cpi	r28, 0x01	; 1
  c4:	49 f0       	breq	.+18     	; 0xd8 <main+0x56>
  c6:	28 f0       	brcs	.+10     	; 0xd2 <main+0x50>
  c8:	c2 30       	cpi	r28, 0x02	; 2
  ca:	49 f0       	breq	.+18     	; 0xde <main+0x5c>
  cc:	c3 30       	cpi	r28, 0x03	; 3
  ce:	51 f0       	breq	.+20     	; 0xe4 <main+0x62>
  d0:	0c c0       	rjmp	.+24     	; 0xea <main+0x68>
			case 0:
			JoyStick_Mode();
  d2:	0e 94 cd 00 	call	0x19a	; 0x19a <JoyStick_Mode>
			break;
  d6:	e1 cf       	rjmp	.-62     	; 0x9a <main+0x18>

			case 1:
			MobileApp_Mode();
  d8:	0e 94 4d 01 	call	0x29a	; 0x29a <MobileApp_Mode>
			break;
  dc:	de cf       	rjmp	.-68     	; 0x9a <main+0x18>

			case 2:
			Voice_Mode();
  de:	0e 94 85 01 	call	0x30a	; 0x30a <Voice_Mode>
			break;
  e2:	db cf       	rjmp	.-74     	; 0x9a <main+0x18>

			case 3:
			EyeTracking_Mode();
  e4:	0e 94 bd 01 	call	0x37a	; 0x37a <EyeTracking_Mode>
			break;
  e8:	d8 cf       	rjmp	.-80     	; 0x9a <main+0x18>

			default:
			UART_sendString("No Mode Selected!\n");
  ea:	80 e6       	ldi	r24, 0x60	; 96
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <UART_sendString>
			break;
  f2:	d3 cf       	rjmp	.-90     	; 0x9a <main+0x18>

000000f4 <setup_modes_pins>:
#include "avr/delay.h"



void setup_modes_pins() {
	DIO_SetPinDirection(PORT_B, PIN0, PIN_INPUT);
  f4:	40 e0       	ldi	r20, 0x00	; 0
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	0e 94 b2 02 	call	0x564	; 0x564 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORT_B, PIN1, PIN_INPUT);
  fe:	40 e0       	ldi	r20, 0x00	; 0
 100:	61 e0       	ldi	r22, 0x01	; 1
 102:	82 e0       	ldi	r24, 0x02	; 2
 104:	0e 94 b2 02 	call	0x564	; 0x564 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORT_B, PIN2, PIN_INPUT);
 108:	40 e0       	ldi	r20, 0x00	; 0
 10a:	62 e0       	ldi	r22, 0x02	; 2
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	0e 94 b2 02 	call	0x564	; 0x564 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORT_B, PIN3, PIN_INPUT);
 112:	40 e0       	ldi	r20, 0x00	; 0
 114:	63 e0       	ldi	r22, 0x03	; 3
 116:	82 e0       	ldi	r24, 0x02	; 2
 118:	0e 94 b2 02 	call	0x564	; 0x564 <DIO_SetPinDirection>
	
	DIO_SetPinDirection(PORT_C,PIN4,PIN_OUTPUT);  // for the Select pin in the Mux
 11c:	41 e0       	ldi	r20, 0x01	; 1
 11e:	64 e0       	ldi	r22, 0x04	; 4
 120:	83 e0       	ldi	r24, 0x03	; 3
 122:	0e 94 b2 02 	call	0x564	; 0x564 <DIO_SetPinDirection>
	
	DIO_SetPinValue(PORT_B, PIN0, PIN_HIGH);
 126:	41 e0       	ldi	r20, 0x01	; 1
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	0e 94 28 03 	call	0x650	; 0x650 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B, PIN1, PIN_HIGH);
 130:	41 e0       	ldi	r20, 0x01	; 1
 132:	61 e0       	ldi	r22, 0x01	; 1
 134:	82 e0       	ldi	r24, 0x02	; 2
 136:	0e 94 28 03 	call	0x650	; 0x650 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B, PIN2, PIN_HIGH);
 13a:	41 e0       	ldi	r20, 0x01	; 1
 13c:	62 e0       	ldi	r22, 0x02	; 2
 13e:	82 e0       	ldi	r24, 0x02	; 2
 140:	0e 94 28 03 	call	0x650	; 0x650 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B, PIN3, PIN_HIGH);
 144:	41 e0       	ldi	r20, 0x01	; 1
 146:	63 e0       	ldi	r22, 0x03	; 3
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	0e 94 28 03 	call	0x650	; 0x650 <DIO_SetPinValue>
	
	DIO_SetPinValue(PORT_C, PIN4, PIN_LOW);  // default for Raspberry Pi
 14e:	40 e0       	ldi	r20, 0x00	; 0
 150:	64 e0       	ldi	r22, 0x04	; 4
 152:	83 e0       	ldi	r24, 0x03	; 3
 154:	0e 94 28 03 	call	0x650	; 0x650 <DIO_SetPinValue>
 158:	08 95       	ret

0000015a <get_mode>:

}

u8 get_mode() {
	if (DIO_GetPinValue(PORT_B, PIN0) == PIN_LOW) return MODE_JOYSTICK; // Joystick
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	0e 94 9e 03 	call	0x73c	; 0x73c <DIO_GetPinValue>
 162:	88 23       	and	r24, r24
 164:	c9 f0       	breq	.+50     	; 0x198 <get_mode+0x3e>
	if (DIO_GetPinValue(PORT_B, PIN1) == PIN_LOW) return MODE_MOBILE; // Mobile
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	0e 94 9e 03 	call	0x73c	; 0x73c <DIO_GetPinValue>
 16e:	88 23       	and	r24, r24
 170:	71 f0       	breq	.+28     	; 0x18e <get_mode+0x34>
	if (DIO_GetPinValue(PORT_B, PIN2) == PIN_LOW) return MODE_VOICE; // Voice
 172:	62 e0       	ldi	r22, 0x02	; 2
 174:	82 e0       	ldi	r24, 0x02	; 2
 176:	0e 94 9e 03 	call	0x73c	; 0x73c <DIO_GetPinValue>
 17a:	88 23       	and	r24, r24
 17c:	51 f0       	breq	.+20     	; 0x192 <get_mode+0x38>
	if (DIO_GetPinValue(PORT_B, PIN3) == PIN_LOW) return MODE_EYE; // Eye
 17e:	63 e0       	ldi	r22, 0x03	; 3
 180:	82 e0       	ldi	r24, 0x02	; 2
 182:	0e 94 9e 03 	call	0x73c	; 0x73c <DIO_GetPinValue>
 186:	81 11       	cpse	r24, r1
 188:	06 c0       	rjmp	.+12     	; 0x196 <get_mode+0x3c>
 18a:	83 e0       	ldi	r24, 0x03	; 3
 18c:	08 95       	ret

}

u8 get_mode() {
	if (DIO_GetPinValue(PORT_B, PIN0) == PIN_LOW) return MODE_JOYSTICK; // Joystick
	if (DIO_GetPinValue(PORT_B, PIN1) == PIN_LOW) return MODE_MOBILE; // Mobile
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	08 95       	ret
	if (DIO_GetPinValue(PORT_B, PIN2) == PIN_LOW) return MODE_VOICE; // Voice
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	08 95       	ret
	if (DIO_GetPinValue(PORT_B, PIN3) == PIN_LOW) return MODE_EYE; // Eye
	return 255; // Undefined
 196:	8f ef       	ldi	r24, 0xFF	; 255
}
 198:	08 95       	ret

0000019a <JoyStick_Mode>:

void JoyStick_Mode() {
 19a:	ef 92       	push	r14
 19c:	ff 92       	push	r15
 19e:	0f 93       	push	r16
 1a0:	1f 93       	push	r17
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	cd b7       	in	r28, 0x3d	; 61
 1a8:	de b7       	in	r29, 0x3e	; 62
 1aa:	64 97       	sbiw	r28, 0x14	; 20
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	f8 94       	cli
 1b0:	de bf       	out	0x3e, r29	; 62
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	cd bf       	out	0x3d, r28	; 61
	
	u16 x = ADC_Read(0); // Read X-axis
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 a7 02 	call	0x54e	; 0x54e <ADC_Read>
 1be:	7c 01       	movw	r14, r24
	u16 y = ADC_Read(1); // Read Y-axis
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 a7 02 	call	0x54e	; 0x54e <ADC_Read>
 1c8:	8c 01       	movw	r16, r24
	char buffer[20];
	sprintf(buffer, "--> X: %d and Y: %d \r\n", x, y);
 1ca:	1f 93       	push	r17
 1cc:	8f 93       	push	r24
 1ce:	ff 92       	push	r15
 1d0:	ef 92       	push	r14
 1d2:	83 e7       	ldi	r24, 0x73	; 115
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	9f 93       	push	r25
 1d8:	8f 93       	push	r24
 1da:	ce 01       	movw	r24, r28
 1dc:	01 96       	adiw	r24, 0x01	; 1
 1de:	9f 93       	push	r25
 1e0:	8f 93       	push	r24
 1e2:	0e 94 48 04 	call	0x890	; 0x890 <sprintf>
	
	if (y > 600) {
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	f8 94       	cli
 1ea:	de bf       	out	0x3e, r29	; 62
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	cd bf       	out	0x3d, r28	; 61
 1f0:	09 35       	cpi	r16, 0x59	; 89
 1f2:	92 e0       	ldi	r25, 0x02	; 2
 1f4:	19 07       	cpc	r17, r25
 1f6:	50 f0       	brcs	.+20     	; 0x20c <JoyStick_Mode+0x72>
		MoveBackward();
 1f8:	0e 94 38 02 	call	0x470	; 0x470 <MoveBackward>
		ShowingTheValue('B');
 1fc:	82 e4       	ldi	r24, 0x42	; 66
 1fe:	0e 94 ee 03 	call	0x7dc	; 0x7dc <ShowingTheValue>
		UART_sendString(buffer);
 202:	ce 01       	movw	r24, r28
 204:	01 96       	adiw	r24, 0x01	; 1
 206:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <UART_sendString>
 20a:	34 c0       	rjmp	.+104    	; 0x274 <JoyStick_Mode+0xda>
	}
	else if (y < 400) {
 20c:	00 39       	cpi	r16, 0x90	; 144
 20e:	11 40       	sbci	r17, 0x01	; 1
 210:	50 f4       	brcc	.+20     	; 0x226 <JoyStick_Mode+0x8c>
		MoveForward();
 212:	0e 94 1d 02 	call	0x43a	; 0x43a <MoveForward>
		ShowingTheValue('F');
 216:	86 e4       	ldi	r24, 0x46	; 70
 218:	0e 94 ee 03 	call	0x7dc	; 0x7dc <ShowingTheValue>
		UART_sendString(buffer);
 21c:	ce 01       	movw	r24, r28
 21e:	01 96       	adiw	r24, 0x01	; 1
 220:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <UART_sendString>
 224:	27 c0       	rjmp	.+78     	; 0x274 <JoyStick_Mode+0xda>
	}
	else if (x < 400) {
 226:	90 e9       	ldi	r25, 0x90	; 144
 228:	e9 16       	cp	r14, r25
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	f9 06       	cpc	r15, r25
 22e:	50 f4       	brcc	.+20     	; 0x244 <JoyStick_Mode+0xaa>
		MoveLeft();
 230:	0e 94 6e 02 	call	0x4dc	; 0x4dc <MoveLeft>
		ShowingTheValue('L');
 234:	8c e4       	ldi	r24, 0x4C	; 76
 236:	0e 94 ee 03 	call	0x7dc	; 0x7dc <ShowingTheValue>
		UART_sendString(buffer);
 23a:	ce 01       	movw	r24, r28
 23c:	01 96       	adiw	r24, 0x01	; 1
 23e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <UART_sendString>
 242:	18 c0       	rjmp	.+48     	; 0x274 <JoyStick_Mode+0xda>
	}
	else if (x > 600) {
 244:	89 e5       	ldi	r24, 0x59	; 89
 246:	e8 16       	cp	r14, r24
 248:	82 e0       	ldi	r24, 0x02	; 2
 24a:	f8 06       	cpc	r15, r24
 24c:	50 f0       	brcs	.+20     	; 0x262 <JoyStick_Mode+0xc8>
		MoveRight();
 24e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <MoveRight>
		ShowingTheValue('R');
 252:	82 e5       	ldi	r24, 0x52	; 82
 254:	0e 94 ee 03 	call	0x7dc	; 0x7dc <ShowingTheValue>
		UART_sendString(buffer);
 258:	ce 01       	movw	r24, r28
 25a:	01 96       	adiw	r24, 0x01	; 1
 25c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <UART_sendString>
 260:	09 c0       	rjmp	.+18     	; 0x274 <JoyStick_Mode+0xda>
	}
	else {
		Stop();
 262:	0e 94 89 02 	call	0x512	; 0x512 <Stop>
		ShowingTheValue('S');
 266:	83 e5       	ldi	r24, 0x53	; 83
 268:	0e 94 ee 03 	call	0x7dc	; 0x7dc <ShowingTheValue>
		UART_sendString(buffer);
 26c:	ce 01       	movw	r24, r28
 26e:	01 96       	adiw	r24, 0x01	; 1
 270:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <UART_sendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 274:	8f e4       	ldi	r24, 0x4F	; 79
 276:	93 ec       	ldi	r25, 0xC3	; 195
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <JoyStick_Mode+0xde>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <JoyStick_Mode+0xe4>
 27e:	00 00       	nop
	}

	_delay_ms(200);

}
 280:	64 96       	adiw	r28, 0x14	; 20
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	f8 94       	cli
 286:	de bf       	out	0x3e, r29	; 62
 288:	0f be       	out	0x3f, r0	; 63
 28a:	cd bf       	out	0x3d, r28	; 61
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	1f 91       	pop	r17
 292:	0f 91       	pop	r16
 294:	ff 90       	pop	r15
 296:	ef 90       	pop	r14
 298:	08 95       	ret

0000029a <MobileApp_Mode>:

void MobileApp_Mode() {
	char command = UART_Receive(); // Receive from ESP
 29a:	0e 94 22 04 	call	0x844	; 0x844 <UART_Receive>
	switch(command) {
 29e:	8c 36       	cpi	r24, 0x6C	; 108
 2a0:	b9 f0       	breq	.+46     	; 0x2d0 <MobileApp_Mode+0x36>
 2a2:	28 f4       	brcc	.+10     	; 0x2ae <MobileApp_Mode+0x14>
 2a4:	82 36       	cpi	r24, 0x62	; 98
 2a6:	71 f0       	breq	.+28     	; 0x2c4 <MobileApp_Mode+0x2a>
 2a8:	86 36       	cpi	r24, 0x66	; 102
 2aa:	31 f0       	breq	.+12     	; 0x2b8 <MobileApp_Mode+0x1e>
 2ac:	23 c0       	rjmp	.+70     	; 0x2f4 <MobileApp_Mode+0x5a>
 2ae:	82 37       	cpi	r24, 0x72	; 114
 2b0:	a9 f0       	breq	.+42     	; 0x2dc <MobileApp_Mode+0x42>
 2b2:	83 37       	cpi	r24, 0x73	; 115
 2b4:	c9 f0       	breq	.+50     	; 0x2e8 <MobileApp_Mode+0x4e>
 2b6:	1e c0       	rjmp	.+60     	; 0x2f4 <MobileApp_Mode+0x5a>
		case 'f': MoveForward(); ShowingTheValue('F'); break;
 2b8:	0e 94 1d 02 	call	0x43a	; 0x43a <MoveForward>
 2bc:	86 e4       	ldi	r24, 0x46	; 70
 2be:	0e 94 ee 03 	call	0x7dc	; 0x7dc <ShowingTheValue>
 2c2:	1c c0       	rjmp	.+56     	; 0x2fc <MobileApp_Mode+0x62>
		case 'b': MoveBackward(); ShowingTheValue('B'); break;
 2c4:	0e 94 38 02 	call	0x470	; 0x470 <MoveBackward>
 2c8:	82 e4       	ldi	r24, 0x42	; 66
 2ca:	0e 94 ee 03 	call	0x7dc	; 0x7dc <ShowingTheValue>
 2ce:	16 c0       	rjmp	.+44     	; 0x2fc <MobileApp_Mode+0x62>
		case 'l': MoveLeft(); ShowingTheValue('L'); break;
 2d0:	0e 94 6e 02 	call	0x4dc	; 0x4dc <MoveLeft>
 2d4:	8c e4       	ldi	r24, 0x4C	; 76
 2d6:	0e 94 ee 03 	call	0x7dc	; 0x7dc <ShowingTheValue>
 2da:	10 c0       	rjmp	.+32     	; 0x2fc <MobileApp_Mode+0x62>
		case 'r': MoveRight(); ShowingTheValue('R'); break;
 2dc:	0e 94 53 02 	call	0x4a6	; 0x4a6 <MoveRight>
 2e0:	82 e5       	ldi	r24, 0x52	; 82
 2e2:	0e 94 ee 03 	call	0x7dc	; 0x7dc <ShowingTheValue>
 2e6:	0a c0       	rjmp	.+20     	; 0x2fc <MobileApp_Mode+0x62>
		case 's': Stop(); ShowingTheValue('S'); break;
 2e8:	0e 94 89 02 	call	0x512	; 0x512 <Stop>
 2ec:	83 e5       	ldi	r24, 0x53	; 83
 2ee:	0e 94 ee 03 	call	0x7dc	; 0x7dc <ShowingTheValue>
 2f2:	04 c0       	rjmp	.+8      	; 0x2fc <MobileApp_Mode+0x62>
		default: UART_sendString("Invalid Command\n"); break;
 2f4:	8a e8       	ldi	r24, 0x8A	; 138
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <UART_sendString>
 2fc:	8f e4       	ldi	r24, 0x4F	; 79
 2fe:	93 ec       	ldi	r25, 0xC3	; 195
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <MobileApp_Mode+0x66>
 304:	00 c0       	rjmp	.+0      	; 0x306 <MobileApp_Mode+0x6c>
 306:	00 00       	nop
 308:	08 95       	ret

0000030a <Voice_Mode>:
	_delay_ms(200);
}


void Voice_Mode() {
	char command = UART_Receive();  //Receive from raspberry  Pi 
 30a:	0e 94 22 04 	call	0x844	; 0x844 <UART_Receive>
	switch(command) {
 30e:	8c 36       	cpi	r24, 0x6C	; 108
 310:	b9 f0       	breq	.+46     	; 0x340 <Voice_Mode+0x36>
 312:	28 f4       	brcc	.+10     	; 0x31e <Voice_Mode+0x14>
 314:	82 36       	cpi	r24, 0x62	; 98
 316:	71 f0       	breq	.+28     	; 0x334 <Voice_Mode+0x2a>
 318:	86 36       	cpi	r24, 0x66	; 102
 31a:	31 f0       	breq	.+12     	; 0x328 <Voice_Mode+0x1e>
 31c:	23 c0       	rjmp	.+70     	; 0x364 <Voice_Mode+0x5a>
 31e:	82 37       	cpi	r24, 0x72	; 114
 320:	a9 f0       	breq	.+42     	; 0x34c <Voice_Mode+0x42>
 322:	83 37       	cpi	r24, 0x73	; 115
 324:	c9 f0       	breq	.+50     	; 0x358 <Voice_Mode+0x4e>
 326:	1e c0       	rjmp	.+60     	; 0x364 <Voice_Mode+0x5a>
		case 'f': MoveForward(); ShowingTheValue('F'); break;
 328:	0e 94 1d 02 	call	0x43a	; 0x43a <MoveForward>
 32c:	86 e4       	ldi	r24, 0x46	; 70
 32e:	0e 94 ee 03 	call	0x7dc	; 0x7dc <ShowingTheValue>
 332:	1c c0       	rjmp	.+56     	; 0x36c <Voice_Mode+0x62>
		case 'b': MoveBackward(); ShowingTheValue('B'); break;
 334:	0e 94 38 02 	call	0x470	; 0x470 <MoveBackward>
 338:	82 e4       	ldi	r24, 0x42	; 66
 33a:	0e 94 ee 03 	call	0x7dc	; 0x7dc <ShowingTheValue>
 33e:	16 c0       	rjmp	.+44     	; 0x36c <Voice_Mode+0x62>
		case 'l': MoveLeft(); ShowingTheValue('L'); break;
 340:	0e 94 6e 02 	call	0x4dc	; 0x4dc <MoveLeft>
 344:	8c e4       	ldi	r24, 0x4C	; 76
 346:	0e 94 ee 03 	call	0x7dc	; 0x7dc <ShowingTheValue>
 34a:	10 c0       	rjmp	.+32     	; 0x36c <Voice_Mode+0x62>
		case 'r': MoveRight(); ShowingTheValue('R'); break;
 34c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <MoveRight>
 350:	82 e5       	ldi	r24, 0x52	; 82
 352:	0e 94 ee 03 	call	0x7dc	; 0x7dc <ShowingTheValue>
 356:	0a c0       	rjmp	.+20     	; 0x36c <Voice_Mode+0x62>
		case 's': Stop(); ShowingTheValue('S'); break;
 358:	0e 94 89 02 	call	0x512	; 0x512 <Stop>
 35c:	83 e5       	ldi	r24, 0x53	; 83
 35e:	0e 94 ee 03 	call	0x7dc	; 0x7dc <ShowingTheValue>
 362:	04 c0       	rjmp	.+8      	; 0x36c <Voice_Mode+0x62>
		default: UART_sendString("Invalid Command\n"); break;
 364:	8a e8       	ldi	r24, 0x8A	; 138
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <UART_sendString>
 36c:	8f e4       	ldi	r24, 0x4F	; 79
 36e:	93 ec       	ldi	r25, 0xC3	; 195
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	f1 f7       	brne	.-4      	; 0x370 <Voice_Mode+0x66>
 374:	00 c0       	rjmp	.+0      	; 0x376 <Voice_Mode+0x6c>
 376:	00 00       	nop
 378:	08 95       	ret

0000037a <EyeTracking_Mode>:
	_delay_ms(200);
}

void EyeTracking_Mode() {
	
	char direction = UART_Receive();  //Receive from raspberry  Pi 
 37a:	0e 94 22 04 	call	0x844	; 0x844 <UART_Receive>
	switch(direction) {
 37e:	8c 36       	cpi	r24, 0x6C	; 108
 380:	b9 f0       	breq	.+46     	; 0x3b0 <EyeTracking_Mode+0x36>
 382:	28 f4       	brcc	.+10     	; 0x38e <EyeTracking_Mode+0x14>
 384:	82 36       	cpi	r24, 0x62	; 98
 386:	71 f0       	breq	.+28     	; 0x3a4 <EyeTracking_Mode+0x2a>
 388:	86 36       	cpi	r24, 0x66	; 102
 38a:	31 f0       	breq	.+12     	; 0x398 <EyeTracking_Mode+0x1e>
 38c:	23 c0       	rjmp	.+70     	; 0x3d4 <EyeTracking_Mode+0x5a>
 38e:	82 37       	cpi	r24, 0x72	; 114
 390:	a9 f0       	breq	.+42     	; 0x3bc <EyeTracking_Mode+0x42>
 392:	83 37       	cpi	r24, 0x73	; 115
 394:	c9 f0       	breq	.+50     	; 0x3c8 <EyeTracking_Mode+0x4e>
 396:	1e c0       	rjmp	.+60     	; 0x3d4 <EyeTracking_Mode+0x5a>
		case 'f': MoveForward(); ShowingTheValue('F'); break;
 398:	0e 94 1d 02 	call	0x43a	; 0x43a <MoveForward>
 39c:	86 e4       	ldi	r24, 0x46	; 70
 39e:	0e 94 ee 03 	call	0x7dc	; 0x7dc <ShowingTheValue>
 3a2:	1c c0       	rjmp	.+56     	; 0x3dc <EyeTracking_Mode+0x62>
		case 'b': MoveBackward(); ShowingTheValue('B'); break;
 3a4:	0e 94 38 02 	call	0x470	; 0x470 <MoveBackward>
 3a8:	82 e4       	ldi	r24, 0x42	; 66
 3aa:	0e 94 ee 03 	call	0x7dc	; 0x7dc <ShowingTheValue>
 3ae:	16 c0       	rjmp	.+44     	; 0x3dc <EyeTracking_Mode+0x62>
		case 'l': MoveLeft(); ShowingTheValue('L'); break;
 3b0:	0e 94 6e 02 	call	0x4dc	; 0x4dc <MoveLeft>
 3b4:	8c e4       	ldi	r24, 0x4C	; 76
 3b6:	0e 94 ee 03 	call	0x7dc	; 0x7dc <ShowingTheValue>
 3ba:	10 c0       	rjmp	.+32     	; 0x3dc <EyeTracking_Mode+0x62>
		case 'r': MoveRight(); ShowingTheValue('R'); break;
 3bc:	0e 94 53 02 	call	0x4a6	; 0x4a6 <MoveRight>
 3c0:	82 e5       	ldi	r24, 0x52	; 82
 3c2:	0e 94 ee 03 	call	0x7dc	; 0x7dc <ShowingTheValue>
 3c6:	0a c0       	rjmp	.+20     	; 0x3dc <EyeTracking_Mode+0x62>
		case 's': Stop(); ShowingTheValue('S'); break;
 3c8:	0e 94 89 02 	call	0x512	; 0x512 <Stop>
 3cc:	83 e5       	ldi	r24, 0x53	; 83
 3ce:	0e 94 ee 03 	call	0x7dc	; 0x7dc <ShowingTheValue>
 3d2:	04 c0       	rjmp	.+8      	; 0x3dc <EyeTracking_Mode+0x62>
		default: UART_sendString("Invalid Command\n"); break;
 3d4:	8a e8       	ldi	r24, 0x8A	; 138
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <UART_sendString>
 3dc:	8f e4       	ldi	r24, 0x4F	; 79
 3de:	93 ec       	ldi	r25, 0xC3	; 195
 3e0:	01 97       	sbiw	r24, 0x01	; 1
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <EyeTracking_Mode+0x66>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <EyeTracking_Mode+0x6c>
 3e6:	00 00       	nop
 3e8:	08 95       	ret

000003ea <PWM_init>:
#include "TIMER_Private.h"

// PWM Initialization
void PWM_init() {
	
	DIO_SetPinDirection(PORT_C,PIN4,PIN_OUTPUT); //Output pins OCR1B (PD4)
 3ea:	41 e0       	ldi	r20, 0x01	; 1
 3ec:	64 e0       	ldi	r22, 0x04	; 4
 3ee:	83 e0       	ldi	r24, 0x03	; 3
 3f0:	0e 94 b2 02 	call	0x564	; 0x564 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORT_C,PIN5,PIN_OUTPUT); //Output pins OCR1A (PD5)
 3f4:	41 e0       	ldi	r20, 0x01	; 1
 3f6:	65 e0       	ldi	r22, 0x05	; 5
 3f8:	83 e0       	ldi	r24, 0x03	; 3
 3fa:	0e 94 b2 02 	call	0x564	; 0x564 <DIO_SetPinDirection>
	
	// Fast PWM Mode 14, Non-inverting
	TTCR1A = (1 << TTCR1A_COM1A1) | (1 << TTCR1A_COM1B1) | (1 << TTCR1A_WGM11);
 3fe:	82 ea       	ldi	r24, 0xA2	; 162
 400:	8f bd       	out	0x2f, r24	; 47
	TTCR1B = (1 << TTCR1B_WGM12) | (1 << TTCR1B_WGM13) | (1 << TTCR1B_CS11);  // Prescaler = 8
 402:	8a e1       	ldi	r24, 0x1A	; 26
 404:	8e bd       	out	0x2e, r24	; 46

	ICR1 = 255;  // PWM 8-bit
 406:	8f ef       	ldi	r24, 0xFF	; 255
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	98 bd       	out	0x28, r25	; 40
 40c:	87 bd       	out	0x27, r24	; 39
 40e:	08 95       	ret

00000410 <Motor_init>:
}

// Direction control via L298N (Connected to PORTC)

void Motor_init() {
	DIO_SetPinDirection(PORT_C,PIN0,PIN_OUTPUT); //Output pins IN1 (PC0)
 410:	41 e0       	ldi	r20, 0x01	; 1
 412:	60 e0       	ldi	r22, 0x00	; 0
 414:	83 e0       	ldi	r24, 0x03	; 3
 416:	0e 94 b2 02 	call	0x564	; 0x564 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORT_C,PIN1,PIN_OUTPUT); //Output pins IN2 (PC1)
 41a:	41 e0       	ldi	r20, 0x01	; 1
 41c:	61 e0       	ldi	r22, 0x01	; 1
 41e:	83 e0       	ldi	r24, 0x03	; 3
 420:	0e 94 b2 02 	call	0x564	; 0x564 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORT_C,PIN2,PIN_OUTPUT); //Output pins IN3 (PC2)
 424:	41 e0       	ldi	r20, 0x01	; 1
 426:	62 e0       	ldi	r22, 0x02	; 2
 428:	83 e0       	ldi	r24, 0x03	; 3
 42a:	0e 94 b2 02 	call	0x564	; 0x564 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORT_C,PIN3,PIN_OUTPUT); //Output pins IN4 (PC3)
 42e:	41 e0       	ldi	r20, 0x01	; 1
 430:	63 e0       	ldi	r22, 0x03	; 3
 432:	83 e0       	ldi	r24, 0x03	; 3
 434:	0e 94 b2 02 	call	0x564	; 0x564 <DIO_SetPinDirection>
 438:	08 95       	ret

0000043a <MoveForward>:
}

void MoveForward() {
	OCR1A=191;   // Left
 43a:	8f eb       	ldi	r24, 0xBF	; 191
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	9c bd       	out	0x2c, r25	; 44
 440:	8b bd       	out	0x2b, r24	; 43
	OCR1B=191;   // Right
 442:	9a bd       	out	0x2a, r25	; 42
 444:	89 bd       	out	0x29, r24	; 41
	
	DIO_SetPinValue(PORT_C,PIN0,PIN_HIGH);
 446:	41 e0       	ldi	r20, 0x01	; 1
 448:	60 e0       	ldi	r22, 0x00	; 0
 44a:	83 e0       	ldi	r24, 0x03	; 3
 44c:	0e 94 28 03 	call	0x650	; 0x650 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN2,PIN_HIGH);
 450:	41 e0       	ldi	r20, 0x01	; 1
 452:	62 e0       	ldi	r22, 0x02	; 2
 454:	83 e0       	ldi	r24, 0x03	; 3
 456:	0e 94 28 03 	call	0x650	; 0x650 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN1,PIN_LOW);
 45a:	40 e0       	ldi	r20, 0x00	; 0
 45c:	61 e0       	ldi	r22, 0x01	; 1
 45e:	83 e0       	ldi	r24, 0x03	; 3
 460:	0e 94 28 03 	call	0x650	; 0x650 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN3,PIN_LOW);
 464:	40 e0       	ldi	r20, 0x00	; 0
 466:	63 e0       	ldi	r22, 0x03	; 3
 468:	83 e0       	ldi	r24, 0x03	; 3
 46a:	0e 94 28 03 	call	0x650	; 0x650 <DIO_SetPinValue>
 46e:	08 95       	ret

00000470 <MoveBackward>:
}

void MoveBackward() {
	OCR1A=191;
 470:	8f eb       	ldi	r24, 0xBF	; 191
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	9c bd       	out	0x2c, r25	; 44
 476:	8b bd       	out	0x2b, r24	; 43
	OCR1B=191;
 478:	9a bd       	out	0x2a, r25	; 42
 47a:	89 bd       	out	0x29, r24	; 41

	DIO_SetPinValue(PORT_C,PIN1,PIN_HIGH);
 47c:	41 e0       	ldi	r20, 0x01	; 1
 47e:	61 e0       	ldi	r22, 0x01	; 1
 480:	83 e0       	ldi	r24, 0x03	; 3
 482:	0e 94 28 03 	call	0x650	; 0x650 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN3,PIN_HIGH);
 486:	41 e0       	ldi	r20, 0x01	; 1
 488:	63 e0       	ldi	r22, 0x03	; 3
 48a:	83 e0       	ldi	r24, 0x03	; 3
 48c:	0e 94 28 03 	call	0x650	; 0x650 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN0,PIN_LOW);
 490:	40 e0       	ldi	r20, 0x00	; 0
 492:	60 e0       	ldi	r22, 0x00	; 0
 494:	83 e0       	ldi	r24, 0x03	; 3
 496:	0e 94 28 03 	call	0x650	; 0x650 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN2,PIN_LOW);
 49a:	40 e0       	ldi	r20, 0x00	; 0
 49c:	62 e0       	ldi	r22, 0x02	; 2
 49e:	83 e0       	ldi	r24, 0x03	; 3
 4a0:	0e 94 28 03 	call	0x650	; 0x650 <DIO_SetPinValue>
 4a4:	08 95       	ret

000004a6 <MoveRight>:
}

void MoveRight() {
	OCR1A=191;
 4a6:	8f eb       	ldi	r24, 0xBF	; 191
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	9c bd       	out	0x2c, r25	; 44
 4ac:	8b bd       	out	0x2b, r24	; 43
	OCR1B=0;
 4ae:	1a bc       	out	0x2a, r1	; 42
 4b0:	19 bc       	out	0x29, r1	; 41

	DIO_SetPinValue(PORT_C,PIN0,PIN_HIGH);  // Left Motor Forward
 4b2:	41 e0       	ldi	r20, 0x01	; 1
 4b4:	60 e0       	ldi	r22, 0x00	; 0
 4b6:	83 e0       	ldi	r24, 0x03	; 3
 4b8:	0e 94 28 03 	call	0x650	; 0x650 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN1,PIN_LOW);
 4bc:	40 e0       	ldi	r20, 0x00	; 0
 4be:	61 e0       	ldi	r22, 0x01	; 1
 4c0:	83 e0       	ldi	r24, 0x03	; 3
 4c2:	0e 94 28 03 	call	0x650	; 0x650 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN2,PIN_LOW);  // Right Motor Stop
 4c6:	40 e0       	ldi	r20, 0x00	; 0
 4c8:	62 e0       	ldi	r22, 0x02	; 2
 4ca:	83 e0       	ldi	r24, 0x03	; 3
 4cc:	0e 94 28 03 	call	0x650	; 0x650 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN3,PIN_LOW);
 4d0:	40 e0       	ldi	r20, 0x00	; 0
 4d2:	63 e0       	ldi	r22, 0x03	; 3
 4d4:	83 e0       	ldi	r24, 0x03	; 3
 4d6:	0e 94 28 03 	call	0x650	; 0x650 <DIO_SetPinValue>
 4da:	08 95       	ret

000004dc <MoveLeft>:

}

void MoveLeft() {
	OCR1A=0;
 4dc:	1c bc       	out	0x2c, r1	; 44
 4de:	1b bc       	out	0x2b, r1	; 43
	OCR1B=191;
 4e0:	8f eb       	ldi	r24, 0xBF	; 191
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	9a bd       	out	0x2a, r25	; 42
 4e6:	89 bd       	out	0x29, r24	; 41
	
	DIO_SetPinValue(PORT_C,PIN2,PIN_HIGH);  // Right Motor Forward
 4e8:	41 e0       	ldi	r20, 0x01	; 1
 4ea:	62 e0       	ldi	r22, 0x02	; 2
 4ec:	83 e0       	ldi	r24, 0x03	; 3
 4ee:	0e 94 28 03 	call	0x650	; 0x650 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN3,PIN_LOW);
 4f2:	40 e0       	ldi	r20, 0x00	; 0
 4f4:	63 e0       	ldi	r22, 0x03	; 3
 4f6:	83 e0       	ldi	r24, 0x03	; 3
 4f8:	0e 94 28 03 	call	0x650	; 0x650 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN0,PIN_LOW);  // Left Motor Stop
 4fc:	40 e0       	ldi	r20, 0x00	; 0
 4fe:	60 e0       	ldi	r22, 0x00	; 0
 500:	83 e0       	ldi	r24, 0x03	; 3
 502:	0e 94 28 03 	call	0x650	; 0x650 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN1,PIN_LOW);
 506:	40 e0       	ldi	r20, 0x00	; 0
 508:	61 e0       	ldi	r22, 0x01	; 1
 50a:	83 e0       	ldi	r24, 0x03	; 3
 50c:	0e 94 28 03 	call	0x650	; 0x650 <DIO_SetPinValue>
 510:	08 95       	ret

00000512 <Stop>:
}

void Stop() {
	OCR1A=0;
 512:	1c bc       	out	0x2c, r1	; 44
 514:	1b bc       	out	0x2b, r1	; 43
	OCR1B=0;
 516:	1a bc       	out	0x2a, r1	; 42
 518:	19 bc       	out	0x29, r1	; 41
	// All motors stop
	DIO_SetPinValue(PORT_C,PIN0,PIN_LOW);
 51a:	40 e0       	ldi	r20, 0x00	; 0
 51c:	60 e0       	ldi	r22, 0x00	; 0
 51e:	83 e0       	ldi	r24, 0x03	; 3
 520:	0e 94 28 03 	call	0x650	; 0x650 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN1,PIN_LOW);
 524:	40 e0       	ldi	r20, 0x00	; 0
 526:	61 e0       	ldi	r22, 0x01	; 1
 528:	83 e0       	ldi	r24, 0x03	; 3
 52a:	0e 94 28 03 	call	0x650	; 0x650 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN2,PIN_LOW);
 52e:	40 e0       	ldi	r20, 0x00	; 0
 530:	62 e0       	ldi	r22, 0x02	; 2
 532:	83 e0       	ldi	r24, 0x03	; 3
 534:	0e 94 28 03 	call	0x650	; 0x650 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN3,PIN_LOW);
 538:	40 e0       	ldi	r20, 0x00	; 0
 53a:	63 e0       	ldi	r22, 0x03	; 3
 53c:	83 e0       	ldi	r24, 0x03	; 3
 53e:	0e 94 28 03 	call	0x650	; 0x650 <DIO_SetPinValue>
 542:	08 95       	ret

00000544 <ADC_Init>:
#include "ADC_Interface.h"



void ADC_Init() {
	ADMUX = (1<<ADMUX_REFS0);  // AVcc as reference
 544:	80 e4       	ldi	r24, 0x40	; 64
 546:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADCSRA_ADEN)|(1<<ADCSRA_ADPS2)|(1<<ADCSRA_ADPS1);  //Enable ADC, prescaler 64
 548:	86 e8       	ldi	r24, 0x86	; 134
 54a:	86 b9       	out	0x06, r24	; 6
 54c:	08 95       	ret

0000054e <ADC_Read>:
}

u16 ADC_Read(u8 channel) {
	ADMUX = (1 << ADMUX_REFS0) | (channel & 0x0F);  // Select ADC channel
 54e:	8f 70       	andi	r24, 0x0F	; 15
 550:	80 64       	ori	r24, 0x40	; 64
 552:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<< ADCSRA_ADSC);   // Start conversion
 554:	86 b1       	in	r24, 0x06	; 6
 556:	80 64       	ori	r24, 0x40	; 64
 558:	86 b9       	out	0x06, r24	; 6
	while(ADCSRA & (1<< ADCSRA_ADSC));  // Wait for conversion to finish
 55a:	36 99       	sbic	0x06, 6	; 6
 55c:	fe cf       	rjmp	.-4      	; 0x55a <ADC_Read+0xc>
	return ADC_OUTPUT;
 55e:	84 b1       	in	r24, 0x04	; 4
 560:	95 b1       	in	r25, 0x05	; 5
}
 562:	08 95       	ret

00000564 <DIO_SetPinDirection>:

/* Function definitions that deals with pins */

void DIO_SetPinDirection(u8 PortName,u8 PinNumber,u8 PinDirection)
{
	if(PinDirection==PIN_OUTPUT)
 564:	41 30       	cpi	r20, 0x01	; 1
 566:	b9 f5       	brne	.+110    	; 0x5d6 <DIO_SetPinDirection+0x72>
	{
		switch(PortName)
 568:	82 30       	cpi	r24, 0x02	; 2
 56a:	a1 f0       	breq	.+40     	; 0x594 <DIO_SetPinDirection+0x30>
 56c:	18 f4       	brcc	.+6      	; 0x574 <DIO_SetPinDirection+0x10>
 56e:	81 30       	cpi	r24, 0x01	; 1
 570:	31 f0       	breq	.+12     	; 0x57e <DIO_SetPinDirection+0x1a>
 572:	08 95       	ret
 574:	83 30       	cpi	r24, 0x03	; 3
 576:	c9 f0       	breq	.+50     	; 0x5aa <DIO_SetPinDirection+0x46>
 578:	84 30       	cpi	r24, 0x04	; 4
 57a:	11 f1       	breq	.+68     	; 0x5c0 <DIO_SetPinDirection+0x5c>
 57c:	08 95       	ret
		{	case PORT_A: SET_BIT(DDRA,PinNumber);
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	02 c0       	rjmp	.+4      	; 0x588 <DIO_SetPinDirection+0x24>
 584:	88 0f       	add	r24, r24
 586:	99 1f       	adc	r25, r25
 588:	6a 95       	dec	r22
 58a:	e2 f7       	brpl	.-8      	; 0x584 <DIO_SetPinDirection+0x20>
 58c:	9a b3       	in	r25, 0x1a	; 26
 58e:	89 2b       	or	r24, r25
 590:	8a bb       	out	0x1a, r24	; 26
			break;
 592:	08 95       	ret
			case PORT_B: SET_BIT(DDRB,PinNumber);
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	02 c0       	rjmp	.+4      	; 0x59e <DIO_SetPinDirection+0x3a>
 59a:	88 0f       	add	r24, r24
 59c:	99 1f       	adc	r25, r25
 59e:	6a 95       	dec	r22
 5a0:	e2 f7       	brpl	.-8      	; 0x59a <DIO_SetPinDirection+0x36>
 5a2:	97 b3       	in	r25, 0x17	; 23
 5a4:	89 2b       	or	r24, r25
 5a6:	87 bb       	out	0x17, r24	; 23
			break;
 5a8:	08 95       	ret
			case PORT_C: SET_BIT(DDRC,PinNumber);
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <DIO_SetPinDirection+0x50>
 5b0:	88 0f       	add	r24, r24
 5b2:	99 1f       	adc	r25, r25
 5b4:	6a 95       	dec	r22
 5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <DIO_SetPinDirection+0x4c>
 5b8:	94 b3       	in	r25, 0x14	; 20
 5ba:	89 2b       	or	r24, r25
 5bc:	84 bb       	out	0x14, r24	; 20
			break;
 5be:	08 95       	ret
			case PORT_D: SET_BIT(DDRD,PinNumber);
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <DIO_SetPinDirection+0x66>
 5c6:	88 0f       	add	r24, r24
 5c8:	99 1f       	adc	r25, r25
 5ca:	6a 95       	dec	r22
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <DIO_SetPinDirection+0x62>
 5ce:	91 b3       	in	r25, 0x11	; 17
 5d0:	89 2b       	or	r24, r25
 5d2:	81 bb       	out	0x11, r24	; 17
			break;
 5d4:	08 95       	ret
		}
	}
	else if(PinDirection==PIN_INPUT)
 5d6:	41 11       	cpse	r20, r1
 5d8:	3a c0       	rjmp	.+116    	; 0x64e <DIO_SetPinDirection+0xea>
	{
		switch(PortName)
 5da:	82 30       	cpi	r24, 0x02	; 2
 5dc:	a9 f0       	breq	.+42     	; 0x608 <DIO_SetPinDirection+0xa4>
 5de:	18 f4       	brcc	.+6      	; 0x5e6 <DIO_SetPinDirection+0x82>
 5e0:	81 30       	cpi	r24, 0x01	; 1
 5e2:	31 f0       	breq	.+12     	; 0x5f0 <DIO_SetPinDirection+0x8c>
 5e4:	08 95       	ret
 5e6:	83 30       	cpi	r24, 0x03	; 3
 5e8:	d9 f0       	breq	.+54     	; 0x620 <DIO_SetPinDirection+0xbc>
 5ea:	84 30       	cpi	r24, 0x04	; 4
 5ec:	29 f1       	breq	.+74     	; 0x638 <DIO_SetPinDirection+0xd4>
 5ee:	08 95       	ret
		{	case PORT_A: CLR_BIT(DDRA,PinNumber);
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	02 c0       	rjmp	.+4      	; 0x5fa <DIO_SetPinDirection+0x96>
 5f6:	88 0f       	add	r24, r24
 5f8:	99 1f       	adc	r25, r25
 5fa:	6a 95       	dec	r22
 5fc:	e2 f7       	brpl	.-8      	; 0x5f6 <DIO_SetPinDirection+0x92>
 5fe:	80 95       	com	r24
 600:	9a b3       	in	r25, 0x1a	; 26
 602:	89 23       	and	r24, r25
 604:	8a bb       	out	0x1a, r24	; 26
			break;
 606:	08 95       	ret
			case PORT_B: CLR_BIT(DDRB,PinNumber);
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	02 c0       	rjmp	.+4      	; 0x612 <DIO_SetPinDirection+0xae>
 60e:	88 0f       	add	r24, r24
 610:	99 1f       	adc	r25, r25
 612:	6a 95       	dec	r22
 614:	e2 f7       	brpl	.-8      	; 0x60e <DIO_SetPinDirection+0xaa>
 616:	80 95       	com	r24
 618:	97 b3       	in	r25, 0x17	; 23
 61a:	89 23       	and	r24, r25
 61c:	87 bb       	out	0x17, r24	; 23
			break;
 61e:	08 95       	ret
			case PORT_C: CLR_BIT(DDRC,PinNumber);
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	02 c0       	rjmp	.+4      	; 0x62a <DIO_SetPinDirection+0xc6>
 626:	88 0f       	add	r24, r24
 628:	99 1f       	adc	r25, r25
 62a:	6a 95       	dec	r22
 62c:	e2 f7       	brpl	.-8      	; 0x626 <DIO_SetPinDirection+0xc2>
 62e:	80 95       	com	r24
 630:	94 b3       	in	r25, 0x14	; 20
 632:	89 23       	and	r24, r25
 634:	84 bb       	out	0x14, r24	; 20
			break;
 636:	08 95       	ret
			case PORT_D: CLR_BIT(DDRD,PinNumber);
 638:	81 e0       	ldi	r24, 0x01	; 1
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	02 c0       	rjmp	.+4      	; 0x642 <DIO_SetPinDirection+0xde>
 63e:	88 0f       	add	r24, r24
 640:	99 1f       	adc	r25, r25
 642:	6a 95       	dec	r22
 644:	e2 f7       	brpl	.-8      	; 0x63e <DIO_SetPinDirection+0xda>
 646:	80 95       	com	r24
 648:	91 b3       	in	r25, 0x11	; 17
 64a:	89 23       	and	r24, r25
 64c:	81 bb       	out	0x11, r24	; 17
 64e:	08 95       	ret

00000650 <DIO_SetPinValue>:
		}
	}
}
void DIO_SetPinValue(u8 PortName,u8 PinNumber,u8 PinValue)
{
		if(PinValue==PIN_HIGH)
 650:	41 30       	cpi	r20, 0x01	; 1
 652:	b9 f5       	brne	.+110    	; 0x6c2 <DIO_SetPinValue+0x72>
		{
			switch(PortName)
 654:	82 30       	cpi	r24, 0x02	; 2
 656:	a1 f0       	breq	.+40     	; 0x680 <DIO_SetPinValue+0x30>
 658:	18 f4       	brcc	.+6      	; 0x660 <DIO_SetPinValue+0x10>
 65a:	81 30       	cpi	r24, 0x01	; 1
 65c:	31 f0       	breq	.+12     	; 0x66a <DIO_SetPinValue+0x1a>
 65e:	08 95       	ret
 660:	83 30       	cpi	r24, 0x03	; 3
 662:	c9 f0       	breq	.+50     	; 0x696 <DIO_SetPinValue+0x46>
 664:	84 30       	cpi	r24, 0x04	; 4
 666:	11 f1       	breq	.+68     	; 0x6ac <DIO_SetPinValue+0x5c>
 668:	08 95       	ret
			{	case PORT_A: SET_BIT(PORTA,PinNumber);
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	02 c0       	rjmp	.+4      	; 0x674 <DIO_SetPinValue+0x24>
 670:	88 0f       	add	r24, r24
 672:	99 1f       	adc	r25, r25
 674:	6a 95       	dec	r22
 676:	e2 f7       	brpl	.-8      	; 0x670 <DIO_SetPinValue+0x20>
 678:	9b b3       	in	r25, 0x1b	; 27
 67a:	89 2b       	or	r24, r25
 67c:	8b bb       	out	0x1b, r24	; 27
				break;
 67e:	08 95       	ret
				case PORT_B: SET_BIT(PORTB,PinNumber);
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	02 c0       	rjmp	.+4      	; 0x68a <DIO_SetPinValue+0x3a>
 686:	88 0f       	add	r24, r24
 688:	99 1f       	adc	r25, r25
 68a:	6a 95       	dec	r22
 68c:	e2 f7       	brpl	.-8      	; 0x686 <DIO_SetPinValue+0x36>
 68e:	98 b3       	in	r25, 0x18	; 24
 690:	89 2b       	or	r24, r25
 692:	88 bb       	out	0x18, r24	; 24
				break;
 694:	08 95       	ret
				case PORT_C: SET_BIT(PORTC,PinNumber);
 696:	81 e0       	ldi	r24, 0x01	; 1
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	02 c0       	rjmp	.+4      	; 0x6a0 <DIO_SetPinValue+0x50>
 69c:	88 0f       	add	r24, r24
 69e:	99 1f       	adc	r25, r25
 6a0:	6a 95       	dec	r22
 6a2:	e2 f7       	brpl	.-8      	; 0x69c <DIO_SetPinValue+0x4c>
 6a4:	95 b3       	in	r25, 0x15	; 21
 6a6:	89 2b       	or	r24, r25
 6a8:	85 bb       	out	0x15, r24	; 21
				break;
 6aa:	08 95       	ret
				case PORT_D: SET_BIT(PORTD,PinNumber);
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <DIO_SetPinValue+0x66>
 6b2:	88 0f       	add	r24, r24
 6b4:	99 1f       	adc	r25, r25
 6b6:	6a 95       	dec	r22
 6b8:	e2 f7       	brpl	.-8      	; 0x6b2 <DIO_SetPinValue+0x62>
 6ba:	92 b3       	in	r25, 0x12	; 18
 6bc:	89 2b       	or	r24, r25
 6be:	82 bb       	out	0x12, r24	; 18
				break;
 6c0:	08 95       	ret
			}
		}
		else if(PinValue==PIN_LOW)
 6c2:	41 11       	cpse	r20, r1
 6c4:	3a c0       	rjmp	.+116    	; 0x73a <DIO_SetPinValue+0xea>
		{
			switch(PortName)
 6c6:	82 30       	cpi	r24, 0x02	; 2
 6c8:	a9 f0       	breq	.+42     	; 0x6f4 <DIO_SetPinValue+0xa4>
 6ca:	18 f4       	brcc	.+6      	; 0x6d2 <DIO_SetPinValue+0x82>
 6cc:	81 30       	cpi	r24, 0x01	; 1
 6ce:	31 f0       	breq	.+12     	; 0x6dc <DIO_SetPinValue+0x8c>
 6d0:	08 95       	ret
 6d2:	83 30       	cpi	r24, 0x03	; 3
 6d4:	d9 f0       	breq	.+54     	; 0x70c <DIO_SetPinValue+0xbc>
 6d6:	84 30       	cpi	r24, 0x04	; 4
 6d8:	29 f1       	breq	.+74     	; 0x724 <DIO_SetPinValue+0xd4>
 6da:	08 95       	ret
			{	case PORT_A: CLR_BIT(PORTA,PinNumber);
 6dc:	81 e0       	ldi	r24, 0x01	; 1
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <DIO_SetPinValue+0x96>
 6e2:	88 0f       	add	r24, r24
 6e4:	99 1f       	adc	r25, r25
 6e6:	6a 95       	dec	r22
 6e8:	e2 f7       	brpl	.-8      	; 0x6e2 <DIO_SetPinValue+0x92>
 6ea:	80 95       	com	r24
 6ec:	9b b3       	in	r25, 0x1b	; 27
 6ee:	89 23       	and	r24, r25
 6f0:	8b bb       	out	0x1b, r24	; 27
				break;
 6f2:	08 95       	ret
				case PORT_B: CLR_BIT(PORTB,PinNumber);
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	02 c0       	rjmp	.+4      	; 0x6fe <DIO_SetPinValue+0xae>
 6fa:	88 0f       	add	r24, r24
 6fc:	99 1f       	adc	r25, r25
 6fe:	6a 95       	dec	r22
 700:	e2 f7       	brpl	.-8      	; 0x6fa <DIO_SetPinValue+0xaa>
 702:	80 95       	com	r24
 704:	98 b3       	in	r25, 0x18	; 24
 706:	89 23       	and	r24, r25
 708:	88 bb       	out	0x18, r24	; 24
				break;
 70a:	08 95       	ret
				case PORT_C: CLR_BIT(PORTC,PinNumber);
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	02 c0       	rjmp	.+4      	; 0x716 <DIO_SetPinValue+0xc6>
 712:	88 0f       	add	r24, r24
 714:	99 1f       	adc	r25, r25
 716:	6a 95       	dec	r22
 718:	e2 f7       	brpl	.-8      	; 0x712 <DIO_SetPinValue+0xc2>
 71a:	80 95       	com	r24
 71c:	95 b3       	in	r25, 0x15	; 21
 71e:	89 23       	and	r24, r25
 720:	85 bb       	out	0x15, r24	; 21
				break;
 722:	08 95       	ret
				case PORT_D: CLR_BIT(PORTD,PinNumber);
 724:	81 e0       	ldi	r24, 0x01	; 1
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	02 c0       	rjmp	.+4      	; 0x72e <DIO_SetPinValue+0xde>
 72a:	88 0f       	add	r24, r24
 72c:	99 1f       	adc	r25, r25
 72e:	6a 95       	dec	r22
 730:	e2 f7       	brpl	.-8      	; 0x72a <DIO_SetPinValue+0xda>
 732:	80 95       	com	r24
 734:	92 b3       	in	r25, 0x12	; 18
 736:	89 23       	and	r24, r25
 738:	82 bb       	out	0x12, r24	; 18
 73a:	08 95       	ret

0000073c <DIO_GetPinValue>:
		}
}
u8   DIO_GetPinValue(u8 Portname,u8 PinNumber)
{
	u8 PinState;
	switch(Portname)
 73c:	82 30       	cpi	r24, 0x02	; 2
 73e:	99 f0       	breq	.+38     	; 0x766 <DIO_GetPinValue+0x2a>
 740:	18 f4       	brcc	.+6      	; 0x748 <DIO_GetPinValue+0xc>
 742:	81 30       	cpi	r24, 0x01	; 1
 744:	31 f0       	breq	.+12     	; 0x752 <DIO_GetPinValue+0x16>
 746:	2c c0       	rjmp	.+88     	; 0x7a0 <DIO_GetPinValue+0x64>
 748:	83 30       	cpi	r24, 0x03	; 3
 74a:	b9 f0       	breq	.+46     	; 0x77a <DIO_GetPinValue+0x3e>
 74c:	84 30       	cpi	r24, 0x04	; 4
 74e:	f9 f0       	breq	.+62     	; 0x78e <DIO_GetPinValue+0x52>
 750:	27 c0       	rjmp	.+78     	; 0x7a0 <DIO_GetPinValue+0x64>
	{
		case PORT_A:PinState=GET_BIT(PINA,PinNumber);
 752:	89 b3       	in	r24, 0x19	; 25
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	02 c0       	rjmp	.+4      	; 0x75c <DIO_GetPinValue+0x20>
 758:	95 95       	asr	r25
 75a:	87 95       	ror	r24
 75c:	6a 95       	dec	r22
 75e:	e2 f7       	brpl	.-8      	; 0x758 <DIO_GetPinValue+0x1c>
 760:	98 2f       	mov	r25, r24
 762:	91 70       	andi	r25, 0x01	; 1
		break;
 764:	1d c0       	rjmp	.+58     	; 0x7a0 <DIO_GetPinValue+0x64>
		case PORT_B:PinState=GET_BIT(PINB,PinNumber);
 766:	86 b3       	in	r24, 0x16	; 22
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	02 c0       	rjmp	.+4      	; 0x770 <DIO_GetPinValue+0x34>
 76c:	95 95       	asr	r25
 76e:	87 95       	ror	r24
 770:	6a 95       	dec	r22
 772:	e2 f7       	brpl	.-8      	; 0x76c <DIO_GetPinValue+0x30>
 774:	98 2f       	mov	r25, r24
 776:	91 70       	andi	r25, 0x01	; 1
		break;
 778:	13 c0       	rjmp	.+38     	; 0x7a0 <DIO_GetPinValue+0x64>
		case PORT_C:PinState=GET_BIT(PINC,PinNumber);
 77a:	83 b3       	in	r24, 0x13	; 19
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	02 c0       	rjmp	.+4      	; 0x784 <DIO_GetPinValue+0x48>
 780:	95 95       	asr	r25
 782:	87 95       	ror	r24
 784:	6a 95       	dec	r22
 786:	e2 f7       	brpl	.-8      	; 0x780 <DIO_GetPinValue+0x44>
 788:	98 2f       	mov	r25, r24
 78a:	91 70       	andi	r25, 0x01	; 1
		break;
 78c:	09 c0       	rjmp	.+18     	; 0x7a0 <DIO_GetPinValue+0x64>
		case PORT_D:PinState=GET_BIT(PIND,PinNumber);
 78e:	80 b3       	in	r24, 0x10	; 16
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	02 c0       	rjmp	.+4      	; 0x798 <DIO_GetPinValue+0x5c>
 794:	95 95       	asr	r25
 796:	87 95       	ror	r24
 798:	6a 95       	dec	r22
 79a:	e2 f7       	brpl	.-8      	; 0x794 <DIO_GetPinValue+0x58>
 79c:	98 2f       	mov	r25, r24
 79e:	91 70       	andi	r25, 0x01	; 1
		break;
	}
	return PinState;	
}
 7a0:	89 2f       	mov	r24, r25
 7a2:	08 95       	ret

000007a4 <UART_init>:
#include "UART_Interface.h"
#include "TIMER_Private.h"

// UART Initialization
void UART_init(u16 baud) {
	u16 ubrr = F_CPU / 16 / baud - 1;
 7a4:	9c 01       	movw	r18, r24
 7a6:	40 e0       	ldi	r20, 0x00	; 0
 7a8:	50 e0       	ldi	r21, 0x00	; 0
 7aa:	60 e2       	ldi	r22, 0x20	; 32
 7ac:	71 ea       	ldi	r23, 0xA1	; 161
 7ae:	87 e0       	ldi	r24, 0x07	; 7
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	0e 94 26 04 	call	0x84c	; 0x84c <__udivmodsi4>
 7b6:	21 50       	subi	r18, 0x01	; 1
 7b8:	31 09       	sbc	r19, r1
	UBRRH = (u8)(ubrr >> 8);
 7ba:	30 bd       	out	0x20, r19	; 32
	UBRRL = (u8)ubrr;
 7bc:	29 b9       	out	0x09, r18	; 9
	// Enable receiver and transmitter
	UCSRB = (1 << UCSRB_RXEN) | (1 << UCSRB_TXEN);
 7be:	88 e1       	ldi	r24, 0x18	; 24
 7c0:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << UCSRC_URSEL) | (1 << UCSRC_UCSZ1) | (1 << UCSRC_UCSZ0);  // Set frame format: 8 data bits, 1 stop bit
 7c2:	86 e8       	ldi	r24, 0x86	; 134
 7c4:	80 bd       	out	0x20, r24	; 32
 7c6:	08 95       	ret

000007c8 <UART_sendString>:
}

// Send String via UART
void UART_sendString(const u8* data) {
 7c8:	fc 01       	movw	r30, r24
	while (*data) {
 7ca:	04 c0       	rjmp	.+8      	; 0x7d4 <UART_sendString+0xc>
		while (!(UCSRA & (1 << UCSRA_UDRE)));  // Wait until buffer is empty
 7cc:	5d 9b       	sbis	0x0b, 5	; 11
 7ce:	fe cf       	rjmp	.-4      	; 0x7cc <UART_sendString+0x4>
			// Put data into buffer, sends the data
		UDR_InputOutput = *data++;
 7d0:	31 96       	adiw	r30, 0x01	; 1
 7d2:	8c b9       	out	0x0c, r24	; 12
	UCSRC = (1 << UCSRC_URSEL) | (1 << UCSRC_UCSZ1) | (1 << UCSRC_UCSZ0);  // Set frame format: 8 data bits, 1 stop bit
}

// Send String via UART
void UART_sendString(const u8* data) {
	while (*data) {
 7d4:	80 81       	ld	r24, Z
 7d6:	81 11       	cpse	r24, r1
 7d8:	f9 cf       	rjmp	.-14     	; 0x7cc <UART_sendString+0x4>
		while (!(UCSRA & (1 << UCSRA_UDRE)));  // Wait until buffer is empty
			// Put data into buffer, sends the data
		UDR_InputOutput = *data++;
	}
}
 7da:	08 95       	ret

000007dc <ShowingTheValue>:

// Show OCR values and movement direction
void ShowingTheValue(u8 movement) {
 7dc:	0f 93       	push	r16
 7de:	1f 93       	push	r17
 7e0:	cf 93       	push	r28
 7e2:	df 93       	push	r29
 7e4:	cd b7       	in	r28, 0x3d	; 61
 7e6:	de b7       	in	r29, 0x3e	; 62
 7e8:	ec 97       	sbiw	r28, 0x3c	; 60
 7ea:	0f b6       	in	r0, 0x3f	; 63
 7ec:	f8 94       	cli
 7ee:	de bf       	out	0x3e, r29	; 62
 7f0:	0f be       	out	0x3f, r0	; 63
 7f2:	cd bf       	out	0x3d, r28	; 61
	u8 buffer[60];
	sprintf(buffer, "[%c] OCR1A: %u , OCR1B: %u \n\n", movement, OCR1A, OCR1B);
 7f4:	49 b5       	in	r20, 0x29	; 41
 7f6:	5a b5       	in	r21, 0x2a	; 42
 7f8:	2b b5       	in	r18, 0x2b	; 43
 7fa:	3c b5       	in	r19, 0x2c	; 44
 7fc:	5f 93       	push	r21
 7fe:	4f 93       	push	r20
 800:	3f 93       	push	r19
 802:	2f 93       	push	r18
 804:	1f 92       	push	r1
 806:	8f 93       	push	r24
 808:	8b e9       	ldi	r24, 0x9B	; 155
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	9f 93       	push	r25
 80e:	8f 93       	push	r24
 810:	8e 01       	movw	r16, r28
 812:	0f 5f       	subi	r16, 0xFF	; 255
 814:	1f 4f       	sbci	r17, 0xFF	; 255
 816:	1f 93       	push	r17
 818:	0f 93       	push	r16
 81a:	0e 94 48 04 	call	0x890	; 0x890 <sprintf>
	UART_sendString(buffer);
 81e:	c8 01       	movw	r24, r16
 820:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <UART_sendString>
}
 824:	0f b6       	in	r0, 0x3f	; 63
 826:	f8 94       	cli
 828:	de bf       	out	0x3e, r29	; 62
 82a:	0f be       	out	0x3f, r0	; 63
 82c:	cd bf       	out	0x3d, r28	; 61
 82e:	ec 96       	adiw	r28, 0x3c	; 60
 830:	0f b6       	in	r0, 0x3f	; 63
 832:	f8 94       	cli
 834:	de bf       	out	0x3e, r29	; 62
 836:	0f be       	out	0x3f, r0	; 63
 838:	cd bf       	out	0x3d, r28	; 61
 83a:	df 91       	pop	r29
 83c:	cf 91       	pop	r28
 83e:	1f 91       	pop	r17
 840:	0f 91       	pop	r16
 842:	08 95       	ret

00000844 <UART_Receive>:
u8 UART_Receive(void) {
	// Wait for data to be received
	while (!(UCSRA & (1 << UCSRA_RXC)));
 844:	5f 9b       	sbis	0x0b, 7	; 11
 846:	fe cf       	rjmp	.-4      	; 0x844 <UART_Receive>
	// Get and return received data from buffer
	return (UDR_InputOutput);
 848:	8c b1       	in	r24, 0x0c	; 12
 84a:	08 95       	ret

0000084c <__udivmodsi4>:
 84c:	a1 e2       	ldi	r26, 0x21	; 33
 84e:	1a 2e       	mov	r1, r26
 850:	aa 1b       	sub	r26, r26
 852:	bb 1b       	sub	r27, r27
 854:	fd 01       	movw	r30, r26
 856:	0d c0       	rjmp	.+26     	; 0x872 <__udivmodsi4_ep>

00000858 <__udivmodsi4_loop>:
 858:	aa 1f       	adc	r26, r26
 85a:	bb 1f       	adc	r27, r27
 85c:	ee 1f       	adc	r30, r30
 85e:	ff 1f       	adc	r31, r31
 860:	a2 17       	cp	r26, r18
 862:	b3 07       	cpc	r27, r19
 864:	e4 07       	cpc	r30, r20
 866:	f5 07       	cpc	r31, r21
 868:	20 f0       	brcs	.+8      	; 0x872 <__udivmodsi4_ep>
 86a:	a2 1b       	sub	r26, r18
 86c:	b3 0b       	sbc	r27, r19
 86e:	e4 0b       	sbc	r30, r20
 870:	f5 0b       	sbc	r31, r21

00000872 <__udivmodsi4_ep>:
 872:	66 1f       	adc	r22, r22
 874:	77 1f       	adc	r23, r23
 876:	88 1f       	adc	r24, r24
 878:	99 1f       	adc	r25, r25
 87a:	1a 94       	dec	r1
 87c:	69 f7       	brne	.-38     	; 0x858 <__udivmodsi4_loop>
 87e:	60 95       	com	r22
 880:	70 95       	com	r23
 882:	80 95       	com	r24
 884:	90 95       	com	r25
 886:	9b 01       	movw	r18, r22
 888:	ac 01       	movw	r20, r24
 88a:	bd 01       	movw	r22, r26
 88c:	cf 01       	movw	r24, r30
 88e:	08 95       	ret

00000890 <sprintf>:
 890:	ae e0       	ldi	r26, 0x0E	; 14
 892:	b0 e0       	ldi	r27, 0x00	; 0
 894:	ee e4       	ldi	r30, 0x4E	; 78
 896:	f4 e0       	ldi	r31, 0x04	; 4
 898:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__prologue_saves__+0x1c>
 89c:	0d 89       	ldd	r16, Y+21	; 0x15
 89e:	1e 89       	ldd	r17, Y+22	; 0x16
 8a0:	86 e0       	ldi	r24, 0x06	; 6
 8a2:	8c 83       	std	Y+4, r24	; 0x04
 8a4:	1a 83       	std	Y+2, r17	; 0x02
 8a6:	09 83       	std	Y+1, r16	; 0x01
 8a8:	8f ef       	ldi	r24, 0xFF	; 255
 8aa:	9f e7       	ldi	r25, 0x7F	; 127
 8ac:	9e 83       	std	Y+6, r25	; 0x06
 8ae:	8d 83       	std	Y+5, r24	; 0x05
 8b0:	ae 01       	movw	r20, r28
 8b2:	47 5e       	subi	r20, 0xE7	; 231
 8b4:	5f 4f       	sbci	r21, 0xFF	; 255
 8b6:	6f 89       	ldd	r22, Y+23	; 0x17
 8b8:	78 8d       	ldd	r23, Y+24	; 0x18
 8ba:	ce 01       	movw	r24, r28
 8bc:	01 96       	adiw	r24, 0x01	; 1
 8be:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <vfprintf>
 8c2:	ef 81       	ldd	r30, Y+7	; 0x07
 8c4:	f8 85       	ldd	r31, Y+8	; 0x08
 8c6:	e0 0f       	add	r30, r16
 8c8:	f1 1f       	adc	r31, r17
 8ca:	10 82       	st	Z, r1
 8cc:	2e 96       	adiw	r28, 0x0e	; 14
 8ce:	e4 e0       	ldi	r30, 0x04	; 4
 8d0:	0c 94 25 07 	jmp	0xe4a	; 0xe4a <__epilogue_restores__+0x1c>

000008d4 <vfprintf>:
 8d4:	ab e0       	ldi	r26, 0x0B	; 11
 8d6:	b0 e0       	ldi	r27, 0x00	; 0
 8d8:	e0 e7       	ldi	r30, 0x70	; 112
 8da:	f4 e0       	ldi	r31, 0x04	; 4
 8dc:	0c 94 fb 06 	jmp	0xdf6	; 0xdf6 <__prologue_saves__>
 8e0:	6c 01       	movw	r12, r24
 8e2:	7b 01       	movw	r14, r22
 8e4:	8a 01       	movw	r16, r20
 8e6:	fc 01       	movw	r30, r24
 8e8:	17 82       	std	Z+7, r1	; 0x07
 8ea:	16 82       	std	Z+6, r1	; 0x06
 8ec:	83 81       	ldd	r24, Z+3	; 0x03
 8ee:	81 ff       	sbrs	r24, 1
 8f0:	cc c1       	rjmp	.+920    	; 0xc8a <vfprintf+0x3b6>
 8f2:	ce 01       	movw	r24, r28
 8f4:	01 96       	adiw	r24, 0x01	; 1
 8f6:	3c 01       	movw	r6, r24
 8f8:	f6 01       	movw	r30, r12
 8fa:	93 81       	ldd	r25, Z+3	; 0x03
 8fc:	f7 01       	movw	r30, r14
 8fe:	93 fd       	sbrc	r25, 3
 900:	85 91       	lpm	r24, Z+
 902:	93 ff       	sbrs	r25, 3
 904:	81 91       	ld	r24, Z+
 906:	7f 01       	movw	r14, r30
 908:	88 23       	and	r24, r24
 90a:	09 f4       	brne	.+2      	; 0x90e <vfprintf+0x3a>
 90c:	ba c1       	rjmp	.+884    	; 0xc82 <vfprintf+0x3ae>
 90e:	85 32       	cpi	r24, 0x25	; 37
 910:	39 f4       	brne	.+14     	; 0x920 <vfprintf+0x4c>
 912:	93 fd       	sbrc	r25, 3
 914:	85 91       	lpm	r24, Z+
 916:	93 ff       	sbrs	r25, 3
 918:	81 91       	ld	r24, Z+
 91a:	7f 01       	movw	r14, r30
 91c:	85 32       	cpi	r24, 0x25	; 37
 91e:	29 f4       	brne	.+10     	; 0x92a <vfprintf+0x56>
 920:	b6 01       	movw	r22, r12
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	0e 94 61 06 	call	0xcc2	; 0xcc2 <fputc>
 928:	e7 cf       	rjmp	.-50     	; 0x8f8 <vfprintf+0x24>
 92a:	91 2c       	mov	r9, r1
 92c:	21 2c       	mov	r2, r1
 92e:	31 2c       	mov	r3, r1
 930:	ff e1       	ldi	r31, 0x1F	; 31
 932:	f3 15       	cp	r31, r3
 934:	d8 f0       	brcs	.+54     	; 0x96c <vfprintf+0x98>
 936:	8b 32       	cpi	r24, 0x2B	; 43
 938:	79 f0       	breq	.+30     	; 0x958 <vfprintf+0x84>
 93a:	38 f4       	brcc	.+14     	; 0x94a <vfprintf+0x76>
 93c:	80 32       	cpi	r24, 0x20	; 32
 93e:	79 f0       	breq	.+30     	; 0x95e <vfprintf+0x8a>
 940:	83 32       	cpi	r24, 0x23	; 35
 942:	a1 f4       	brne	.+40     	; 0x96c <vfprintf+0x98>
 944:	23 2d       	mov	r18, r3
 946:	20 61       	ori	r18, 0x10	; 16
 948:	1d c0       	rjmp	.+58     	; 0x984 <vfprintf+0xb0>
 94a:	8d 32       	cpi	r24, 0x2D	; 45
 94c:	61 f0       	breq	.+24     	; 0x966 <vfprintf+0x92>
 94e:	80 33       	cpi	r24, 0x30	; 48
 950:	69 f4       	brne	.+26     	; 0x96c <vfprintf+0x98>
 952:	23 2d       	mov	r18, r3
 954:	21 60       	ori	r18, 0x01	; 1
 956:	16 c0       	rjmp	.+44     	; 0x984 <vfprintf+0xb0>
 958:	83 2d       	mov	r24, r3
 95a:	82 60       	ori	r24, 0x02	; 2
 95c:	38 2e       	mov	r3, r24
 95e:	e3 2d       	mov	r30, r3
 960:	e4 60       	ori	r30, 0x04	; 4
 962:	3e 2e       	mov	r3, r30
 964:	2a c0       	rjmp	.+84     	; 0x9ba <vfprintf+0xe6>
 966:	f3 2d       	mov	r31, r3
 968:	f8 60       	ori	r31, 0x08	; 8
 96a:	1d c0       	rjmp	.+58     	; 0x9a6 <vfprintf+0xd2>
 96c:	37 fc       	sbrc	r3, 7
 96e:	2d c0       	rjmp	.+90     	; 0x9ca <vfprintf+0xf6>
 970:	20 ed       	ldi	r18, 0xD0	; 208
 972:	28 0f       	add	r18, r24
 974:	2a 30       	cpi	r18, 0x0A	; 10
 976:	40 f0       	brcs	.+16     	; 0x988 <vfprintf+0xb4>
 978:	8e 32       	cpi	r24, 0x2E	; 46
 97a:	b9 f4       	brne	.+46     	; 0x9aa <vfprintf+0xd6>
 97c:	36 fc       	sbrc	r3, 6
 97e:	81 c1       	rjmp	.+770    	; 0xc82 <vfprintf+0x3ae>
 980:	23 2d       	mov	r18, r3
 982:	20 64       	ori	r18, 0x40	; 64
 984:	32 2e       	mov	r3, r18
 986:	19 c0       	rjmp	.+50     	; 0x9ba <vfprintf+0xe6>
 988:	36 fe       	sbrs	r3, 6
 98a:	06 c0       	rjmp	.+12     	; 0x998 <vfprintf+0xc4>
 98c:	8a e0       	ldi	r24, 0x0A	; 10
 98e:	98 9e       	mul	r9, r24
 990:	20 0d       	add	r18, r0
 992:	11 24       	eor	r1, r1
 994:	92 2e       	mov	r9, r18
 996:	11 c0       	rjmp	.+34     	; 0x9ba <vfprintf+0xe6>
 998:	ea e0       	ldi	r30, 0x0A	; 10
 99a:	2e 9e       	mul	r2, r30
 99c:	20 0d       	add	r18, r0
 99e:	11 24       	eor	r1, r1
 9a0:	22 2e       	mov	r2, r18
 9a2:	f3 2d       	mov	r31, r3
 9a4:	f0 62       	ori	r31, 0x20	; 32
 9a6:	3f 2e       	mov	r3, r31
 9a8:	08 c0       	rjmp	.+16     	; 0x9ba <vfprintf+0xe6>
 9aa:	8c 36       	cpi	r24, 0x6C	; 108
 9ac:	21 f4       	brne	.+8      	; 0x9b6 <vfprintf+0xe2>
 9ae:	83 2d       	mov	r24, r3
 9b0:	80 68       	ori	r24, 0x80	; 128
 9b2:	38 2e       	mov	r3, r24
 9b4:	02 c0       	rjmp	.+4      	; 0x9ba <vfprintf+0xe6>
 9b6:	88 36       	cpi	r24, 0x68	; 104
 9b8:	41 f4       	brne	.+16     	; 0x9ca <vfprintf+0xf6>
 9ba:	f7 01       	movw	r30, r14
 9bc:	93 fd       	sbrc	r25, 3
 9be:	85 91       	lpm	r24, Z+
 9c0:	93 ff       	sbrs	r25, 3
 9c2:	81 91       	ld	r24, Z+
 9c4:	7f 01       	movw	r14, r30
 9c6:	81 11       	cpse	r24, r1
 9c8:	b3 cf       	rjmp	.-154    	; 0x930 <vfprintf+0x5c>
 9ca:	98 2f       	mov	r25, r24
 9cc:	9f 7d       	andi	r25, 0xDF	; 223
 9ce:	95 54       	subi	r25, 0x45	; 69
 9d0:	93 30       	cpi	r25, 0x03	; 3
 9d2:	28 f4       	brcc	.+10     	; 0x9de <vfprintf+0x10a>
 9d4:	0c 5f       	subi	r16, 0xFC	; 252
 9d6:	1f 4f       	sbci	r17, 0xFF	; 255
 9d8:	9f e3       	ldi	r25, 0x3F	; 63
 9da:	99 83       	std	Y+1, r25	; 0x01
 9dc:	0d c0       	rjmp	.+26     	; 0x9f8 <vfprintf+0x124>
 9de:	83 36       	cpi	r24, 0x63	; 99
 9e0:	31 f0       	breq	.+12     	; 0x9ee <vfprintf+0x11a>
 9e2:	83 37       	cpi	r24, 0x73	; 115
 9e4:	71 f0       	breq	.+28     	; 0xa02 <vfprintf+0x12e>
 9e6:	83 35       	cpi	r24, 0x53	; 83
 9e8:	09 f0       	breq	.+2      	; 0x9ec <vfprintf+0x118>
 9ea:	59 c0       	rjmp	.+178    	; 0xa9e <vfprintf+0x1ca>
 9ec:	21 c0       	rjmp	.+66     	; 0xa30 <vfprintf+0x15c>
 9ee:	f8 01       	movw	r30, r16
 9f0:	80 81       	ld	r24, Z
 9f2:	89 83       	std	Y+1, r24	; 0x01
 9f4:	0e 5f       	subi	r16, 0xFE	; 254
 9f6:	1f 4f       	sbci	r17, 0xFF	; 255
 9f8:	88 24       	eor	r8, r8
 9fa:	83 94       	inc	r8
 9fc:	91 2c       	mov	r9, r1
 9fe:	53 01       	movw	r10, r6
 a00:	13 c0       	rjmp	.+38     	; 0xa28 <vfprintf+0x154>
 a02:	28 01       	movw	r4, r16
 a04:	f2 e0       	ldi	r31, 0x02	; 2
 a06:	4f 0e       	add	r4, r31
 a08:	51 1c       	adc	r5, r1
 a0a:	f8 01       	movw	r30, r16
 a0c:	a0 80       	ld	r10, Z
 a0e:	b1 80       	ldd	r11, Z+1	; 0x01
 a10:	36 fe       	sbrs	r3, 6
 a12:	03 c0       	rjmp	.+6      	; 0xa1a <vfprintf+0x146>
 a14:	69 2d       	mov	r22, r9
 a16:	70 e0       	ldi	r23, 0x00	; 0
 a18:	02 c0       	rjmp	.+4      	; 0xa1e <vfprintf+0x14a>
 a1a:	6f ef       	ldi	r22, 0xFF	; 255
 a1c:	7f ef       	ldi	r23, 0xFF	; 255
 a1e:	c5 01       	movw	r24, r10
 a20:	0e 94 56 06 	call	0xcac	; 0xcac <strnlen>
 a24:	4c 01       	movw	r8, r24
 a26:	82 01       	movw	r16, r4
 a28:	f3 2d       	mov	r31, r3
 a2a:	ff 77       	andi	r31, 0x7F	; 127
 a2c:	3f 2e       	mov	r3, r31
 a2e:	16 c0       	rjmp	.+44     	; 0xa5c <vfprintf+0x188>
 a30:	28 01       	movw	r4, r16
 a32:	22 e0       	ldi	r18, 0x02	; 2
 a34:	42 0e       	add	r4, r18
 a36:	51 1c       	adc	r5, r1
 a38:	f8 01       	movw	r30, r16
 a3a:	a0 80       	ld	r10, Z
 a3c:	b1 80       	ldd	r11, Z+1	; 0x01
 a3e:	36 fe       	sbrs	r3, 6
 a40:	03 c0       	rjmp	.+6      	; 0xa48 <vfprintf+0x174>
 a42:	69 2d       	mov	r22, r9
 a44:	70 e0       	ldi	r23, 0x00	; 0
 a46:	02 c0       	rjmp	.+4      	; 0xa4c <vfprintf+0x178>
 a48:	6f ef       	ldi	r22, 0xFF	; 255
 a4a:	7f ef       	ldi	r23, 0xFF	; 255
 a4c:	c5 01       	movw	r24, r10
 a4e:	0e 94 4b 06 	call	0xc96	; 0xc96 <strnlen_P>
 a52:	4c 01       	movw	r8, r24
 a54:	f3 2d       	mov	r31, r3
 a56:	f0 68       	ori	r31, 0x80	; 128
 a58:	3f 2e       	mov	r3, r31
 a5a:	82 01       	movw	r16, r4
 a5c:	33 fc       	sbrc	r3, 3
 a5e:	1b c0       	rjmp	.+54     	; 0xa96 <vfprintf+0x1c2>
 a60:	82 2d       	mov	r24, r2
 a62:	90 e0       	ldi	r25, 0x00	; 0
 a64:	88 16       	cp	r8, r24
 a66:	99 06       	cpc	r9, r25
 a68:	b0 f4       	brcc	.+44     	; 0xa96 <vfprintf+0x1c2>
 a6a:	b6 01       	movw	r22, r12
 a6c:	80 e2       	ldi	r24, 0x20	; 32
 a6e:	90 e0       	ldi	r25, 0x00	; 0
 a70:	0e 94 61 06 	call	0xcc2	; 0xcc2 <fputc>
 a74:	2a 94       	dec	r2
 a76:	f4 cf       	rjmp	.-24     	; 0xa60 <vfprintf+0x18c>
 a78:	f5 01       	movw	r30, r10
 a7a:	37 fc       	sbrc	r3, 7
 a7c:	85 91       	lpm	r24, Z+
 a7e:	37 fe       	sbrs	r3, 7
 a80:	81 91       	ld	r24, Z+
 a82:	5f 01       	movw	r10, r30
 a84:	b6 01       	movw	r22, r12
 a86:	90 e0       	ldi	r25, 0x00	; 0
 a88:	0e 94 61 06 	call	0xcc2	; 0xcc2 <fputc>
 a8c:	21 10       	cpse	r2, r1
 a8e:	2a 94       	dec	r2
 a90:	21 e0       	ldi	r18, 0x01	; 1
 a92:	82 1a       	sub	r8, r18
 a94:	91 08       	sbc	r9, r1
 a96:	81 14       	cp	r8, r1
 a98:	91 04       	cpc	r9, r1
 a9a:	71 f7       	brne	.-36     	; 0xa78 <vfprintf+0x1a4>
 a9c:	e8 c0       	rjmp	.+464    	; 0xc6e <vfprintf+0x39a>
 a9e:	84 36       	cpi	r24, 0x64	; 100
 aa0:	11 f0       	breq	.+4      	; 0xaa6 <vfprintf+0x1d2>
 aa2:	89 36       	cpi	r24, 0x69	; 105
 aa4:	41 f5       	brne	.+80     	; 0xaf6 <vfprintf+0x222>
 aa6:	f8 01       	movw	r30, r16
 aa8:	37 fe       	sbrs	r3, 7
 aaa:	07 c0       	rjmp	.+14     	; 0xaba <vfprintf+0x1e6>
 aac:	60 81       	ld	r22, Z
 aae:	71 81       	ldd	r23, Z+1	; 0x01
 ab0:	82 81       	ldd	r24, Z+2	; 0x02
 ab2:	93 81       	ldd	r25, Z+3	; 0x03
 ab4:	0c 5f       	subi	r16, 0xFC	; 252
 ab6:	1f 4f       	sbci	r17, 0xFF	; 255
 ab8:	08 c0       	rjmp	.+16     	; 0xaca <vfprintf+0x1f6>
 aba:	60 81       	ld	r22, Z
 abc:	71 81       	ldd	r23, Z+1	; 0x01
 abe:	07 2e       	mov	r0, r23
 ac0:	00 0c       	add	r0, r0
 ac2:	88 0b       	sbc	r24, r24
 ac4:	99 0b       	sbc	r25, r25
 ac6:	0e 5f       	subi	r16, 0xFE	; 254
 ac8:	1f 4f       	sbci	r17, 0xFF	; 255
 aca:	f3 2d       	mov	r31, r3
 acc:	ff 76       	andi	r31, 0x6F	; 111
 ace:	3f 2e       	mov	r3, r31
 ad0:	97 ff       	sbrs	r25, 7
 ad2:	09 c0       	rjmp	.+18     	; 0xae6 <vfprintf+0x212>
 ad4:	90 95       	com	r25
 ad6:	80 95       	com	r24
 ad8:	70 95       	com	r23
 ada:	61 95       	neg	r22
 adc:	7f 4f       	sbci	r23, 0xFF	; 255
 ade:	8f 4f       	sbci	r24, 0xFF	; 255
 ae0:	9f 4f       	sbci	r25, 0xFF	; 255
 ae2:	f0 68       	ori	r31, 0x80	; 128
 ae4:	3f 2e       	mov	r3, r31
 ae6:	2a e0       	ldi	r18, 0x0A	; 10
 ae8:	30 e0       	ldi	r19, 0x00	; 0
 aea:	a3 01       	movw	r20, r6
 aec:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__ultoa_invert>
 af0:	88 2e       	mov	r8, r24
 af2:	86 18       	sub	r8, r6
 af4:	45 c0       	rjmp	.+138    	; 0xb80 <vfprintf+0x2ac>
 af6:	85 37       	cpi	r24, 0x75	; 117
 af8:	31 f4       	brne	.+12     	; 0xb06 <vfprintf+0x232>
 afa:	23 2d       	mov	r18, r3
 afc:	2f 7e       	andi	r18, 0xEF	; 239
 afe:	b2 2e       	mov	r11, r18
 b00:	2a e0       	ldi	r18, 0x0A	; 10
 b02:	30 e0       	ldi	r19, 0x00	; 0
 b04:	25 c0       	rjmp	.+74     	; 0xb50 <vfprintf+0x27c>
 b06:	93 2d       	mov	r25, r3
 b08:	99 7f       	andi	r25, 0xF9	; 249
 b0a:	b9 2e       	mov	r11, r25
 b0c:	8f 36       	cpi	r24, 0x6F	; 111
 b0e:	c1 f0       	breq	.+48     	; 0xb40 <vfprintf+0x26c>
 b10:	18 f4       	brcc	.+6      	; 0xb18 <vfprintf+0x244>
 b12:	88 35       	cpi	r24, 0x58	; 88
 b14:	79 f0       	breq	.+30     	; 0xb34 <vfprintf+0x260>
 b16:	b5 c0       	rjmp	.+362    	; 0xc82 <vfprintf+0x3ae>
 b18:	80 37       	cpi	r24, 0x70	; 112
 b1a:	19 f0       	breq	.+6      	; 0xb22 <vfprintf+0x24e>
 b1c:	88 37       	cpi	r24, 0x78	; 120
 b1e:	21 f0       	breq	.+8      	; 0xb28 <vfprintf+0x254>
 b20:	b0 c0       	rjmp	.+352    	; 0xc82 <vfprintf+0x3ae>
 b22:	e9 2f       	mov	r30, r25
 b24:	e0 61       	ori	r30, 0x10	; 16
 b26:	be 2e       	mov	r11, r30
 b28:	b4 fe       	sbrs	r11, 4
 b2a:	0d c0       	rjmp	.+26     	; 0xb46 <vfprintf+0x272>
 b2c:	fb 2d       	mov	r31, r11
 b2e:	f4 60       	ori	r31, 0x04	; 4
 b30:	bf 2e       	mov	r11, r31
 b32:	09 c0       	rjmp	.+18     	; 0xb46 <vfprintf+0x272>
 b34:	34 fe       	sbrs	r3, 4
 b36:	0a c0       	rjmp	.+20     	; 0xb4c <vfprintf+0x278>
 b38:	29 2f       	mov	r18, r25
 b3a:	26 60       	ori	r18, 0x06	; 6
 b3c:	b2 2e       	mov	r11, r18
 b3e:	06 c0       	rjmp	.+12     	; 0xb4c <vfprintf+0x278>
 b40:	28 e0       	ldi	r18, 0x08	; 8
 b42:	30 e0       	ldi	r19, 0x00	; 0
 b44:	05 c0       	rjmp	.+10     	; 0xb50 <vfprintf+0x27c>
 b46:	20 e1       	ldi	r18, 0x10	; 16
 b48:	30 e0       	ldi	r19, 0x00	; 0
 b4a:	02 c0       	rjmp	.+4      	; 0xb50 <vfprintf+0x27c>
 b4c:	20 e1       	ldi	r18, 0x10	; 16
 b4e:	32 e0       	ldi	r19, 0x02	; 2
 b50:	f8 01       	movw	r30, r16
 b52:	b7 fe       	sbrs	r11, 7
 b54:	07 c0       	rjmp	.+14     	; 0xb64 <vfprintf+0x290>
 b56:	60 81       	ld	r22, Z
 b58:	71 81       	ldd	r23, Z+1	; 0x01
 b5a:	82 81       	ldd	r24, Z+2	; 0x02
 b5c:	93 81       	ldd	r25, Z+3	; 0x03
 b5e:	0c 5f       	subi	r16, 0xFC	; 252
 b60:	1f 4f       	sbci	r17, 0xFF	; 255
 b62:	06 c0       	rjmp	.+12     	; 0xb70 <vfprintf+0x29c>
 b64:	60 81       	ld	r22, Z
 b66:	71 81       	ldd	r23, Z+1	; 0x01
 b68:	80 e0       	ldi	r24, 0x00	; 0
 b6a:	90 e0       	ldi	r25, 0x00	; 0
 b6c:	0e 5f       	subi	r16, 0xFE	; 254
 b6e:	1f 4f       	sbci	r17, 0xFF	; 255
 b70:	a3 01       	movw	r20, r6
 b72:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__ultoa_invert>
 b76:	88 2e       	mov	r8, r24
 b78:	86 18       	sub	r8, r6
 b7a:	fb 2d       	mov	r31, r11
 b7c:	ff 77       	andi	r31, 0x7F	; 127
 b7e:	3f 2e       	mov	r3, r31
 b80:	36 fe       	sbrs	r3, 6
 b82:	0d c0       	rjmp	.+26     	; 0xb9e <vfprintf+0x2ca>
 b84:	23 2d       	mov	r18, r3
 b86:	2e 7f       	andi	r18, 0xFE	; 254
 b88:	a2 2e       	mov	r10, r18
 b8a:	89 14       	cp	r8, r9
 b8c:	58 f4       	brcc	.+22     	; 0xba4 <vfprintf+0x2d0>
 b8e:	34 fe       	sbrs	r3, 4
 b90:	0b c0       	rjmp	.+22     	; 0xba8 <vfprintf+0x2d4>
 b92:	32 fc       	sbrc	r3, 2
 b94:	09 c0       	rjmp	.+18     	; 0xba8 <vfprintf+0x2d4>
 b96:	83 2d       	mov	r24, r3
 b98:	8e 7e       	andi	r24, 0xEE	; 238
 b9a:	a8 2e       	mov	r10, r24
 b9c:	05 c0       	rjmp	.+10     	; 0xba8 <vfprintf+0x2d4>
 b9e:	b8 2c       	mov	r11, r8
 ba0:	a3 2c       	mov	r10, r3
 ba2:	03 c0       	rjmp	.+6      	; 0xbaa <vfprintf+0x2d6>
 ba4:	b8 2c       	mov	r11, r8
 ba6:	01 c0       	rjmp	.+2      	; 0xbaa <vfprintf+0x2d6>
 ba8:	b9 2c       	mov	r11, r9
 baa:	a4 fe       	sbrs	r10, 4
 bac:	0f c0       	rjmp	.+30     	; 0xbcc <vfprintf+0x2f8>
 bae:	fe 01       	movw	r30, r28
 bb0:	e8 0d       	add	r30, r8
 bb2:	f1 1d       	adc	r31, r1
 bb4:	80 81       	ld	r24, Z
 bb6:	80 33       	cpi	r24, 0x30	; 48
 bb8:	21 f4       	brne	.+8      	; 0xbc2 <vfprintf+0x2ee>
 bba:	9a 2d       	mov	r25, r10
 bbc:	99 7e       	andi	r25, 0xE9	; 233
 bbe:	a9 2e       	mov	r10, r25
 bc0:	09 c0       	rjmp	.+18     	; 0xbd4 <vfprintf+0x300>
 bc2:	a2 fe       	sbrs	r10, 2
 bc4:	06 c0       	rjmp	.+12     	; 0xbd2 <vfprintf+0x2fe>
 bc6:	b3 94       	inc	r11
 bc8:	b3 94       	inc	r11
 bca:	04 c0       	rjmp	.+8      	; 0xbd4 <vfprintf+0x300>
 bcc:	8a 2d       	mov	r24, r10
 bce:	86 78       	andi	r24, 0x86	; 134
 bd0:	09 f0       	breq	.+2      	; 0xbd4 <vfprintf+0x300>
 bd2:	b3 94       	inc	r11
 bd4:	a3 fc       	sbrc	r10, 3
 bd6:	11 c0       	rjmp	.+34     	; 0xbfa <vfprintf+0x326>
 bd8:	a0 fe       	sbrs	r10, 0
 bda:	06 c0       	rjmp	.+12     	; 0xbe8 <vfprintf+0x314>
 bdc:	b2 14       	cp	r11, r2
 bde:	88 f4       	brcc	.+34     	; 0xc02 <vfprintf+0x32e>
 be0:	28 0c       	add	r2, r8
 be2:	92 2c       	mov	r9, r2
 be4:	9b 18       	sub	r9, r11
 be6:	0e c0       	rjmp	.+28     	; 0xc04 <vfprintf+0x330>
 be8:	b2 14       	cp	r11, r2
 bea:	60 f4       	brcc	.+24     	; 0xc04 <vfprintf+0x330>
 bec:	b6 01       	movw	r22, r12
 bee:	80 e2       	ldi	r24, 0x20	; 32
 bf0:	90 e0       	ldi	r25, 0x00	; 0
 bf2:	0e 94 61 06 	call	0xcc2	; 0xcc2 <fputc>
 bf6:	b3 94       	inc	r11
 bf8:	f7 cf       	rjmp	.-18     	; 0xbe8 <vfprintf+0x314>
 bfa:	b2 14       	cp	r11, r2
 bfc:	18 f4       	brcc	.+6      	; 0xc04 <vfprintf+0x330>
 bfe:	2b 18       	sub	r2, r11
 c00:	02 c0       	rjmp	.+4      	; 0xc06 <vfprintf+0x332>
 c02:	98 2c       	mov	r9, r8
 c04:	21 2c       	mov	r2, r1
 c06:	a4 fe       	sbrs	r10, 4
 c08:	10 c0       	rjmp	.+32     	; 0xc2a <vfprintf+0x356>
 c0a:	b6 01       	movw	r22, r12
 c0c:	80 e3       	ldi	r24, 0x30	; 48
 c0e:	90 e0       	ldi	r25, 0x00	; 0
 c10:	0e 94 61 06 	call	0xcc2	; 0xcc2 <fputc>
 c14:	a2 fe       	sbrs	r10, 2
 c16:	17 c0       	rjmp	.+46     	; 0xc46 <vfprintf+0x372>
 c18:	a1 fc       	sbrc	r10, 1
 c1a:	03 c0       	rjmp	.+6      	; 0xc22 <vfprintf+0x34e>
 c1c:	88 e7       	ldi	r24, 0x78	; 120
 c1e:	90 e0       	ldi	r25, 0x00	; 0
 c20:	02 c0       	rjmp	.+4      	; 0xc26 <vfprintf+0x352>
 c22:	88 e5       	ldi	r24, 0x58	; 88
 c24:	90 e0       	ldi	r25, 0x00	; 0
 c26:	b6 01       	movw	r22, r12
 c28:	0c c0       	rjmp	.+24     	; 0xc42 <vfprintf+0x36e>
 c2a:	8a 2d       	mov	r24, r10
 c2c:	86 78       	andi	r24, 0x86	; 134
 c2e:	59 f0       	breq	.+22     	; 0xc46 <vfprintf+0x372>
 c30:	a1 fe       	sbrs	r10, 1
 c32:	02 c0       	rjmp	.+4      	; 0xc38 <vfprintf+0x364>
 c34:	8b e2       	ldi	r24, 0x2B	; 43
 c36:	01 c0       	rjmp	.+2      	; 0xc3a <vfprintf+0x366>
 c38:	80 e2       	ldi	r24, 0x20	; 32
 c3a:	a7 fc       	sbrc	r10, 7
 c3c:	8d e2       	ldi	r24, 0x2D	; 45
 c3e:	b6 01       	movw	r22, r12
 c40:	90 e0       	ldi	r25, 0x00	; 0
 c42:	0e 94 61 06 	call	0xcc2	; 0xcc2 <fputc>
 c46:	89 14       	cp	r8, r9
 c48:	38 f4       	brcc	.+14     	; 0xc58 <vfprintf+0x384>
 c4a:	b6 01       	movw	r22, r12
 c4c:	80 e3       	ldi	r24, 0x30	; 48
 c4e:	90 e0       	ldi	r25, 0x00	; 0
 c50:	0e 94 61 06 	call	0xcc2	; 0xcc2 <fputc>
 c54:	9a 94       	dec	r9
 c56:	f7 cf       	rjmp	.-18     	; 0xc46 <vfprintf+0x372>
 c58:	8a 94       	dec	r8
 c5a:	f3 01       	movw	r30, r6
 c5c:	e8 0d       	add	r30, r8
 c5e:	f1 1d       	adc	r31, r1
 c60:	80 81       	ld	r24, Z
 c62:	b6 01       	movw	r22, r12
 c64:	90 e0       	ldi	r25, 0x00	; 0
 c66:	0e 94 61 06 	call	0xcc2	; 0xcc2 <fputc>
 c6a:	81 10       	cpse	r8, r1
 c6c:	f5 cf       	rjmp	.-22     	; 0xc58 <vfprintf+0x384>
 c6e:	22 20       	and	r2, r2
 c70:	09 f4       	brne	.+2      	; 0xc74 <vfprintf+0x3a0>
 c72:	42 ce       	rjmp	.-892    	; 0x8f8 <vfprintf+0x24>
 c74:	b6 01       	movw	r22, r12
 c76:	80 e2       	ldi	r24, 0x20	; 32
 c78:	90 e0       	ldi	r25, 0x00	; 0
 c7a:	0e 94 61 06 	call	0xcc2	; 0xcc2 <fputc>
 c7e:	2a 94       	dec	r2
 c80:	f6 cf       	rjmp	.-20     	; 0xc6e <vfprintf+0x39a>
 c82:	f6 01       	movw	r30, r12
 c84:	86 81       	ldd	r24, Z+6	; 0x06
 c86:	97 81       	ldd	r25, Z+7	; 0x07
 c88:	02 c0       	rjmp	.+4      	; 0xc8e <vfprintf+0x3ba>
 c8a:	8f ef       	ldi	r24, 0xFF	; 255
 c8c:	9f ef       	ldi	r25, 0xFF	; 255
 c8e:	2b 96       	adiw	r28, 0x0b	; 11
 c90:	e2 e1       	ldi	r30, 0x12	; 18
 c92:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__epilogue_restores__>

00000c96 <strnlen_P>:
 c96:	fc 01       	movw	r30, r24
 c98:	05 90       	lpm	r0, Z+
 c9a:	61 50       	subi	r22, 0x01	; 1
 c9c:	70 40       	sbci	r23, 0x00	; 0
 c9e:	01 10       	cpse	r0, r1
 ca0:	d8 f7       	brcc	.-10     	; 0xc98 <strnlen_P+0x2>
 ca2:	80 95       	com	r24
 ca4:	90 95       	com	r25
 ca6:	8e 0f       	add	r24, r30
 ca8:	9f 1f       	adc	r25, r31
 caa:	08 95       	ret

00000cac <strnlen>:
 cac:	fc 01       	movw	r30, r24
 cae:	61 50       	subi	r22, 0x01	; 1
 cb0:	70 40       	sbci	r23, 0x00	; 0
 cb2:	01 90       	ld	r0, Z+
 cb4:	01 10       	cpse	r0, r1
 cb6:	d8 f7       	brcc	.-10     	; 0xcae <strnlen+0x2>
 cb8:	80 95       	com	r24
 cba:	90 95       	com	r25
 cbc:	8e 0f       	add	r24, r30
 cbe:	9f 1f       	adc	r25, r31
 cc0:	08 95       	ret

00000cc2 <fputc>:
 cc2:	0f 93       	push	r16
 cc4:	1f 93       	push	r17
 cc6:	cf 93       	push	r28
 cc8:	df 93       	push	r29
 cca:	fb 01       	movw	r30, r22
 ccc:	23 81       	ldd	r18, Z+3	; 0x03
 cce:	21 fd       	sbrc	r18, 1
 cd0:	03 c0       	rjmp	.+6      	; 0xcd8 <fputc+0x16>
 cd2:	8f ef       	ldi	r24, 0xFF	; 255
 cd4:	9f ef       	ldi	r25, 0xFF	; 255
 cd6:	2c c0       	rjmp	.+88     	; 0xd30 <fputc+0x6e>
 cd8:	22 ff       	sbrs	r18, 2
 cda:	16 c0       	rjmp	.+44     	; 0xd08 <fputc+0x46>
 cdc:	46 81       	ldd	r20, Z+6	; 0x06
 cde:	57 81       	ldd	r21, Z+7	; 0x07
 ce0:	24 81       	ldd	r18, Z+4	; 0x04
 ce2:	35 81       	ldd	r19, Z+5	; 0x05
 ce4:	42 17       	cp	r20, r18
 ce6:	53 07       	cpc	r21, r19
 ce8:	44 f4       	brge	.+16     	; 0xcfa <fputc+0x38>
 cea:	a0 81       	ld	r26, Z
 cec:	b1 81       	ldd	r27, Z+1	; 0x01
 cee:	9d 01       	movw	r18, r26
 cf0:	2f 5f       	subi	r18, 0xFF	; 255
 cf2:	3f 4f       	sbci	r19, 0xFF	; 255
 cf4:	31 83       	std	Z+1, r19	; 0x01
 cf6:	20 83       	st	Z, r18
 cf8:	8c 93       	st	X, r24
 cfa:	26 81       	ldd	r18, Z+6	; 0x06
 cfc:	37 81       	ldd	r19, Z+7	; 0x07
 cfe:	2f 5f       	subi	r18, 0xFF	; 255
 d00:	3f 4f       	sbci	r19, 0xFF	; 255
 d02:	37 83       	std	Z+7, r19	; 0x07
 d04:	26 83       	std	Z+6, r18	; 0x06
 d06:	14 c0       	rjmp	.+40     	; 0xd30 <fputc+0x6e>
 d08:	8b 01       	movw	r16, r22
 d0a:	ec 01       	movw	r28, r24
 d0c:	fb 01       	movw	r30, r22
 d0e:	00 84       	ldd	r0, Z+8	; 0x08
 d10:	f1 85       	ldd	r31, Z+9	; 0x09
 d12:	e0 2d       	mov	r30, r0
 d14:	09 95       	icall
 d16:	89 2b       	or	r24, r25
 d18:	e1 f6       	brne	.-72     	; 0xcd2 <fputc+0x10>
 d1a:	d8 01       	movw	r26, r16
 d1c:	16 96       	adiw	r26, 0x06	; 6
 d1e:	8d 91       	ld	r24, X+
 d20:	9c 91       	ld	r25, X
 d22:	17 97       	sbiw	r26, 0x07	; 7
 d24:	01 96       	adiw	r24, 0x01	; 1
 d26:	17 96       	adiw	r26, 0x07	; 7
 d28:	9c 93       	st	X, r25
 d2a:	8e 93       	st	-X, r24
 d2c:	16 97       	sbiw	r26, 0x06	; 6
 d2e:	ce 01       	movw	r24, r28
 d30:	df 91       	pop	r29
 d32:	cf 91       	pop	r28
 d34:	1f 91       	pop	r17
 d36:	0f 91       	pop	r16
 d38:	08 95       	ret

00000d3a <__ultoa_invert>:
 d3a:	fa 01       	movw	r30, r20
 d3c:	aa 27       	eor	r26, r26
 d3e:	28 30       	cpi	r18, 0x08	; 8
 d40:	51 f1       	breq	.+84     	; 0xd96 <__ultoa_invert+0x5c>
 d42:	20 31       	cpi	r18, 0x10	; 16
 d44:	81 f1       	breq	.+96     	; 0xda6 <__ultoa_invert+0x6c>
 d46:	e8 94       	clt
 d48:	6f 93       	push	r22
 d4a:	6e 7f       	andi	r22, 0xFE	; 254
 d4c:	6e 5f       	subi	r22, 0xFE	; 254
 d4e:	7f 4f       	sbci	r23, 0xFF	; 255
 d50:	8f 4f       	sbci	r24, 0xFF	; 255
 d52:	9f 4f       	sbci	r25, 0xFF	; 255
 d54:	af 4f       	sbci	r26, 0xFF	; 255
 d56:	b1 e0       	ldi	r27, 0x01	; 1
 d58:	3e d0       	rcall	.+124    	; 0xdd6 <__ultoa_invert+0x9c>
 d5a:	b4 e0       	ldi	r27, 0x04	; 4
 d5c:	3c d0       	rcall	.+120    	; 0xdd6 <__ultoa_invert+0x9c>
 d5e:	67 0f       	add	r22, r23
 d60:	78 1f       	adc	r23, r24
 d62:	89 1f       	adc	r24, r25
 d64:	9a 1f       	adc	r25, r26
 d66:	a1 1d       	adc	r26, r1
 d68:	68 0f       	add	r22, r24
 d6a:	79 1f       	adc	r23, r25
 d6c:	8a 1f       	adc	r24, r26
 d6e:	91 1d       	adc	r25, r1
 d70:	a1 1d       	adc	r26, r1
 d72:	6a 0f       	add	r22, r26
 d74:	71 1d       	adc	r23, r1
 d76:	81 1d       	adc	r24, r1
 d78:	91 1d       	adc	r25, r1
 d7a:	a1 1d       	adc	r26, r1
 d7c:	20 d0       	rcall	.+64     	; 0xdbe <__ultoa_invert+0x84>
 d7e:	09 f4       	brne	.+2      	; 0xd82 <__ultoa_invert+0x48>
 d80:	68 94       	set
 d82:	3f 91       	pop	r19
 d84:	2a e0       	ldi	r18, 0x0A	; 10
 d86:	26 9f       	mul	r18, r22
 d88:	11 24       	eor	r1, r1
 d8a:	30 19       	sub	r19, r0
 d8c:	30 5d       	subi	r19, 0xD0	; 208
 d8e:	31 93       	st	Z+, r19
 d90:	de f6       	brtc	.-74     	; 0xd48 <__ultoa_invert+0xe>
 d92:	cf 01       	movw	r24, r30
 d94:	08 95       	ret
 d96:	46 2f       	mov	r20, r22
 d98:	47 70       	andi	r20, 0x07	; 7
 d9a:	40 5d       	subi	r20, 0xD0	; 208
 d9c:	41 93       	st	Z+, r20
 d9e:	b3 e0       	ldi	r27, 0x03	; 3
 da0:	0f d0       	rcall	.+30     	; 0xdc0 <__ultoa_invert+0x86>
 da2:	c9 f7       	brne	.-14     	; 0xd96 <__ultoa_invert+0x5c>
 da4:	f6 cf       	rjmp	.-20     	; 0xd92 <__ultoa_invert+0x58>
 da6:	46 2f       	mov	r20, r22
 da8:	4f 70       	andi	r20, 0x0F	; 15
 daa:	40 5d       	subi	r20, 0xD0	; 208
 dac:	4a 33       	cpi	r20, 0x3A	; 58
 dae:	18 f0       	brcs	.+6      	; 0xdb6 <__ultoa_invert+0x7c>
 db0:	49 5d       	subi	r20, 0xD9	; 217
 db2:	31 fd       	sbrc	r19, 1
 db4:	40 52       	subi	r20, 0x20	; 32
 db6:	41 93       	st	Z+, r20
 db8:	02 d0       	rcall	.+4      	; 0xdbe <__ultoa_invert+0x84>
 dba:	a9 f7       	brne	.-22     	; 0xda6 <__ultoa_invert+0x6c>
 dbc:	ea cf       	rjmp	.-44     	; 0xd92 <__ultoa_invert+0x58>
 dbe:	b4 e0       	ldi	r27, 0x04	; 4
 dc0:	a6 95       	lsr	r26
 dc2:	97 95       	ror	r25
 dc4:	87 95       	ror	r24
 dc6:	77 95       	ror	r23
 dc8:	67 95       	ror	r22
 dca:	ba 95       	dec	r27
 dcc:	c9 f7       	brne	.-14     	; 0xdc0 <__ultoa_invert+0x86>
 dce:	00 97       	sbiw	r24, 0x00	; 0
 dd0:	61 05       	cpc	r22, r1
 dd2:	71 05       	cpc	r23, r1
 dd4:	08 95       	ret
 dd6:	9b 01       	movw	r18, r22
 dd8:	ac 01       	movw	r20, r24
 dda:	0a 2e       	mov	r0, r26
 ddc:	06 94       	lsr	r0
 dde:	57 95       	ror	r21
 de0:	47 95       	ror	r20
 de2:	37 95       	ror	r19
 de4:	27 95       	ror	r18
 de6:	ba 95       	dec	r27
 de8:	c9 f7       	brne	.-14     	; 0xddc <__ultoa_invert+0xa2>
 dea:	62 0f       	add	r22, r18
 dec:	73 1f       	adc	r23, r19
 dee:	84 1f       	adc	r24, r20
 df0:	95 1f       	adc	r25, r21
 df2:	a0 1d       	adc	r26, r0
 df4:	08 95       	ret

00000df6 <__prologue_saves__>:
 df6:	2f 92       	push	r2
 df8:	3f 92       	push	r3
 dfa:	4f 92       	push	r4
 dfc:	5f 92       	push	r5
 dfe:	6f 92       	push	r6
 e00:	7f 92       	push	r7
 e02:	8f 92       	push	r8
 e04:	9f 92       	push	r9
 e06:	af 92       	push	r10
 e08:	bf 92       	push	r11
 e0a:	cf 92       	push	r12
 e0c:	df 92       	push	r13
 e0e:	ef 92       	push	r14
 e10:	ff 92       	push	r15
 e12:	0f 93       	push	r16
 e14:	1f 93       	push	r17
 e16:	cf 93       	push	r28
 e18:	df 93       	push	r29
 e1a:	cd b7       	in	r28, 0x3d	; 61
 e1c:	de b7       	in	r29, 0x3e	; 62
 e1e:	ca 1b       	sub	r28, r26
 e20:	db 0b       	sbc	r29, r27
 e22:	0f b6       	in	r0, 0x3f	; 63
 e24:	f8 94       	cli
 e26:	de bf       	out	0x3e, r29	; 62
 e28:	0f be       	out	0x3f, r0	; 63
 e2a:	cd bf       	out	0x3d, r28	; 61
 e2c:	09 94       	ijmp

00000e2e <__epilogue_restores__>:
 e2e:	2a 88       	ldd	r2, Y+18	; 0x12
 e30:	39 88       	ldd	r3, Y+17	; 0x11
 e32:	48 88       	ldd	r4, Y+16	; 0x10
 e34:	5f 84       	ldd	r5, Y+15	; 0x0f
 e36:	6e 84       	ldd	r6, Y+14	; 0x0e
 e38:	7d 84       	ldd	r7, Y+13	; 0x0d
 e3a:	8c 84       	ldd	r8, Y+12	; 0x0c
 e3c:	9b 84       	ldd	r9, Y+11	; 0x0b
 e3e:	aa 84       	ldd	r10, Y+10	; 0x0a
 e40:	b9 84       	ldd	r11, Y+9	; 0x09
 e42:	c8 84       	ldd	r12, Y+8	; 0x08
 e44:	df 80       	ldd	r13, Y+7	; 0x07
 e46:	ee 80       	ldd	r14, Y+6	; 0x06
 e48:	fd 80       	ldd	r15, Y+5	; 0x05
 e4a:	0c 81       	ldd	r16, Y+4	; 0x04
 e4c:	1b 81       	ldd	r17, Y+3	; 0x03
 e4e:	aa 81       	ldd	r26, Y+2	; 0x02
 e50:	b9 81       	ldd	r27, Y+1	; 0x01
 e52:	ce 0f       	add	r28, r30
 e54:	d1 1d       	adc	r29, r1
 e56:	0f b6       	in	r0, 0x3f	; 63
 e58:	f8 94       	cli
 e5a:	de bf       	out	0x3e, r29	; 62
 e5c:	0f be       	out	0x3f, r0	; 63
 e5e:	cd bf       	out	0x3d, r28	; 61
 e60:	ed 01       	movw	r28, r26
 e62:	08 95       	ret

00000e64 <_exit>:
 e64:	f8 94       	cli

00000e66 <__stop_program>:
 e66:	ff cf       	rjmp	.-2      	; 0xe66 <__stop_program>
