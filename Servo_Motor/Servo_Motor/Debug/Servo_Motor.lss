
Servo_Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000efc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000062  00800060  00000efc  00000f70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      0000005c  00000000  00000000  00000fd2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001030  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000168  00000000  00000000  0000106c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001b89  00000000  00000000  000011d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a89  00000000  00000000  00002d5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c97  00000000  00000000  000037e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000294  00000000  00000000  00004480  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005a5  00000000  00000000  00004714  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000773  00000000  00000000  00004cb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  0000542c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ef       	ldi	r30, 0xFC	; 252
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3c       	cpi	r26, 0xC2	; 194
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include "ADC_Interface.h"
#include "MainApp.h"


int main() {
	PWM_init();
  82:	0e 94 04 02 	call	0x408	; 0x408 <PWM_init>
	UART_init(9600);
  86:	80 e8       	ldi	r24, 0x80	; 128
  88:	95 e2       	ldi	r25, 0x25	; 37
  8a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <UART_init>
	Motor_init();
  8e:	0e 94 17 02 	call	0x42e	; 0x42e <Motor_init>
	ADC_Init();
  92:	0e 94 b1 02 	call	0x562	; 0x562 <ADC_Init>
	setup_modes_pins();
  96:	0e 94 89 00 	call	0x112	; 0x112 <setup_modes_pins>
	
	while (1) {
		u8 Chosen_Mode = get_mode();
  9a:	0e 94 bc 00 	call	0x178	; 0x178 <get_mode>
  9e:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	2f ef       	ldi	r18, 0xFF	; 255
  a2:	80 e7       	ldi	r24, 0x70	; 112
  a4:	92 e0       	ldi	r25, 0x02	; 2
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x24>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x2e>
  b0:	00 00       	nop
		_delay_ms(100);  
		UART_Flush();
  b2:	0e 94 62 04 	call	0x8c4	; 0x8c4 <UART_Flush>
		
		if (Chosen_Mode == MODE_VOICE || Chosen_Mode == MODE_EYE) {
  b6:	8e ef       	ldi	r24, 0xFE	; 254
  b8:	8c 0f       	add	r24, r28
  ba:	82 30       	cpi	r24, 0x02	; 2
  bc:	50 f4       	brcc	.+20     	; 0xd2 <main+0x50>
			DIO_SetPinValue(PORT_C, PIN4, PIN_LOW);  // Raspberry Pi -> 0
  be:	40 e0       	ldi	r20, 0x00	; 0
  c0:	64 e0       	ldi	r22, 0x04	; 4
  c2:	83 e0       	ldi	r24, 0x03	; 3
  c4:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_SetPinValue>
			sendValueToRasPI(Chosen_Mode);
  c8:	8c 2f       	mov	r24, r28
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 31 04 	call	0x862	; 0x862 <sendValueToRasPI>
  d0:	07 c0       	rjmp	.+14     	; 0xe0 <main+0x5e>
		}
		else if (Chosen_Mode == MODE_MOBILE) {
  d2:	c1 30       	cpi	r28, 0x01	; 1
  d4:	29 f4       	brne	.+10     	; 0xe0 <main+0x5e>
			DIO_SetPinValue(PORT_C, PIN4, PIN_HIGH); //  ESP -> 1
  d6:	41 e0       	ldi	r20, 0x01	; 1
  d8:	64 e0       	ldi	r22, 0x04	; 4
  da:	83 e0       	ldi	r24, 0x03	; 3
  dc:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_SetPinValue>
		}

		switch (Chosen_Mode) {
  e0:	c1 30       	cpi	r28, 0x01	; 1
  e2:	49 f0       	breq	.+18     	; 0xf6 <main+0x74>
  e4:	28 f0       	brcs	.+10     	; 0xf0 <main+0x6e>
  e6:	c2 30       	cpi	r28, 0x02	; 2
  e8:	49 f0       	breq	.+18     	; 0xfc <main+0x7a>
  ea:	c3 30       	cpi	r28, 0x03	; 3
  ec:	51 f0       	breq	.+20     	; 0x102 <main+0x80>
  ee:	0c c0       	rjmp	.+24     	; 0x108 <main+0x86>
			case 0:
			JoyStick_Mode();
  f0:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <JoyStick_Mode>
			break;
  f4:	d2 cf       	rjmp	.-92     	; 0x9a <main+0x18>

			case 1:
			MobileApp_Mode();
  f6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <MobileApp_Mode>
			break;
  fa:	cf cf       	rjmp	.-98     	; 0x9a <main+0x18>

			case 2:
			Voice_Mode();
  fc:	0e 94 94 01 	call	0x328	; 0x328 <Voice_Mode>
			break;
 100:	cc cf       	rjmp	.-104    	; 0x9a <main+0x18>

			case 3:
			EyeTracking_Mode();
 102:	0e 94 cc 01 	call	0x398	; 0x398 <EyeTracking_Mode>
			break;
 106:	c9 cf       	rjmp	.-110    	; 0x9a <main+0x18>

			default:
			UART_sendString("No Mode Selected!\n");
 108:	80 e6       	ldi	r24, 0x60	; 96
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <UART_sendString>
			break;
 110:	c4 cf       	rjmp	.-120    	; 0x9a <main+0x18>

00000112 <setup_modes_pins>:
#include "avr/delay.h"



void setup_modes_pins() {
	DIO_SetPinDirection(PORT_B, PIN0, PIN_INPUT);
 112:	40 e0       	ldi	r20, 0x00	; 0
 114:	60 e0       	ldi	r22, 0x00	; 0
 116:	82 e0       	ldi	r24, 0x02	; 2
 118:	0e 94 c1 02 	call	0x582	; 0x582 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORT_B, PIN1, PIN_INPUT);
 11c:	40 e0       	ldi	r20, 0x00	; 0
 11e:	61 e0       	ldi	r22, 0x01	; 1
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	0e 94 c1 02 	call	0x582	; 0x582 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORT_B, PIN2, PIN_INPUT);
 126:	40 e0       	ldi	r20, 0x00	; 0
 128:	62 e0       	ldi	r22, 0x02	; 2
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	0e 94 c1 02 	call	0x582	; 0x582 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORT_B, PIN3, PIN_INPUT);
 130:	40 e0       	ldi	r20, 0x00	; 0
 132:	63 e0       	ldi	r22, 0x03	; 3
 134:	82 e0       	ldi	r24, 0x02	; 2
 136:	0e 94 c1 02 	call	0x582	; 0x582 <DIO_SetPinDirection>
	
	DIO_SetPinDirection(PORT_C,PIN4,PIN_OUTPUT);  // for the Select pin in the Mux
 13a:	41 e0       	ldi	r20, 0x01	; 1
 13c:	64 e0       	ldi	r22, 0x04	; 4
 13e:	83 e0       	ldi	r24, 0x03	; 3
 140:	0e 94 c1 02 	call	0x582	; 0x582 <DIO_SetPinDirection>
	
	DIO_SetPinValue(PORT_B, PIN0, PIN_HIGH);
 144:	41 e0       	ldi	r20, 0x01	; 1
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B, PIN1, PIN_HIGH);
 14e:	41 e0       	ldi	r20, 0x01	; 1
 150:	61 e0       	ldi	r22, 0x01	; 1
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B, PIN2, PIN_HIGH);
 158:	41 e0       	ldi	r20, 0x01	; 1
 15a:	62 e0       	ldi	r22, 0x02	; 2
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B, PIN3, PIN_HIGH);
 162:	41 e0       	ldi	r20, 0x01	; 1
 164:	63 e0       	ldi	r22, 0x03	; 3
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_SetPinValue>
	
	DIO_SetPinValue(PORT_C, PIN4, PIN_LOW);  // default for Raspberry Pi
 16c:	40 e0       	ldi	r20, 0x00	; 0
 16e:	64 e0       	ldi	r22, 0x04	; 4
 170:	83 e0       	ldi	r24, 0x03	; 3
 172:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_SetPinValue>
 176:	08 95       	ret

00000178 <get_mode>:

}

u8 get_mode() {
	if (DIO_GetPinValue(PORT_B, PIN0) == PIN_LOW) return MODE_JOYSTICK; // Joystick
 178:	60 e0       	ldi	r22, 0x00	; 0
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_GetPinValue>
 180:	88 23       	and	r24, r24
 182:	c9 f0       	breq	.+50     	; 0x1b6 <get_mode+0x3e>
	if (DIO_GetPinValue(PORT_B, PIN1) == PIN_LOW) return MODE_MOBILE; // Mobile
 184:	61 e0       	ldi	r22, 0x01	; 1
 186:	82 e0       	ldi	r24, 0x02	; 2
 188:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_GetPinValue>
 18c:	88 23       	and	r24, r24
 18e:	71 f0       	breq	.+28     	; 0x1ac <get_mode+0x34>
	if (DIO_GetPinValue(PORT_B, PIN2) == PIN_LOW) return MODE_VOICE; // Voice
 190:	62 e0       	ldi	r22, 0x02	; 2
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_GetPinValue>
 198:	88 23       	and	r24, r24
 19a:	51 f0       	breq	.+20     	; 0x1b0 <get_mode+0x38>
	if (DIO_GetPinValue(PORT_B, PIN3) == PIN_LOW) return MODE_EYE; // Eye
 19c:	63 e0       	ldi	r22, 0x03	; 3
 19e:	82 e0       	ldi	r24, 0x02	; 2
 1a0:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_GetPinValue>
 1a4:	81 11       	cpse	r24, r1
 1a6:	06 c0       	rjmp	.+12     	; 0x1b4 <get_mode+0x3c>
 1a8:	83 e0       	ldi	r24, 0x03	; 3
 1aa:	08 95       	ret

}

u8 get_mode() {
	if (DIO_GetPinValue(PORT_B, PIN0) == PIN_LOW) return MODE_JOYSTICK; // Joystick
	if (DIO_GetPinValue(PORT_B, PIN1) == PIN_LOW) return MODE_MOBILE; // Mobile
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	08 95       	ret
	if (DIO_GetPinValue(PORT_B, PIN2) == PIN_LOW) return MODE_VOICE; // Voice
 1b0:	82 e0       	ldi	r24, 0x02	; 2
 1b2:	08 95       	ret
	if (DIO_GetPinValue(PORT_B, PIN3) == PIN_LOW) return MODE_EYE; // Eye
	return 255; // Undefined
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
}
 1b6:	08 95       	ret

000001b8 <JoyStick_Mode>:

void JoyStick_Mode() {
 1b8:	ef 92       	push	r14
 1ba:	ff 92       	push	r15
 1bc:	0f 93       	push	r16
 1be:	1f 93       	push	r17
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	cd b7       	in	r28, 0x3d	; 61
 1c6:	de b7       	in	r29, 0x3e	; 62
 1c8:	64 97       	sbiw	r28, 0x14	; 20
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	f8 94       	cli
 1ce:	de bf       	out	0x3e, r29	; 62
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	cd bf       	out	0x3d, r28	; 61
	
	u16 x = ADC_Read(0); // Read X-axis
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 b6 02 	call	0x56c	; 0x56c <ADC_Read>
 1dc:	7c 01       	movw	r14, r24
	u16 y = ADC_Read(1); // Read Y-axis
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 b6 02 	call	0x56c	; 0x56c <ADC_Read>
 1e6:	8c 01       	movw	r16, r24
	char buffer[20];
	sprintf(buffer, "--> X: %d and Y: %d \r\n", x, y);
 1e8:	1f 93       	push	r17
 1ea:	8f 93       	push	r24
 1ec:	ff 92       	push	r15
 1ee:	ef 92       	push	r14
 1f0:	83 e7       	ldi	r24, 0x73	; 115
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	9f 93       	push	r25
 1f6:	8f 93       	push	r24
 1f8:	ce 01       	movw	r24, r28
 1fa:	01 96       	adiw	r24, 0x01	; 1
 1fc:	9f 93       	push	r25
 1fe:	8f 93       	push	r24
 200:	0e 94 92 04 	call	0x924	; 0x924 <sprintf>
	
	if (y > 600) {
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	f8 94       	cli
 208:	de bf       	out	0x3e, r29	; 62
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	cd bf       	out	0x3d, r28	; 61
 20e:	09 35       	cpi	r16, 0x59	; 89
 210:	92 e0       	ldi	r25, 0x02	; 2
 212:	19 07       	cpc	r17, r25
 214:	50 f0       	brcs	.+20     	; 0x22a <JoyStick_Mode+0x72>
		MoveBackward();
 216:	0e 94 47 02 	call	0x48e	; 0x48e <MoveBackward>
		ShowingTheValue('B');
 21a:	82 e4       	ldi	r24, 0x42	; 66
 21c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <ShowingTheValue>
		UART_sendString(buffer);
 220:	ce 01       	movw	r24, r28
 222:	01 96       	adiw	r24, 0x01	; 1
 224:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <UART_sendString>
 228:	34 c0       	rjmp	.+104    	; 0x292 <JoyStick_Mode+0xda>
	}
	else if (y < 400) {
 22a:	00 39       	cpi	r16, 0x90	; 144
 22c:	11 40       	sbci	r17, 0x01	; 1
 22e:	50 f4       	brcc	.+20     	; 0x244 <JoyStick_Mode+0x8c>
		MoveForward();
 230:	0e 94 2c 02 	call	0x458	; 0x458 <MoveForward>
		ShowingTheValue('F');
 234:	86 e4       	ldi	r24, 0x46	; 70
 236:	0e 94 fd 03 	call	0x7fa	; 0x7fa <ShowingTheValue>
		UART_sendString(buffer);
 23a:	ce 01       	movw	r24, r28
 23c:	01 96       	adiw	r24, 0x01	; 1
 23e:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <UART_sendString>
 242:	27 c0       	rjmp	.+78     	; 0x292 <JoyStick_Mode+0xda>
	}
	else if (x < 400) {
 244:	90 e9       	ldi	r25, 0x90	; 144
 246:	e9 16       	cp	r14, r25
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	f9 06       	cpc	r15, r25
 24c:	50 f4       	brcc	.+20     	; 0x262 <JoyStick_Mode+0xaa>
		MoveLeft();
 24e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <MoveLeft>
		ShowingTheValue('L');
 252:	8c e4       	ldi	r24, 0x4C	; 76
 254:	0e 94 fd 03 	call	0x7fa	; 0x7fa <ShowingTheValue>
		UART_sendString(buffer);
 258:	ce 01       	movw	r24, r28
 25a:	01 96       	adiw	r24, 0x01	; 1
 25c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <UART_sendString>
 260:	18 c0       	rjmp	.+48     	; 0x292 <JoyStick_Mode+0xda>
	}
	else if (x > 600) {
 262:	89 e5       	ldi	r24, 0x59	; 89
 264:	e8 16       	cp	r14, r24
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	f8 06       	cpc	r15, r24
 26a:	50 f0       	brcs	.+20     	; 0x280 <JoyStick_Mode+0xc8>
		MoveRight();
 26c:	0e 94 62 02 	call	0x4c4	; 0x4c4 <MoveRight>
		ShowingTheValue('R');
 270:	82 e5       	ldi	r24, 0x52	; 82
 272:	0e 94 fd 03 	call	0x7fa	; 0x7fa <ShowingTheValue>
		UART_sendString(buffer);
 276:	ce 01       	movw	r24, r28
 278:	01 96       	adiw	r24, 0x01	; 1
 27a:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <UART_sendString>
 27e:	09 c0       	rjmp	.+18     	; 0x292 <JoyStick_Mode+0xda>
	}
	else {
		Stop();
 280:	0e 94 98 02 	call	0x530	; 0x530 <Stop>
		ShowingTheValue('S');
 284:	83 e5       	ldi	r24, 0x53	; 83
 286:	0e 94 fd 03 	call	0x7fa	; 0x7fa <ShowingTheValue>
		UART_sendString(buffer);
 28a:	ce 01       	movw	r24, r28
 28c:	01 96       	adiw	r24, 0x01	; 1
 28e:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <UART_sendString>
 292:	8f e4       	ldi	r24, 0x4F	; 79
 294:	93 ec       	ldi	r25, 0xC3	; 195
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <JoyStick_Mode+0xde>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <JoyStick_Mode+0xe4>
 29c:	00 00       	nop
	}

	_delay_ms(200);

}
 29e:	64 96       	adiw	r28, 0x14	; 20
 2a0:	0f b6       	in	r0, 0x3f	; 63
 2a2:	f8 94       	cli
 2a4:	de bf       	out	0x3e, r29	; 62
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	cd bf       	out	0x3d, r28	; 61
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	1f 91       	pop	r17
 2b0:	0f 91       	pop	r16
 2b2:	ff 90       	pop	r15
 2b4:	ef 90       	pop	r14
 2b6:	08 95       	ret

000002b8 <MobileApp_Mode>:

void MobileApp_Mode() {
	char command = UART_Receive(); // Receive from ESP
 2b8:	0e 94 5e 04 	call	0x8bc	; 0x8bc <UART_Receive>
	switch(command) {
 2bc:	8c 36       	cpi	r24, 0x6C	; 108
 2be:	b9 f0       	breq	.+46     	; 0x2ee <MobileApp_Mode+0x36>
 2c0:	28 f4       	brcc	.+10     	; 0x2cc <MobileApp_Mode+0x14>
 2c2:	82 36       	cpi	r24, 0x62	; 98
 2c4:	71 f0       	breq	.+28     	; 0x2e2 <MobileApp_Mode+0x2a>
 2c6:	86 36       	cpi	r24, 0x66	; 102
 2c8:	31 f0       	breq	.+12     	; 0x2d6 <MobileApp_Mode+0x1e>
 2ca:	23 c0       	rjmp	.+70     	; 0x312 <MobileApp_Mode+0x5a>
 2cc:	82 37       	cpi	r24, 0x72	; 114
 2ce:	a9 f0       	breq	.+42     	; 0x2fa <MobileApp_Mode+0x42>
 2d0:	83 37       	cpi	r24, 0x73	; 115
 2d2:	c9 f0       	breq	.+50     	; 0x306 <MobileApp_Mode+0x4e>
 2d4:	1e c0       	rjmp	.+60     	; 0x312 <MobileApp_Mode+0x5a>
		case 'f': MoveForward(); ShowingTheValue('F'); break;
 2d6:	0e 94 2c 02 	call	0x458	; 0x458 <MoveForward>
 2da:	86 e4       	ldi	r24, 0x46	; 70
 2dc:	0e 94 fd 03 	call	0x7fa	; 0x7fa <ShowingTheValue>
 2e0:	1c c0       	rjmp	.+56     	; 0x31a <MobileApp_Mode+0x62>
		case 'b': MoveBackward(); ShowingTheValue('B'); break;
 2e2:	0e 94 47 02 	call	0x48e	; 0x48e <MoveBackward>
 2e6:	82 e4       	ldi	r24, 0x42	; 66
 2e8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <ShowingTheValue>
 2ec:	16 c0       	rjmp	.+44     	; 0x31a <MobileApp_Mode+0x62>
		case 'l': MoveLeft(); ShowingTheValue('L'); break;
 2ee:	0e 94 7d 02 	call	0x4fa	; 0x4fa <MoveLeft>
 2f2:	8c e4       	ldi	r24, 0x4C	; 76
 2f4:	0e 94 fd 03 	call	0x7fa	; 0x7fa <ShowingTheValue>
 2f8:	10 c0       	rjmp	.+32     	; 0x31a <MobileApp_Mode+0x62>
		case 'r': MoveRight(); ShowingTheValue('R'); break;
 2fa:	0e 94 62 02 	call	0x4c4	; 0x4c4 <MoveRight>
 2fe:	82 e5       	ldi	r24, 0x52	; 82
 300:	0e 94 fd 03 	call	0x7fa	; 0x7fa <ShowingTheValue>
 304:	0a c0       	rjmp	.+20     	; 0x31a <MobileApp_Mode+0x62>
		case 's': Stop(); ShowingTheValue('S'); break;
 306:	0e 94 98 02 	call	0x530	; 0x530 <Stop>
 30a:	83 e5       	ldi	r24, 0x53	; 83
 30c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <ShowingTheValue>
 310:	04 c0       	rjmp	.+8      	; 0x31a <MobileApp_Mode+0x62>
		default: UART_sendString("Invalid Command\n"); break;
 312:	8a e8       	ldi	r24, 0x8A	; 138
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <UART_sendString>
 31a:	8f e4       	ldi	r24, 0x4F	; 79
 31c:	93 ec       	ldi	r25, 0xC3	; 195
 31e:	01 97       	sbiw	r24, 0x01	; 1
 320:	f1 f7       	brne	.-4      	; 0x31e <MobileApp_Mode+0x66>
 322:	00 c0       	rjmp	.+0      	; 0x324 <MobileApp_Mode+0x6c>
 324:	00 00       	nop
 326:	08 95       	ret

00000328 <Voice_Mode>:
	_delay_ms(200);
}


void Voice_Mode() {
	char command = UART_Receive();  //Receive from raspberry  Pi 
 328:	0e 94 5e 04 	call	0x8bc	; 0x8bc <UART_Receive>
	switch(command) {
 32c:	8c 36       	cpi	r24, 0x6C	; 108
 32e:	b9 f0       	breq	.+46     	; 0x35e <Voice_Mode+0x36>
 330:	28 f4       	brcc	.+10     	; 0x33c <Voice_Mode+0x14>
 332:	82 36       	cpi	r24, 0x62	; 98
 334:	71 f0       	breq	.+28     	; 0x352 <Voice_Mode+0x2a>
 336:	86 36       	cpi	r24, 0x66	; 102
 338:	31 f0       	breq	.+12     	; 0x346 <Voice_Mode+0x1e>
 33a:	23 c0       	rjmp	.+70     	; 0x382 <Voice_Mode+0x5a>
 33c:	82 37       	cpi	r24, 0x72	; 114
 33e:	a9 f0       	breq	.+42     	; 0x36a <Voice_Mode+0x42>
 340:	83 37       	cpi	r24, 0x73	; 115
 342:	c9 f0       	breq	.+50     	; 0x376 <Voice_Mode+0x4e>
 344:	1e c0       	rjmp	.+60     	; 0x382 <Voice_Mode+0x5a>
		case 'f': MoveForward(); ShowingTheValue('F'); break;
 346:	0e 94 2c 02 	call	0x458	; 0x458 <MoveForward>
 34a:	86 e4       	ldi	r24, 0x46	; 70
 34c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <ShowingTheValue>
 350:	1c c0       	rjmp	.+56     	; 0x38a <Voice_Mode+0x62>
		case 'b': MoveBackward(); ShowingTheValue('B'); break;
 352:	0e 94 47 02 	call	0x48e	; 0x48e <MoveBackward>
 356:	82 e4       	ldi	r24, 0x42	; 66
 358:	0e 94 fd 03 	call	0x7fa	; 0x7fa <ShowingTheValue>
 35c:	16 c0       	rjmp	.+44     	; 0x38a <Voice_Mode+0x62>
		case 'l': MoveLeft(); ShowingTheValue('L'); break;
 35e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <MoveLeft>
 362:	8c e4       	ldi	r24, 0x4C	; 76
 364:	0e 94 fd 03 	call	0x7fa	; 0x7fa <ShowingTheValue>
 368:	10 c0       	rjmp	.+32     	; 0x38a <Voice_Mode+0x62>
		case 'r': MoveRight(); ShowingTheValue('R'); break;
 36a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <MoveRight>
 36e:	82 e5       	ldi	r24, 0x52	; 82
 370:	0e 94 fd 03 	call	0x7fa	; 0x7fa <ShowingTheValue>
 374:	0a c0       	rjmp	.+20     	; 0x38a <Voice_Mode+0x62>
		case 's': Stop(); ShowingTheValue('S'); break;
 376:	0e 94 98 02 	call	0x530	; 0x530 <Stop>
 37a:	83 e5       	ldi	r24, 0x53	; 83
 37c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <ShowingTheValue>
 380:	04 c0       	rjmp	.+8      	; 0x38a <Voice_Mode+0x62>
		default: UART_sendString("Invalid Command\n"); break;
 382:	8a e8       	ldi	r24, 0x8A	; 138
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <UART_sendString>
 38a:	8f e4       	ldi	r24, 0x4F	; 79
 38c:	93 ec       	ldi	r25, 0xC3	; 195
 38e:	01 97       	sbiw	r24, 0x01	; 1
 390:	f1 f7       	brne	.-4      	; 0x38e <Voice_Mode+0x66>
 392:	00 c0       	rjmp	.+0      	; 0x394 <Voice_Mode+0x6c>
 394:	00 00       	nop
 396:	08 95       	ret

00000398 <EyeTracking_Mode>:
	_delay_ms(200);
}

void EyeTracking_Mode() {
	
	char direction = UART_Receive();  //Receive from raspberry  Pi 
 398:	0e 94 5e 04 	call	0x8bc	; 0x8bc <UART_Receive>
	switch(direction) {
 39c:	8c 36       	cpi	r24, 0x6C	; 108
 39e:	b9 f0       	breq	.+46     	; 0x3ce <EyeTracking_Mode+0x36>
 3a0:	28 f4       	brcc	.+10     	; 0x3ac <EyeTracking_Mode+0x14>
 3a2:	82 36       	cpi	r24, 0x62	; 98
 3a4:	71 f0       	breq	.+28     	; 0x3c2 <EyeTracking_Mode+0x2a>
 3a6:	86 36       	cpi	r24, 0x66	; 102
 3a8:	31 f0       	breq	.+12     	; 0x3b6 <EyeTracking_Mode+0x1e>
 3aa:	23 c0       	rjmp	.+70     	; 0x3f2 <EyeTracking_Mode+0x5a>
 3ac:	82 37       	cpi	r24, 0x72	; 114
 3ae:	a9 f0       	breq	.+42     	; 0x3da <EyeTracking_Mode+0x42>
 3b0:	83 37       	cpi	r24, 0x73	; 115
 3b2:	c9 f0       	breq	.+50     	; 0x3e6 <EyeTracking_Mode+0x4e>
 3b4:	1e c0       	rjmp	.+60     	; 0x3f2 <EyeTracking_Mode+0x5a>
		case 'f': MoveForward(); ShowingTheValue('F'); break;
 3b6:	0e 94 2c 02 	call	0x458	; 0x458 <MoveForward>
 3ba:	86 e4       	ldi	r24, 0x46	; 70
 3bc:	0e 94 fd 03 	call	0x7fa	; 0x7fa <ShowingTheValue>
 3c0:	1c c0       	rjmp	.+56     	; 0x3fa <EyeTracking_Mode+0x62>
		case 'b': MoveBackward(); ShowingTheValue('B'); break;
 3c2:	0e 94 47 02 	call	0x48e	; 0x48e <MoveBackward>
 3c6:	82 e4       	ldi	r24, 0x42	; 66
 3c8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <ShowingTheValue>
 3cc:	16 c0       	rjmp	.+44     	; 0x3fa <EyeTracking_Mode+0x62>
		case 'l': MoveLeft(); ShowingTheValue('L'); break;
 3ce:	0e 94 7d 02 	call	0x4fa	; 0x4fa <MoveLeft>
 3d2:	8c e4       	ldi	r24, 0x4C	; 76
 3d4:	0e 94 fd 03 	call	0x7fa	; 0x7fa <ShowingTheValue>
 3d8:	10 c0       	rjmp	.+32     	; 0x3fa <EyeTracking_Mode+0x62>
		case 'r': MoveRight(); ShowingTheValue('R'); break;
 3da:	0e 94 62 02 	call	0x4c4	; 0x4c4 <MoveRight>
 3de:	82 e5       	ldi	r24, 0x52	; 82
 3e0:	0e 94 fd 03 	call	0x7fa	; 0x7fa <ShowingTheValue>
 3e4:	0a c0       	rjmp	.+20     	; 0x3fa <EyeTracking_Mode+0x62>
		case 's': Stop(); ShowingTheValue('S'); break;
 3e6:	0e 94 98 02 	call	0x530	; 0x530 <Stop>
 3ea:	83 e5       	ldi	r24, 0x53	; 83
 3ec:	0e 94 fd 03 	call	0x7fa	; 0x7fa <ShowingTheValue>
 3f0:	04 c0       	rjmp	.+8      	; 0x3fa <EyeTracking_Mode+0x62>
		default: UART_sendString("Invalid Command\n"); break;
 3f2:	8a e8       	ldi	r24, 0x8A	; 138
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <UART_sendString>
 3fa:	8f e4       	ldi	r24, 0x4F	; 79
 3fc:	93 ec       	ldi	r25, 0xC3	; 195
 3fe:	01 97       	sbiw	r24, 0x01	; 1
 400:	f1 f7       	brne	.-4      	; 0x3fe <EyeTracking_Mode+0x66>
 402:	00 c0       	rjmp	.+0      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 404:	00 00       	nop
 406:	08 95       	ret

00000408 <PWM_init>:
#include "TIMER_Private.h"

// PWM Initialization
void PWM_init() {
	
	DIO_SetPinDirection(PORT_C,PIN4,PIN_OUTPUT); //Output pins OCR1B (PD4)
 408:	41 e0       	ldi	r20, 0x01	; 1
 40a:	64 e0       	ldi	r22, 0x04	; 4
 40c:	83 e0       	ldi	r24, 0x03	; 3
 40e:	0e 94 c1 02 	call	0x582	; 0x582 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORT_C,PIN5,PIN_OUTPUT); //Output pins OCR1A (PD5)
 412:	41 e0       	ldi	r20, 0x01	; 1
 414:	65 e0       	ldi	r22, 0x05	; 5
 416:	83 e0       	ldi	r24, 0x03	; 3
 418:	0e 94 c1 02 	call	0x582	; 0x582 <DIO_SetPinDirection>
	
	// Fast PWM Mode 14, Non-inverting
	TTCR1A = (1 << TTCR1A_COM1A1) | (1 << TTCR1A_COM1B1) | (1 << TTCR1A_WGM11);
 41c:	82 ea       	ldi	r24, 0xA2	; 162
 41e:	8f bd       	out	0x2f, r24	; 47
	TTCR1B = (1 << TTCR1B_WGM12) | (1 << TTCR1B_WGM13) | (1 << TTCR1B_CS11);  // Prescaler = 8
 420:	8a e1       	ldi	r24, 0x1A	; 26
 422:	8e bd       	out	0x2e, r24	; 46

	ICR1 = 255;  // PWM 8-bit
 424:	8f ef       	ldi	r24, 0xFF	; 255
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	98 bd       	out	0x28, r25	; 40
 42a:	87 bd       	out	0x27, r24	; 39
 42c:	08 95       	ret

0000042e <Motor_init>:
}

// Direction control via L298N (Connected to PORTC)

void Motor_init() {
	DIO_SetPinDirection(PORT_C,PIN0,PIN_OUTPUT); //Output pins IN1 (PC0)
 42e:	41 e0       	ldi	r20, 0x01	; 1
 430:	60 e0       	ldi	r22, 0x00	; 0
 432:	83 e0       	ldi	r24, 0x03	; 3
 434:	0e 94 c1 02 	call	0x582	; 0x582 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORT_C,PIN1,PIN_OUTPUT); //Output pins IN2 (PC1)
 438:	41 e0       	ldi	r20, 0x01	; 1
 43a:	61 e0       	ldi	r22, 0x01	; 1
 43c:	83 e0       	ldi	r24, 0x03	; 3
 43e:	0e 94 c1 02 	call	0x582	; 0x582 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORT_C,PIN2,PIN_OUTPUT); //Output pins IN3 (PC2)
 442:	41 e0       	ldi	r20, 0x01	; 1
 444:	62 e0       	ldi	r22, 0x02	; 2
 446:	83 e0       	ldi	r24, 0x03	; 3
 448:	0e 94 c1 02 	call	0x582	; 0x582 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORT_C,PIN3,PIN_OUTPUT); //Output pins IN4 (PC3)
 44c:	41 e0       	ldi	r20, 0x01	; 1
 44e:	63 e0       	ldi	r22, 0x03	; 3
 450:	83 e0       	ldi	r24, 0x03	; 3
 452:	0e 94 c1 02 	call	0x582	; 0x582 <DIO_SetPinDirection>
 456:	08 95       	ret

00000458 <MoveForward>:
}

void MoveForward() {
	OCR1A=191;   // Left
 458:	8f eb       	ldi	r24, 0xBF	; 191
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	9c bd       	out	0x2c, r25	; 44
 45e:	8b bd       	out	0x2b, r24	; 43
	OCR1B=191;   // Right
 460:	9a bd       	out	0x2a, r25	; 42
 462:	89 bd       	out	0x29, r24	; 41
	
	DIO_SetPinValue(PORT_C,PIN0,PIN_HIGH);
 464:	41 e0       	ldi	r20, 0x01	; 1
 466:	60 e0       	ldi	r22, 0x00	; 0
 468:	83 e0       	ldi	r24, 0x03	; 3
 46a:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN2,PIN_HIGH);
 46e:	41 e0       	ldi	r20, 0x01	; 1
 470:	62 e0       	ldi	r22, 0x02	; 2
 472:	83 e0       	ldi	r24, 0x03	; 3
 474:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN1,PIN_LOW);
 478:	40 e0       	ldi	r20, 0x00	; 0
 47a:	61 e0       	ldi	r22, 0x01	; 1
 47c:	83 e0       	ldi	r24, 0x03	; 3
 47e:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN3,PIN_LOW);
 482:	40 e0       	ldi	r20, 0x00	; 0
 484:	63 e0       	ldi	r22, 0x03	; 3
 486:	83 e0       	ldi	r24, 0x03	; 3
 488:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_SetPinValue>
 48c:	08 95       	ret

0000048e <MoveBackward>:
}

void MoveBackward() {
	OCR1A=191;
 48e:	8f eb       	ldi	r24, 0xBF	; 191
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	9c bd       	out	0x2c, r25	; 44
 494:	8b bd       	out	0x2b, r24	; 43
	OCR1B=191;
 496:	9a bd       	out	0x2a, r25	; 42
 498:	89 bd       	out	0x29, r24	; 41

	DIO_SetPinValue(PORT_C,PIN1,PIN_HIGH);
 49a:	41 e0       	ldi	r20, 0x01	; 1
 49c:	61 e0       	ldi	r22, 0x01	; 1
 49e:	83 e0       	ldi	r24, 0x03	; 3
 4a0:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN3,PIN_HIGH);
 4a4:	41 e0       	ldi	r20, 0x01	; 1
 4a6:	63 e0       	ldi	r22, 0x03	; 3
 4a8:	83 e0       	ldi	r24, 0x03	; 3
 4aa:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN0,PIN_LOW);
 4ae:	40 e0       	ldi	r20, 0x00	; 0
 4b0:	60 e0       	ldi	r22, 0x00	; 0
 4b2:	83 e0       	ldi	r24, 0x03	; 3
 4b4:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN2,PIN_LOW);
 4b8:	40 e0       	ldi	r20, 0x00	; 0
 4ba:	62 e0       	ldi	r22, 0x02	; 2
 4bc:	83 e0       	ldi	r24, 0x03	; 3
 4be:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_SetPinValue>
 4c2:	08 95       	ret

000004c4 <MoveRight>:
}

void MoveRight() {
	OCR1A=191;
 4c4:	8f eb       	ldi	r24, 0xBF	; 191
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	9c bd       	out	0x2c, r25	; 44
 4ca:	8b bd       	out	0x2b, r24	; 43
	OCR1B=0;
 4cc:	1a bc       	out	0x2a, r1	; 42
 4ce:	19 bc       	out	0x29, r1	; 41

	DIO_SetPinValue(PORT_C,PIN0,PIN_HIGH);  // Left Motor Forward
 4d0:	41 e0       	ldi	r20, 0x01	; 1
 4d2:	60 e0       	ldi	r22, 0x00	; 0
 4d4:	83 e0       	ldi	r24, 0x03	; 3
 4d6:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN1,PIN_LOW);
 4da:	40 e0       	ldi	r20, 0x00	; 0
 4dc:	61 e0       	ldi	r22, 0x01	; 1
 4de:	83 e0       	ldi	r24, 0x03	; 3
 4e0:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN2,PIN_LOW);  // Right Motor Stop
 4e4:	40 e0       	ldi	r20, 0x00	; 0
 4e6:	62 e0       	ldi	r22, 0x02	; 2
 4e8:	83 e0       	ldi	r24, 0x03	; 3
 4ea:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN3,PIN_LOW);
 4ee:	40 e0       	ldi	r20, 0x00	; 0
 4f0:	63 e0       	ldi	r22, 0x03	; 3
 4f2:	83 e0       	ldi	r24, 0x03	; 3
 4f4:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_SetPinValue>
 4f8:	08 95       	ret

000004fa <MoveLeft>:

}

void MoveLeft() {
	OCR1A=0;
 4fa:	1c bc       	out	0x2c, r1	; 44
 4fc:	1b bc       	out	0x2b, r1	; 43
	OCR1B=191;
 4fe:	8f eb       	ldi	r24, 0xBF	; 191
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	9a bd       	out	0x2a, r25	; 42
 504:	89 bd       	out	0x29, r24	; 41
	
	DIO_SetPinValue(PORT_C,PIN2,PIN_HIGH);  // Right Motor Forward
 506:	41 e0       	ldi	r20, 0x01	; 1
 508:	62 e0       	ldi	r22, 0x02	; 2
 50a:	83 e0       	ldi	r24, 0x03	; 3
 50c:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN3,PIN_LOW);
 510:	40 e0       	ldi	r20, 0x00	; 0
 512:	63 e0       	ldi	r22, 0x03	; 3
 514:	83 e0       	ldi	r24, 0x03	; 3
 516:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN0,PIN_LOW);  // Left Motor Stop
 51a:	40 e0       	ldi	r20, 0x00	; 0
 51c:	60 e0       	ldi	r22, 0x00	; 0
 51e:	83 e0       	ldi	r24, 0x03	; 3
 520:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN1,PIN_LOW);
 524:	40 e0       	ldi	r20, 0x00	; 0
 526:	61 e0       	ldi	r22, 0x01	; 1
 528:	83 e0       	ldi	r24, 0x03	; 3
 52a:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_SetPinValue>
 52e:	08 95       	ret

00000530 <Stop>:
}

void Stop() {
	OCR1A=0;
 530:	1c bc       	out	0x2c, r1	; 44
 532:	1b bc       	out	0x2b, r1	; 43
	OCR1B=0;
 534:	1a bc       	out	0x2a, r1	; 42
 536:	19 bc       	out	0x29, r1	; 41
	// All motors stop
	DIO_SetPinValue(PORT_C,PIN0,PIN_LOW);
 538:	40 e0       	ldi	r20, 0x00	; 0
 53a:	60 e0       	ldi	r22, 0x00	; 0
 53c:	83 e0       	ldi	r24, 0x03	; 3
 53e:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN1,PIN_LOW);
 542:	40 e0       	ldi	r20, 0x00	; 0
 544:	61 e0       	ldi	r22, 0x01	; 1
 546:	83 e0       	ldi	r24, 0x03	; 3
 548:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN2,PIN_LOW);
 54c:	40 e0       	ldi	r20, 0x00	; 0
 54e:	62 e0       	ldi	r22, 0x02	; 2
 550:	83 e0       	ldi	r24, 0x03	; 3
 552:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN3,PIN_LOW);
 556:	40 e0       	ldi	r20, 0x00	; 0
 558:	63 e0       	ldi	r22, 0x03	; 3
 55a:	83 e0       	ldi	r24, 0x03	; 3
 55c:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_SetPinValue>
 560:	08 95       	ret

00000562 <ADC_Init>:
#include "ADC_Interface.h"



void ADC_Init() {
	ADMUX = (1<<ADMUX_REFS0);  // AVcc as reference
 562:	80 e4       	ldi	r24, 0x40	; 64
 564:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADCSRA_ADEN)|(1<<ADCSRA_ADPS2)|(1<<ADCSRA_ADPS1);  //Enable ADC, prescaler 64
 566:	86 e8       	ldi	r24, 0x86	; 134
 568:	86 b9       	out	0x06, r24	; 6
 56a:	08 95       	ret

0000056c <ADC_Read>:
}

u16 ADC_Read(u8 channel) {
	ADMUX = (1 << ADMUX_REFS0) | (channel & 0x0F);  // Select ADC channel
 56c:	8f 70       	andi	r24, 0x0F	; 15
 56e:	80 64       	ori	r24, 0x40	; 64
 570:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<< ADCSRA_ADSC);   // Start conversion
 572:	86 b1       	in	r24, 0x06	; 6
 574:	80 64       	ori	r24, 0x40	; 64
 576:	86 b9       	out	0x06, r24	; 6
	while(ADCSRA & (1<< ADCSRA_ADSC));  // Wait for conversion to finish
 578:	36 99       	sbic	0x06, 6	; 6
 57a:	fe cf       	rjmp	.-4      	; 0x578 <ADC_Read+0xc>
	return ADC_OUTPUT;
 57c:	84 b1       	in	r24, 0x04	; 4
 57e:	95 b1       	in	r25, 0x05	; 5
}
 580:	08 95       	ret

00000582 <DIO_SetPinDirection>:

/* Function definitions that deals with pins */

void DIO_SetPinDirection(u8 PortName,u8 PinNumber,u8 PinDirection)
{
	if(PinDirection==PIN_OUTPUT)
 582:	41 30       	cpi	r20, 0x01	; 1
 584:	b9 f5       	brne	.+110    	; 0x5f4 <DIO_SetPinDirection+0x72>
	{
		switch(PortName)
 586:	82 30       	cpi	r24, 0x02	; 2
 588:	a1 f0       	breq	.+40     	; 0x5b2 <DIO_SetPinDirection+0x30>
 58a:	18 f4       	brcc	.+6      	; 0x592 <DIO_SetPinDirection+0x10>
 58c:	81 30       	cpi	r24, 0x01	; 1
 58e:	31 f0       	breq	.+12     	; 0x59c <DIO_SetPinDirection+0x1a>
 590:	08 95       	ret
 592:	83 30       	cpi	r24, 0x03	; 3
 594:	c9 f0       	breq	.+50     	; 0x5c8 <DIO_SetPinDirection+0x46>
 596:	84 30       	cpi	r24, 0x04	; 4
 598:	11 f1       	breq	.+68     	; 0x5de <DIO_SetPinDirection+0x5c>
 59a:	08 95       	ret
		{	case PORT_A: SET_BIT(DDRA,PinNumber);
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <DIO_SetPinDirection+0x24>
 5a2:	88 0f       	add	r24, r24
 5a4:	99 1f       	adc	r25, r25
 5a6:	6a 95       	dec	r22
 5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <DIO_SetPinDirection+0x20>
 5aa:	9a b3       	in	r25, 0x1a	; 26
 5ac:	89 2b       	or	r24, r25
 5ae:	8a bb       	out	0x1a, r24	; 26
			break;
 5b0:	08 95       	ret
			case PORT_B: SET_BIT(DDRB,PinNumber);
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <DIO_SetPinDirection+0x3a>
 5b8:	88 0f       	add	r24, r24
 5ba:	99 1f       	adc	r25, r25
 5bc:	6a 95       	dec	r22
 5be:	e2 f7       	brpl	.-8      	; 0x5b8 <DIO_SetPinDirection+0x36>
 5c0:	97 b3       	in	r25, 0x17	; 23
 5c2:	89 2b       	or	r24, r25
 5c4:	87 bb       	out	0x17, r24	; 23
			break;
 5c6:	08 95       	ret
			case PORT_C: SET_BIT(DDRC,PinNumber);
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <DIO_SetPinDirection+0x50>
 5ce:	88 0f       	add	r24, r24
 5d0:	99 1f       	adc	r25, r25
 5d2:	6a 95       	dec	r22
 5d4:	e2 f7       	brpl	.-8      	; 0x5ce <DIO_SetPinDirection+0x4c>
 5d6:	94 b3       	in	r25, 0x14	; 20
 5d8:	89 2b       	or	r24, r25
 5da:	84 bb       	out	0x14, r24	; 20
			break;
 5dc:	08 95       	ret
			case PORT_D: SET_BIT(DDRD,PinNumber);
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <DIO_SetPinDirection+0x66>
 5e4:	88 0f       	add	r24, r24
 5e6:	99 1f       	adc	r25, r25
 5e8:	6a 95       	dec	r22
 5ea:	e2 f7       	brpl	.-8      	; 0x5e4 <DIO_SetPinDirection+0x62>
 5ec:	91 b3       	in	r25, 0x11	; 17
 5ee:	89 2b       	or	r24, r25
 5f0:	81 bb       	out	0x11, r24	; 17
			break;
 5f2:	08 95       	ret
		}
	}
	else if(PinDirection==PIN_INPUT)
 5f4:	41 11       	cpse	r20, r1
 5f6:	3a c0       	rjmp	.+116    	; 0x66c <DIO_SetPinDirection+0xea>
	{
		switch(PortName)
 5f8:	82 30       	cpi	r24, 0x02	; 2
 5fa:	a9 f0       	breq	.+42     	; 0x626 <DIO_SetPinDirection+0xa4>
 5fc:	18 f4       	brcc	.+6      	; 0x604 <DIO_SetPinDirection+0x82>
 5fe:	81 30       	cpi	r24, 0x01	; 1
 600:	31 f0       	breq	.+12     	; 0x60e <DIO_SetPinDirection+0x8c>
 602:	08 95       	ret
 604:	83 30       	cpi	r24, 0x03	; 3
 606:	d9 f0       	breq	.+54     	; 0x63e <DIO_SetPinDirection+0xbc>
 608:	84 30       	cpi	r24, 0x04	; 4
 60a:	29 f1       	breq	.+74     	; 0x656 <DIO_SetPinDirection+0xd4>
 60c:	08 95       	ret
		{	case PORT_A: CLR_BIT(DDRA,PinNumber);
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	02 c0       	rjmp	.+4      	; 0x618 <DIO_SetPinDirection+0x96>
 614:	88 0f       	add	r24, r24
 616:	99 1f       	adc	r25, r25
 618:	6a 95       	dec	r22
 61a:	e2 f7       	brpl	.-8      	; 0x614 <DIO_SetPinDirection+0x92>
 61c:	80 95       	com	r24
 61e:	9a b3       	in	r25, 0x1a	; 26
 620:	89 23       	and	r24, r25
 622:	8a bb       	out	0x1a, r24	; 26
			break;
 624:	08 95       	ret
			case PORT_B: CLR_BIT(DDRB,PinNumber);
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	02 c0       	rjmp	.+4      	; 0x630 <DIO_SetPinDirection+0xae>
 62c:	88 0f       	add	r24, r24
 62e:	99 1f       	adc	r25, r25
 630:	6a 95       	dec	r22
 632:	e2 f7       	brpl	.-8      	; 0x62c <DIO_SetPinDirection+0xaa>
 634:	80 95       	com	r24
 636:	97 b3       	in	r25, 0x17	; 23
 638:	89 23       	and	r24, r25
 63a:	87 bb       	out	0x17, r24	; 23
			break;
 63c:	08 95       	ret
			case PORT_C: CLR_BIT(DDRC,PinNumber);
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	02 c0       	rjmp	.+4      	; 0x648 <DIO_SetPinDirection+0xc6>
 644:	88 0f       	add	r24, r24
 646:	99 1f       	adc	r25, r25
 648:	6a 95       	dec	r22
 64a:	e2 f7       	brpl	.-8      	; 0x644 <DIO_SetPinDirection+0xc2>
 64c:	80 95       	com	r24
 64e:	94 b3       	in	r25, 0x14	; 20
 650:	89 23       	and	r24, r25
 652:	84 bb       	out	0x14, r24	; 20
			break;
 654:	08 95       	ret
			case PORT_D: CLR_BIT(DDRD,PinNumber);
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	02 c0       	rjmp	.+4      	; 0x660 <DIO_SetPinDirection+0xde>
 65c:	88 0f       	add	r24, r24
 65e:	99 1f       	adc	r25, r25
 660:	6a 95       	dec	r22
 662:	e2 f7       	brpl	.-8      	; 0x65c <DIO_SetPinDirection+0xda>
 664:	80 95       	com	r24
 666:	91 b3       	in	r25, 0x11	; 17
 668:	89 23       	and	r24, r25
 66a:	81 bb       	out	0x11, r24	; 17
 66c:	08 95       	ret

0000066e <DIO_SetPinValue>:
		}
	}
}
void DIO_SetPinValue(u8 PortName,u8 PinNumber,u8 PinValue)
{
		if(PinValue==PIN_HIGH)
 66e:	41 30       	cpi	r20, 0x01	; 1
 670:	b9 f5       	brne	.+110    	; 0x6e0 <DIO_SetPinValue+0x72>
		{
			switch(PortName)
 672:	82 30       	cpi	r24, 0x02	; 2
 674:	a1 f0       	breq	.+40     	; 0x69e <DIO_SetPinValue+0x30>
 676:	18 f4       	brcc	.+6      	; 0x67e <DIO_SetPinValue+0x10>
 678:	81 30       	cpi	r24, 0x01	; 1
 67a:	31 f0       	breq	.+12     	; 0x688 <DIO_SetPinValue+0x1a>
 67c:	08 95       	ret
 67e:	83 30       	cpi	r24, 0x03	; 3
 680:	c9 f0       	breq	.+50     	; 0x6b4 <DIO_SetPinValue+0x46>
 682:	84 30       	cpi	r24, 0x04	; 4
 684:	11 f1       	breq	.+68     	; 0x6ca <DIO_SetPinValue+0x5c>
 686:	08 95       	ret
			{	case PORT_A: SET_BIT(PORTA,PinNumber);
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	02 c0       	rjmp	.+4      	; 0x692 <DIO_SetPinValue+0x24>
 68e:	88 0f       	add	r24, r24
 690:	99 1f       	adc	r25, r25
 692:	6a 95       	dec	r22
 694:	e2 f7       	brpl	.-8      	; 0x68e <DIO_SetPinValue+0x20>
 696:	9b b3       	in	r25, 0x1b	; 27
 698:	89 2b       	or	r24, r25
 69a:	8b bb       	out	0x1b, r24	; 27
				break;
 69c:	08 95       	ret
				case PORT_B: SET_BIT(PORTB,PinNumber);
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <DIO_SetPinValue+0x3a>
 6a4:	88 0f       	add	r24, r24
 6a6:	99 1f       	adc	r25, r25
 6a8:	6a 95       	dec	r22
 6aa:	e2 f7       	brpl	.-8      	; 0x6a4 <DIO_SetPinValue+0x36>
 6ac:	98 b3       	in	r25, 0x18	; 24
 6ae:	89 2b       	or	r24, r25
 6b0:	88 bb       	out	0x18, r24	; 24
				break;
 6b2:	08 95       	ret
				case PORT_C: SET_BIT(PORTC,PinNumber);
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	02 c0       	rjmp	.+4      	; 0x6be <DIO_SetPinValue+0x50>
 6ba:	88 0f       	add	r24, r24
 6bc:	99 1f       	adc	r25, r25
 6be:	6a 95       	dec	r22
 6c0:	e2 f7       	brpl	.-8      	; 0x6ba <DIO_SetPinValue+0x4c>
 6c2:	95 b3       	in	r25, 0x15	; 21
 6c4:	89 2b       	or	r24, r25
 6c6:	85 bb       	out	0x15, r24	; 21
				break;
 6c8:	08 95       	ret
				case PORT_D: SET_BIT(PORTD,PinNumber);
 6ca:	81 e0       	ldi	r24, 0x01	; 1
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <DIO_SetPinValue+0x66>
 6d0:	88 0f       	add	r24, r24
 6d2:	99 1f       	adc	r25, r25
 6d4:	6a 95       	dec	r22
 6d6:	e2 f7       	brpl	.-8      	; 0x6d0 <DIO_SetPinValue+0x62>
 6d8:	92 b3       	in	r25, 0x12	; 18
 6da:	89 2b       	or	r24, r25
 6dc:	82 bb       	out	0x12, r24	; 18
				break;
 6de:	08 95       	ret
			}
		}
		else if(PinValue==PIN_LOW)
 6e0:	41 11       	cpse	r20, r1
 6e2:	3a c0       	rjmp	.+116    	; 0x758 <DIO_SetPinValue+0xea>
		{
			switch(PortName)
 6e4:	82 30       	cpi	r24, 0x02	; 2
 6e6:	a9 f0       	breq	.+42     	; 0x712 <DIO_SetPinValue+0xa4>
 6e8:	18 f4       	brcc	.+6      	; 0x6f0 <DIO_SetPinValue+0x82>
 6ea:	81 30       	cpi	r24, 0x01	; 1
 6ec:	31 f0       	breq	.+12     	; 0x6fa <DIO_SetPinValue+0x8c>
 6ee:	08 95       	ret
 6f0:	83 30       	cpi	r24, 0x03	; 3
 6f2:	d9 f0       	breq	.+54     	; 0x72a <DIO_SetPinValue+0xbc>
 6f4:	84 30       	cpi	r24, 0x04	; 4
 6f6:	29 f1       	breq	.+74     	; 0x742 <DIO_SetPinValue+0xd4>
 6f8:	08 95       	ret
			{	case PORT_A: CLR_BIT(PORTA,PinNumber);
 6fa:	81 e0       	ldi	r24, 0x01	; 1
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <DIO_SetPinValue+0x96>
 700:	88 0f       	add	r24, r24
 702:	99 1f       	adc	r25, r25
 704:	6a 95       	dec	r22
 706:	e2 f7       	brpl	.-8      	; 0x700 <DIO_SetPinValue+0x92>
 708:	80 95       	com	r24
 70a:	9b b3       	in	r25, 0x1b	; 27
 70c:	89 23       	and	r24, r25
 70e:	8b bb       	out	0x1b, r24	; 27
				break;
 710:	08 95       	ret
				case PORT_B: CLR_BIT(PORTB,PinNumber);
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	02 c0       	rjmp	.+4      	; 0x71c <DIO_SetPinValue+0xae>
 718:	88 0f       	add	r24, r24
 71a:	99 1f       	adc	r25, r25
 71c:	6a 95       	dec	r22
 71e:	e2 f7       	brpl	.-8      	; 0x718 <DIO_SetPinValue+0xaa>
 720:	80 95       	com	r24
 722:	98 b3       	in	r25, 0x18	; 24
 724:	89 23       	and	r24, r25
 726:	88 bb       	out	0x18, r24	; 24
				break;
 728:	08 95       	ret
				case PORT_C: CLR_BIT(PORTC,PinNumber);
 72a:	81 e0       	ldi	r24, 0x01	; 1
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	02 c0       	rjmp	.+4      	; 0x734 <DIO_SetPinValue+0xc6>
 730:	88 0f       	add	r24, r24
 732:	99 1f       	adc	r25, r25
 734:	6a 95       	dec	r22
 736:	e2 f7       	brpl	.-8      	; 0x730 <DIO_SetPinValue+0xc2>
 738:	80 95       	com	r24
 73a:	95 b3       	in	r25, 0x15	; 21
 73c:	89 23       	and	r24, r25
 73e:	85 bb       	out	0x15, r24	; 21
				break;
 740:	08 95       	ret
				case PORT_D: CLR_BIT(PORTD,PinNumber);
 742:	81 e0       	ldi	r24, 0x01	; 1
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	02 c0       	rjmp	.+4      	; 0x74c <DIO_SetPinValue+0xde>
 748:	88 0f       	add	r24, r24
 74a:	99 1f       	adc	r25, r25
 74c:	6a 95       	dec	r22
 74e:	e2 f7       	brpl	.-8      	; 0x748 <DIO_SetPinValue+0xda>
 750:	80 95       	com	r24
 752:	92 b3       	in	r25, 0x12	; 18
 754:	89 23       	and	r24, r25
 756:	82 bb       	out	0x12, r24	; 18
 758:	08 95       	ret

0000075a <DIO_GetPinValue>:
		}
}
u8   DIO_GetPinValue(u8 Portname,u8 PinNumber)
{
	u8 PinState;
	switch(Portname)
 75a:	82 30       	cpi	r24, 0x02	; 2
 75c:	99 f0       	breq	.+38     	; 0x784 <DIO_GetPinValue+0x2a>
 75e:	18 f4       	brcc	.+6      	; 0x766 <DIO_GetPinValue+0xc>
 760:	81 30       	cpi	r24, 0x01	; 1
 762:	31 f0       	breq	.+12     	; 0x770 <DIO_GetPinValue+0x16>
 764:	2c c0       	rjmp	.+88     	; 0x7be <DIO_GetPinValue+0x64>
 766:	83 30       	cpi	r24, 0x03	; 3
 768:	b9 f0       	breq	.+46     	; 0x798 <DIO_GetPinValue+0x3e>
 76a:	84 30       	cpi	r24, 0x04	; 4
 76c:	f9 f0       	breq	.+62     	; 0x7ac <DIO_GetPinValue+0x52>
 76e:	27 c0       	rjmp	.+78     	; 0x7be <DIO_GetPinValue+0x64>
	{
		case PORT_A:PinState=GET_BIT(PINA,PinNumber);
 770:	89 b3       	in	r24, 0x19	; 25
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	02 c0       	rjmp	.+4      	; 0x77a <DIO_GetPinValue+0x20>
 776:	95 95       	asr	r25
 778:	87 95       	ror	r24
 77a:	6a 95       	dec	r22
 77c:	e2 f7       	brpl	.-8      	; 0x776 <DIO_GetPinValue+0x1c>
 77e:	98 2f       	mov	r25, r24
 780:	91 70       	andi	r25, 0x01	; 1
		break;
 782:	1d c0       	rjmp	.+58     	; 0x7be <DIO_GetPinValue+0x64>
		case PORT_B:PinState=GET_BIT(PINB,PinNumber);
 784:	86 b3       	in	r24, 0x16	; 22
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	02 c0       	rjmp	.+4      	; 0x78e <DIO_GetPinValue+0x34>
 78a:	95 95       	asr	r25
 78c:	87 95       	ror	r24
 78e:	6a 95       	dec	r22
 790:	e2 f7       	brpl	.-8      	; 0x78a <DIO_GetPinValue+0x30>
 792:	98 2f       	mov	r25, r24
 794:	91 70       	andi	r25, 0x01	; 1
		break;
 796:	13 c0       	rjmp	.+38     	; 0x7be <DIO_GetPinValue+0x64>
		case PORT_C:PinState=GET_BIT(PINC,PinNumber);
 798:	83 b3       	in	r24, 0x13	; 19
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	02 c0       	rjmp	.+4      	; 0x7a2 <DIO_GetPinValue+0x48>
 79e:	95 95       	asr	r25
 7a0:	87 95       	ror	r24
 7a2:	6a 95       	dec	r22
 7a4:	e2 f7       	brpl	.-8      	; 0x79e <DIO_GetPinValue+0x44>
 7a6:	98 2f       	mov	r25, r24
 7a8:	91 70       	andi	r25, 0x01	; 1
		break;
 7aa:	09 c0       	rjmp	.+18     	; 0x7be <DIO_GetPinValue+0x64>
		case PORT_D:PinState=GET_BIT(PIND,PinNumber);
 7ac:	80 b3       	in	r24, 0x10	; 16
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <DIO_GetPinValue+0x5c>
 7b2:	95 95       	asr	r25
 7b4:	87 95       	ror	r24
 7b6:	6a 95       	dec	r22
 7b8:	e2 f7       	brpl	.-8      	; 0x7b2 <DIO_GetPinValue+0x58>
 7ba:	98 2f       	mov	r25, r24
 7bc:	91 70       	andi	r25, 0x01	; 1
		break;
	}
	return PinState;	
}
 7be:	89 2f       	mov	r24, r25
 7c0:	08 95       	ret

000007c2 <UART_init>:
#include "UART_Interface.h"
#include "TIMER_Private.h"

// UART Initialization
void UART_init(u16 baud) {
	u16 ubrr = F_CPU / 16 / baud - 1;
 7c2:	9c 01       	movw	r18, r24
 7c4:	40 e0       	ldi	r20, 0x00	; 0
 7c6:	50 e0       	ldi	r21, 0x00	; 0
 7c8:	60 e2       	ldi	r22, 0x20	; 32
 7ca:	71 ea       	ldi	r23, 0xA1	; 161
 7cc:	87 e0       	ldi	r24, 0x07	; 7
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__udivmodsi4>
 7d4:	21 50       	subi	r18, 0x01	; 1
 7d6:	31 09       	sbc	r19, r1
	UBRRH = (u8)(ubrr >> 8);
 7d8:	30 bd       	out	0x20, r19	; 32
	UBRRL = (u8)ubrr;
 7da:	29 b9       	out	0x09, r18	; 9
	// Enable receiver and transmitter
	UCSRB = (1 << UCSRB_RXEN) | (1 << UCSRB_TXEN);
 7dc:	88 e1       	ldi	r24, 0x18	; 24
 7de:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << UCSRC_URSEL) | (1 << UCSRC_UCSZ1) | (1 << UCSRC_UCSZ0);  // Set frame format: 8 data bits, 1 stop bit
 7e0:	86 e8       	ldi	r24, 0x86	; 134
 7e2:	80 bd       	out	0x20, r24	; 32
 7e4:	08 95       	ret

000007e6 <UART_sendString>:
}

// Send String via UART
void UART_sendString(const u8* data) {
 7e6:	fc 01       	movw	r30, r24
	while (*data) {
 7e8:	04 c0       	rjmp	.+8      	; 0x7f2 <UART_sendString+0xc>
		while (!(UCSRA & (1 << UCSRA_UDRE)));  // Wait until buffer is empty
 7ea:	5d 9b       	sbis	0x0b, 5	; 11
 7ec:	fe cf       	rjmp	.-4      	; 0x7ea <UART_sendString+0x4>
			// Put data into buffer, sends the data
		UDR_InputOutput = *data++;
 7ee:	31 96       	adiw	r30, 0x01	; 1
 7f0:	8c b9       	out	0x0c, r24	; 12
	UCSRC = (1 << UCSRC_URSEL) | (1 << UCSRC_UCSZ1) | (1 << UCSRC_UCSZ0);  // Set frame format: 8 data bits, 1 stop bit
}

// Send String via UART
void UART_sendString(const u8* data) {
	while (*data) {
 7f2:	80 81       	ld	r24, Z
 7f4:	81 11       	cpse	r24, r1
 7f6:	f9 cf       	rjmp	.-14     	; 0x7ea <UART_sendString+0x4>
		while (!(UCSRA & (1 << UCSRA_UDRE)));  // Wait until buffer is empty
			// Put data into buffer, sends the data
		UDR_InputOutput = *data++;
	}
}
 7f8:	08 95       	ret

000007fa <ShowingTheValue>:

// Show OCR values and movement direction
void ShowingTheValue(u8 movement) {
 7fa:	0f 93       	push	r16
 7fc:	1f 93       	push	r17
 7fe:	cf 93       	push	r28
 800:	df 93       	push	r29
 802:	cd b7       	in	r28, 0x3d	; 61
 804:	de b7       	in	r29, 0x3e	; 62
 806:	ec 97       	sbiw	r28, 0x3c	; 60
 808:	0f b6       	in	r0, 0x3f	; 63
 80a:	f8 94       	cli
 80c:	de bf       	out	0x3e, r29	; 62
 80e:	0f be       	out	0x3f, r0	; 63
 810:	cd bf       	out	0x3d, r28	; 61
	u8 buffer[60];
	sprintf(buffer, "[%c] OCR1A: %u , OCR1B: %u \n\n", movement, OCR1A, OCR1B);
 812:	49 b5       	in	r20, 0x29	; 41
 814:	5a b5       	in	r21, 0x2a	; 42
 816:	2b b5       	in	r18, 0x2b	; 43
 818:	3c b5       	in	r19, 0x2c	; 44
 81a:	5f 93       	push	r21
 81c:	4f 93       	push	r20
 81e:	3f 93       	push	r19
 820:	2f 93       	push	r18
 822:	1f 92       	push	r1
 824:	8f 93       	push	r24
 826:	8b e9       	ldi	r24, 0x9B	; 155
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	9f 93       	push	r25
 82c:	8f 93       	push	r24
 82e:	8e 01       	movw	r16, r28
 830:	0f 5f       	subi	r16, 0xFF	; 255
 832:	1f 4f       	sbci	r17, 0xFF	; 255
 834:	1f 93       	push	r17
 836:	0f 93       	push	r16
 838:	0e 94 92 04 	call	0x924	; 0x924 <sprintf>
	UART_sendString(buffer);
 83c:	c8 01       	movw	r24, r16
 83e:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <UART_sendString>
}
 842:	0f b6       	in	r0, 0x3f	; 63
 844:	f8 94       	cli
 846:	de bf       	out	0x3e, r29	; 62
 848:	0f be       	out	0x3f, r0	; 63
 84a:	cd bf       	out	0x3d, r28	; 61
 84c:	ec 96       	adiw	r28, 0x3c	; 60
 84e:	0f b6       	in	r0, 0x3f	; 63
 850:	f8 94       	cli
 852:	de bf       	out	0x3e, r29	; 62
 854:	0f be       	out	0x3f, r0	; 63
 856:	cd bf       	out	0x3d, r28	; 61
 858:	df 91       	pop	r29
 85a:	cf 91       	pop	r28
 85c:	1f 91       	pop	r17
 85e:	0f 91       	pop	r16
 860:	08 95       	ret

00000862 <sendValueToRasPI>:
void sendValueToRasPI(u8 ValueOfMode) {
 862:	0f 93       	push	r16
 864:	1f 93       	push	r17
 866:	cf 93       	push	r28
 868:	df 93       	push	r29
 86a:	cd b7       	in	r28, 0x3d	; 61
 86c:	de b7       	in	r29, 0x3e	; 62
 86e:	64 97       	sbiw	r28, 0x14	; 20
 870:	0f b6       	in	r0, 0x3f	; 63
 872:	f8 94       	cli
 874:	de bf       	out	0x3e, r29	; 62
 876:	0f be       	out	0x3f, r0	; 63
 878:	cd bf       	out	0x3d, r28	; 61
	u8 buffer[20];
	sprintf(buffer, "Mode: %d", ValueOfMode);
 87a:	1f 92       	push	r1
 87c:	8f 93       	push	r24
 87e:	89 eb       	ldi	r24, 0xB9	; 185
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	9f 93       	push	r25
 884:	8f 93       	push	r24
 886:	8e 01       	movw	r16, r28
 888:	0f 5f       	subi	r16, 0xFF	; 255
 88a:	1f 4f       	sbci	r17, 0xFF	; 255
 88c:	1f 93       	push	r17
 88e:	0f 93       	push	r16
 890:	0e 94 92 04 	call	0x924	; 0x924 <sprintf>
	UART_sendString(buffer);
 894:	c8 01       	movw	r24, r16
 896:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <UART_sendString>
}
 89a:	0f 90       	pop	r0
 89c:	0f 90       	pop	r0
 89e:	0f 90       	pop	r0
 8a0:	0f 90       	pop	r0
 8a2:	0f 90       	pop	r0
 8a4:	0f 90       	pop	r0
 8a6:	64 96       	adiw	r28, 0x14	; 20
 8a8:	0f b6       	in	r0, 0x3f	; 63
 8aa:	f8 94       	cli
 8ac:	de bf       	out	0x3e, r29	; 62
 8ae:	0f be       	out	0x3f, r0	; 63
 8b0:	cd bf       	out	0x3d, r28	; 61
 8b2:	df 91       	pop	r29
 8b4:	cf 91       	pop	r28
 8b6:	1f 91       	pop	r17
 8b8:	0f 91       	pop	r16
 8ba:	08 95       	ret

000008bc <UART_Receive>:


u8 UART_Receive(void) {
	// Wait for data to be received
	while (!(UCSRA & (1 << UCSRA_RXC)));
 8bc:	5f 9b       	sbis	0x0b, 7	; 11
 8be:	fe cf       	rjmp	.-4      	; 0x8bc <UART_Receive>
	// Get and return received data from buffer
	return (UDR_InputOutput);
 8c0:	8c b1       	in	r24, 0x0c	; 12
}
 8c2:	08 95       	ret

000008c4 <UART_Flush>:

void UART_Flush(void) {
 8c4:	cf 93       	push	r28
 8c6:	df 93       	push	r29
 8c8:	1f 92       	push	r1
 8ca:	cd b7       	in	r28, 0x3d	; 61
 8cc:	de b7       	in	r29, 0x3e	; 62
	while ( UCSRA & (1<<UCSRA_RXC) ) {
 8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <UART_Flush+0x10>
		volatile u8 dummy = UDR_InputOutput;
 8d0:	8c b1       	in	r24, 0x0c	; 12
 8d2:	89 83       	std	Y+1, r24	; 0x01
	// Get and return received data from buffer
	return (UDR_InputOutput);
}

void UART_Flush(void) {
	while ( UCSRA & (1<<UCSRA_RXC) ) {
 8d4:	5f 99       	sbic	0x0b, 7	; 11
 8d6:	fc cf       	rjmp	.-8      	; 0x8d0 <UART_Flush+0xc>
		volatile u8 dummy = UDR_InputOutput;
	}
}
 8d8:	0f 90       	pop	r0
 8da:	df 91       	pop	r29
 8dc:	cf 91       	pop	r28
 8de:	08 95       	ret

000008e0 <__udivmodsi4>:
 8e0:	a1 e2       	ldi	r26, 0x21	; 33
 8e2:	1a 2e       	mov	r1, r26
 8e4:	aa 1b       	sub	r26, r26
 8e6:	bb 1b       	sub	r27, r27
 8e8:	fd 01       	movw	r30, r26
 8ea:	0d c0       	rjmp	.+26     	; 0x906 <__udivmodsi4_ep>

000008ec <__udivmodsi4_loop>:
 8ec:	aa 1f       	adc	r26, r26
 8ee:	bb 1f       	adc	r27, r27
 8f0:	ee 1f       	adc	r30, r30
 8f2:	ff 1f       	adc	r31, r31
 8f4:	a2 17       	cp	r26, r18
 8f6:	b3 07       	cpc	r27, r19
 8f8:	e4 07       	cpc	r30, r20
 8fa:	f5 07       	cpc	r31, r21
 8fc:	20 f0       	brcs	.+8      	; 0x906 <__udivmodsi4_ep>
 8fe:	a2 1b       	sub	r26, r18
 900:	b3 0b       	sbc	r27, r19
 902:	e4 0b       	sbc	r30, r20
 904:	f5 0b       	sbc	r31, r21

00000906 <__udivmodsi4_ep>:
 906:	66 1f       	adc	r22, r22
 908:	77 1f       	adc	r23, r23
 90a:	88 1f       	adc	r24, r24
 90c:	99 1f       	adc	r25, r25
 90e:	1a 94       	dec	r1
 910:	69 f7       	brne	.-38     	; 0x8ec <__udivmodsi4_loop>
 912:	60 95       	com	r22
 914:	70 95       	com	r23
 916:	80 95       	com	r24
 918:	90 95       	com	r25
 91a:	9b 01       	movw	r18, r22
 91c:	ac 01       	movw	r20, r24
 91e:	bd 01       	movw	r22, r26
 920:	cf 01       	movw	r24, r30
 922:	08 95       	ret

00000924 <sprintf>:
 924:	ae e0       	ldi	r26, 0x0E	; 14
 926:	b0 e0       	ldi	r27, 0x00	; 0
 928:	e8 e9       	ldi	r30, 0x98	; 152
 92a:	f4 e0       	ldi	r31, 0x04	; 4
 92c:	0c 94 53 07 	jmp	0xea6	; 0xea6 <__prologue_saves__+0x1c>
 930:	0d 89       	ldd	r16, Y+21	; 0x15
 932:	1e 89       	ldd	r17, Y+22	; 0x16
 934:	86 e0       	ldi	r24, 0x06	; 6
 936:	8c 83       	std	Y+4, r24	; 0x04
 938:	1a 83       	std	Y+2, r17	; 0x02
 93a:	09 83       	std	Y+1, r16	; 0x01
 93c:	8f ef       	ldi	r24, 0xFF	; 255
 93e:	9f e7       	ldi	r25, 0x7F	; 127
 940:	9e 83       	std	Y+6, r25	; 0x06
 942:	8d 83       	std	Y+5, r24	; 0x05
 944:	ae 01       	movw	r20, r28
 946:	47 5e       	subi	r20, 0xE7	; 231
 948:	5f 4f       	sbci	r21, 0xFF	; 255
 94a:	6f 89       	ldd	r22, Y+23	; 0x17
 94c:	78 8d       	ldd	r23, Y+24	; 0x18
 94e:	ce 01       	movw	r24, r28
 950:	01 96       	adiw	r24, 0x01	; 1
 952:	0e 94 b4 04 	call	0x968	; 0x968 <vfprintf>
 956:	ef 81       	ldd	r30, Y+7	; 0x07
 958:	f8 85       	ldd	r31, Y+8	; 0x08
 95a:	e0 0f       	add	r30, r16
 95c:	f1 1f       	adc	r31, r17
 95e:	10 82       	st	Z, r1
 960:	2e 96       	adiw	r28, 0x0e	; 14
 962:	e4 e0       	ldi	r30, 0x04	; 4
 964:	0c 94 6f 07 	jmp	0xede	; 0xede <__epilogue_restores__+0x1c>

00000968 <vfprintf>:
 968:	ab e0       	ldi	r26, 0x0B	; 11
 96a:	b0 e0       	ldi	r27, 0x00	; 0
 96c:	ea eb       	ldi	r30, 0xBA	; 186
 96e:	f4 e0       	ldi	r31, 0x04	; 4
 970:	0c 94 45 07 	jmp	0xe8a	; 0xe8a <__prologue_saves__>
 974:	6c 01       	movw	r12, r24
 976:	7b 01       	movw	r14, r22
 978:	8a 01       	movw	r16, r20
 97a:	fc 01       	movw	r30, r24
 97c:	17 82       	std	Z+7, r1	; 0x07
 97e:	16 82       	std	Z+6, r1	; 0x06
 980:	83 81       	ldd	r24, Z+3	; 0x03
 982:	81 ff       	sbrs	r24, 1
 984:	cc c1       	rjmp	.+920    	; 0xd1e <vfprintf+0x3b6>
 986:	ce 01       	movw	r24, r28
 988:	01 96       	adiw	r24, 0x01	; 1
 98a:	3c 01       	movw	r6, r24
 98c:	f6 01       	movw	r30, r12
 98e:	93 81       	ldd	r25, Z+3	; 0x03
 990:	f7 01       	movw	r30, r14
 992:	93 fd       	sbrc	r25, 3
 994:	85 91       	lpm	r24, Z+
 996:	93 ff       	sbrs	r25, 3
 998:	81 91       	ld	r24, Z+
 99a:	7f 01       	movw	r14, r30
 99c:	88 23       	and	r24, r24
 99e:	09 f4       	brne	.+2      	; 0x9a2 <vfprintf+0x3a>
 9a0:	ba c1       	rjmp	.+884    	; 0xd16 <vfprintf+0x3ae>
 9a2:	85 32       	cpi	r24, 0x25	; 37
 9a4:	39 f4       	brne	.+14     	; 0x9b4 <vfprintf+0x4c>
 9a6:	93 fd       	sbrc	r25, 3
 9a8:	85 91       	lpm	r24, Z+
 9aa:	93 ff       	sbrs	r25, 3
 9ac:	81 91       	ld	r24, Z+
 9ae:	7f 01       	movw	r14, r30
 9b0:	85 32       	cpi	r24, 0x25	; 37
 9b2:	29 f4       	brne	.+10     	; 0x9be <vfprintf+0x56>
 9b4:	b6 01       	movw	r22, r12
 9b6:	90 e0       	ldi	r25, 0x00	; 0
 9b8:	0e 94 ab 06 	call	0xd56	; 0xd56 <fputc>
 9bc:	e7 cf       	rjmp	.-50     	; 0x98c <vfprintf+0x24>
 9be:	91 2c       	mov	r9, r1
 9c0:	21 2c       	mov	r2, r1
 9c2:	31 2c       	mov	r3, r1
 9c4:	ff e1       	ldi	r31, 0x1F	; 31
 9c6:	f3 15       	cp	r31, r3
 9c8:	d8 f0       	brcs	.+54     	; 0xa00 <vfprintf+0x98>
 9ca:	8b 32       	cpi	r24, 0x2B	; 43
 9cc:	79 f0       	breq	.+30     	; 0x9ec <vfprintf+0x84>
 9ce:	38 f4       	brcc	.+14     	; 0x9de <vfprintf+0x76>
 9d0:	80 32       	cpi	r24, 0x20	; 32
 9d2:	79 f0       	breq	.+30     	; 0x9f2 <vfprintf+0x8a>
 9d4:	83 32       	cpi	r24, 0x23	; 35
 9d6:	a1 f4       	brne	.+40     	; 0xa00 <vfprintf+0x98>
 9d8:	23 2d       	mov	r18, r3
 9da:	20 61       	ori	r18, 0x10	; 16
 9dc:	1d c0       	rjmp	.+58     	; 0xa18 <vfprintf+0xb0>
 9de:	8d 32       	cpi	r24, 0x2D	; 45
 9e0:	61 f0       	breq	.+24     	; 0x9fa <vfprintf+0x92>
 9e2:	80 33       	cpi	r24, 0x30	; 48
 9e4:	69 f4       	brne	.+26     	; 0xa00 <vfprintf+0x98>
 9e6:	23 2d       	mov	r18, r3
 9e8:	21 60       	ori	r18, 0x01	; 1
 9ea:	16 c0       	rjmp	.+44     	; 0xa18 <vfprintf+0xb0>
 9ec:	83 2d       	mov	r24, r3
 9ee:	82 60       	ori	r24, 0x02	; 2
 9f0:	38 2e       	mov	r3, r24
 9f2:	e3 2d       	mov	r30, r3
 9f4:	e4 60       	ori	r30, 0x04	; 4
 9f6:	3e 2e       	mov	r3, r30
 9f8:	2a c0       	rjmp	.+84     	; 0xa4e <vfprintf+0xe6>
 9fa:	f3 2d       	mov	r31, r3
 9fc:	f8 60       	ori	r31, 0x08	; 8
 9fe:	1d c0       	rjmp	.+58     	; 0xa3a <vfprintf+0xd2>
 a00:	37 fc       	sbrc	r3, 7
 a02:	2d c0       	rjmp	.+90     	; 0xa5e <vfprintf+0xf6>
 a04:	20 ed       	ldi	r18, 0xD0	; 208
 a06:	28 0f       	add	r18, r24
 a08:	2a 30       	cpi	r18, 0x0A	; 10
 a0a:	40 f0       	brcs	.+16     	; 0xa1c <vfprintf+0xb4>
 a0c:	8e 32       	cpi	r24, 0x2E	; 46
 a0e:	b9 f4       	brne	.+46     	; 0xa3e <vfprintf+0xd6>
 a10:	36 fc       	sbrc	r3, 6
 a12:	81 c1       	rjmp	.+770    	; 0xd16 <vfprintf+0x3ae>
 a14:	23 2d       	mov	r18, r3
 a16:	20 64       	ori	r18, 0x40	; 64
 a18:	32 2e       	mov	r3, r18
 a1a:	19 c0       	rjmp	.+50     	; 0xa4e <vfprintf+0xe6>
 a1c:	36 fe       	sbrs	r3, 6
 a1e:	06 c0       	rjmp	.+12     	; 0xa2c <vfprintf+0xc4>
 a20:	8a e0       	ldi	r24, 0x0A	; 10
 a22:	98 9e       	mul	r9, r24
 a24:	20 0d       	add	r18, r0
 a26:	11 24       	eor	r1, r1
 a28:	92 2e       	mov	r9, r18
 a2a:	11 c0       	rjmp	.+34     	; 0xa4e <vfprintf+0xe6>
 a2c:	ea e0       	ldi	r30, 0x0A	; 10
 a2e:	2e 9e       	mul	r2, r30
 a30:	20 0d       	add	r18, r0
 a32:	11 24       	eor	r1, r1
 a34:	22 2e       	mov	r2, r18
 a36:	f3 2d       	mov	r31, r3
 a38:	f0 62       	ori	r31, 0x20	; 32
 a3a:	3f 2e       	mov	r3, r31
 a3c:	08 c0       	rjmp	.+16     	; 0xa4e <vfprintf+0xe6>
 a3e:	8c 36       	cpi	r24, 0x6C	; 108
 a40:	21 f4       	brne	.+8      	; 0xa4a <vfprintf+0xe2>
 a42:	83 2d       	mov	r24, r3
 a44:	80 68       	ori	r24, 0x80	; 128
 a46:	38 2e       	mov	r3, r24
 a48:	02 c0       	rjmp	.+4      	; 0xa4e <vfprintf+0xe6>
 a4a:	88 36       	cpi	r24, 0x68	; 104
 a4c:	41 f4       	brne	.+16     	; 0xa5e <vfprintf+0xf6>
 a4e:	f7 01       	movw	r30, r14
 a50:	93 fd       	sbrc	r25, 3
 a52:	85 91       	lpm	r24, Z+
 a54:	93 ff       	sbrs	r25, 3
 a56:	81 91       	ld	r24, Z+
 a58:	7f 01       	movw	r14, r30
 a5a:	81 11       	cpse	r24, r1
 a5c:	b3 cf       	rjmp	.-154    	; 0x9c4 <vfprintf+0x5c>
 a5e:	98 2f       	mov	r25, r24
 a60:	9f 7d       	andi	r25, 0xDF	; 223
 a62:	95 54       	subi	r25, 0x45	; 69
 a64:	93 30       	cpi	r25, 0x03	; 3
 a66:	28 f4       	brcc	.+10     	; 0xa72 <vfprintf+0x10a>
 a68:	0c 5f       	subi	r16, 0xFC	; 252
 a6a:	1f 4f       	sbci	r17, 0xFF	; 255
 a6c:	9f e3       	ldi	r25, 0x3F	; 63
 a6e:	99 83       	std	Y+1, r25	; 0x01
 a70:	0d c0       	rjmp	.+26     	; 0xa8c <vfprintf+0x124>
 a72:	83 36       	cpi	r24, 0x63	; 99
 a74:	31 f0       	breq	.+12     	; 0xa82 <vfprintf+0x11a>
 a76:	83 37       	cpi	r24, 0x73	; 115
 a78:	71 f0       	breq	.+28     	; 0xa96 <vfprintf+0x12e>
 a7a:	83 35       	cpi	r24, 0x53	; 83
 a7c:	09 f0       	breq	.+2      	; 0xa80 <vfprintf+0x118>
 a7e:	59 c0       	rjmp	.+178    	; 0xb32 <vfprintf+0x1ca>
 a80:	21 c0       	rjmp	.+66     	; 0xac4 <vfprintf+0x15c>
 a82:	f8 01       	movw	r30, r16
 a84:	80 81       	ld	r24, Z
 a86:	89 83       	std	Y+1, r24	; 0x01
 a88:	0e 5f       	subi	r16, 0xFE	; 254
 a8a:	1f 4f       	sbci	r17, 0xFF	; 255
 a8c:	88 24       	eor	r8, r8
 a8e:	83 94       	inc	r8
 a90:	91 2c       	mov	r9, r1
 a92:	53 01       	movw	r10, r6
 a94:	13 c0       	rjmp	.+38     	; 0xabc <vfprintf+0x154>
 a96:	28 01       	movw	r4, r16
 a98:	f2 e0       	ldi	r31, 0x02	; 2
 a9a:	4f 0e       	add	r4, r31
 a9c:	51 1c       	adc	r5, r1
 a9e:	f8 01       	movw	r30, r16
 aa0:	a0 80       	ld	r10, Z
 aa2:	b1 80       	ldd	r11, Z+1	; 0x01
 aa4:	36 fe       	sbrs	r3, 6
 aa6:	03 c0       	rjmp	.+6      	; 0xaae <vfprintf+0x146>
 aa8:	69 2d       	mov	r22, r9
 aaa:	70 e0       	ldi	r23, 0x00	; 0
 aac:	02 c0       	rjmp	.+4      	; 0xab2 <vfprintf+0x14a>
 aae:	6f ef       	ldi	r22, 0xFF	; 255
 ab0:	7f ef       	ldi	r23, 0xFF	; 255
 ab2:	c5 01       	movw	r24, r10
 ab4:	0e 94 a0 06 	call	0xd40	; 0xd40 <strnlen>
 ab8:	4c 01       	movw	r8, r24
 aba:	82 01       	movw	r16, r4
 abc:	f3 2d       	mov	r31, r3
 abe:	ff 77       	andi	r31, 0x7F	; 127
 ac0:	3f 2e       	mov	r3, r31
 ac2:	16 c0       	rjmp	.+44     	; 0xaf0 <vfprintf+0x188>
 ac4:	28 01       	movw	r4, r16
 ac6:	22 e0       	ldi	r18, 0x02	; 2
 ac8:	42 0e       	add	r4, r18
 aca:	51 1c       	adc	r5, r1
 acc:	f8 01       	movw	r30, r16
 ace:	a0 80       	ld	r10, Z
 ad0:	b1 80       	ldd	r11, Z+1	; 0x01
 ad2:	36 fe       	sbrs	r3, 6
 ad4:	03 c0       	rjmp	.+6      	; 0xadc <vfprintf+0x174>
 ad6:	69 2d       	mov	r22, r9
 ad8:	70 e0       	ldi	r23, 0x00	; 0
 ada:	02 c0       	rjmp	.+4      	; 0xae0 <vfprintf+0x178>
 adc:	6f ef       	ldi	r22, 0xFF	; 255
 ade:	7f ef       	ldi	r23, 0xFF	; 255
 ae0:	c5 01       	movw	r24, r10
 ae2:	0e 94 95 06 	call	0xd2a	; 0xd2a <strnlen_P>
 ae6:	4c 01       	movw	r8, r24
 ae8:	f3 2d       	mov	r31, r3
 aea:	f0 68       	ori	r31, 0x80	; 128
 aec:	3f 2e       	mov	r3, r31
 aee:	82 01       	movw	r16, r4
 af0:	33 fc       	sbrc	r3, 3
 af2:	1b c0       	rjmp	.+54     	; 0xb2a <vfprintf+0x1c2>
 af4:	82 2d       	mov	r24, r2
 af6:	90 e0       	ldi	r25, 0x00	; 0
 af8:	88 16       	cp	r8, r24
 afa:	99 06       	cpc	r9, r25
 afc:	b0 f4       	brcc	.+44     	; 0xb2a <vfprintf+0x1c2>
 afe:	b6 01       	movw	r22, r12
 b00:	80 e2       	ldi	r24, 0x20	; 32
 b02:	90 e0       	ldi	r25, 0x00	; 0
 b04:	0e 94 ab 06 	call	0xd56	; 0xd56 <fputc>
 b08:	2a 94       	dec	r2
 b0a:	f4 cf       	rjmp	.-24     	; 0xaf4 <vfprintf+0x18c>
 b0c:	f5 01       	movw	r30, r10
 b0e:	37 fc       	sbrc	r3, 7
 b10:	85 91       	lpm	r24, Z+
 b12:	37 fe       	sbrs	r3, 7
 b14:	81 91       	ld	r24, Z+
 b16:	5f 01       	movw	r10, r30
 b18:	b6 01       	movw	r22, r12
 b1a:	90 e0       	ldi	r25, 0x00	; 0
 b1c:	0e 94 ab 06 	call	0xd56	; 0xd56 <fputc>
 b20:	21 10       	cpse	r2, r1
 b22:	2a 94       	dec	r2
 b24:	21 e0       	ldi	r18, 0x01	; 1
 b26:	82 1a       	sub	r8, r18
 b28:	91 08       	sbc	r9, r1
 b2a:	81 14       	cp	r8, r1
 b2c:	91 04       	cpc	r9, r1
 b2e:	71 f7       	brne	.-36     	; 0xb0c <vfprintf+0x1a4>
 b30:	e8 c0       	rjmp	.+464    	; 0xd02 <vfprintf+0x39a>
 b32:	84 36       	cpi	r24, 0x64	; 100
 b34:	11 f0       	breq	.+4      	; 0xb3a <vfprintf+0x1d2>
 b36:	89 36       	cpi	r24, 0x69	; 105
 b38:	41 f5       	brne	.+80     	; 0xb8a <vfprintf+0x222>
 b3a:	f8 01       	movw	r30, r16
 b3c:	37 fe       	sbrs	r3, 7
 b3e:	07 c0       	rjmp	.+14     	; 0xb4e <vfprintf+0x1e6>
 b40:	60 81       	ld	r22, Z
 b42:	71 81       	ldd	r23, Z+1	; 0x01
 b44:	82 81       	ldd	r24, Z+2	; 0x02
 b46:	93 81       	ldd	r25, Z+3	; 0x03
 b48:	0c 5f       	subi	r16, 0xFC	; 252
 b4a:	1f 4f       	sbci	r17, 0xFF	; 255
 b4c:	08 c0       	rjmp	.+16     	; 0xb5e <vfprintf+0x1f6>
 b4e:	60 81       	ld	r22, Z
 b50:	71 81       	ldd	r23, Z+1	; 0x01
 b52:	07 2e       	mov	r0, r23
 b54:	00 0c       	add	r0, r0
 b56:	88 0b       	sbc	r24, r24
 b58:	99 0b       	sbc	r25, r25
 b5a:	0e 5f       	subi	r16, 0xFE	; 254
 b5c:	1f 4f       	sbci	r17, 0xFF	; 255
 b5e:	f3 2d       	mov	r31, r3
 b60:	ff 76       	andi	r31, 0x6F	; 111
 b62:	3f 2e       	mov	r3, r31
 b64:	97 ff       	sbrs	r25, 7
 b66:	09 c0       	rjmp	.+18     	; 0xb7a <vfprintf+0x212>
 b68:	90 95       	com	r25
 b6a:	80 95       	com	r24
 b6c:	70 95       	com	r23
 b6e:	61 95       	neg	r22
 b70:	7f 4f       	sbci	r23, 0xFF	; 255
 b72:	8f 4f       	sbci	r24, 0xFF	; 255
 b74:	9f 4f       	sbci	r25, 0xFF	; 255
 b76:	f0 68       	ori	r31, 0x80	; 128
 b78:	3f 2e       	mov	r3, r31
 b7a:	2a e0       	ldi	r18, 0x0A	; 10
 b7c:	30 e0       	ldi	r19, 0x00	; 0
 b7e:	a3 01       	movw	r20, r6
 b80:	0e 94 e7 06 	call	0xdce	; 0xdce <__ultoa_invert>
 b84:	88 2e       	mov	r8, r24
 b86:	86 18       	sub	r8, r6
 b88:	45 c0       	rjmp	.+138    	; 0xc14 <vfprintf+0x2ac>
 b8a:	85 37       	cpi	r24, 0x75	; 117
 b8c:	31 f4       	brne	.+12     	; 0xb9a <vfprintf+0x232>
 b8e:	23 2d       	mov	r18, r3
 b90:	2f 7e       	andi	r18, 0xEF	; 239
 b92:	b2 2e       	mov	r11, r18
 b94:	2a e0       	ldi	r18, 0x0A	; 10
 b96:	30 e0       	ldi	r19, 0x00	; 0
 b98:	25 c0       	rjmp	.+74     	; 0xbe4 <vfprintf+0x27c>
 b9a:	93 2d       	mov	r25, r3
 b9c:	99 7f       	andi	r25, 0xF9	; 249
 b9e:	b9 2e       	mov	r11, r25
 ba0:	8f 36       	cpi	r24, 0x6F	; 111
 ba2:	c1 f0       	breq	.+48     	; 0xbd4 <vfprintf+0x26c>
 ba4:	18 f4       	brcc	.+6      	; 0xbac <vfprintf+0x244>
 ba6:	88 35       	cpi	r24, 0x58	; 88
 ba8:	79 f0       	breq	.+30     	; 0xbc8 <vfprintf+0x260>
 baa:	b5 c0       	rjmp	.+362    	; 0xd16 <vfprintf+0x3ae>
 bac:	80 37       	cpi	r24, 0x70	; 112
 bae:	19 f0       	breq	.+6      	; 0xbb6 <vfprintf+0x24e>
 bb0:	88 37       	cpi	r24, 0x78	; 120
 bb2:	21 f0       	breq	.+8      	; 0xbbc <vfprintf+0x254>
 bb4:	b0 c0       	rjmp	.+352    	; 0xd16 <vfprintf+0x3ae>
 bb6:	e9 2f       	mov	r30, r25
 bb8:	e0 61       	ori	r30, 0x10	; 16
 bba:	be 2e       	mov	r11, r30
 bbc:	b4 fe       	sbrs	r11, 4
 bbe:	0d c0       	rjmp	.+26     	; 0xbda <vfprintf+0x272>
 bc0:	fb 2d       	mov	r31, r11
 bc2:	f4 60       	ori	r31, 0x04	; 4
 bc4:	bf 2e       	mov	r11, r31
 bc6:	09 c0       	rjmp	.+18     	; 0xbda <vfprintf+0x272>
 bc8:	34 fe       	sbrs	r3, 4
 bca:	0a c0       	rjmp	.+20     	; 0xbe0 <vfprintf+0x278>
 bcc:	29 2f       	mov	r18, r25
 bce:	26 60       	ori	r18, 0x06	; 6
 bd0:	b2 2e       	mov	r11, r18
 bd2:	06 c0       	rjmp	.+12     	; 0xbe0 <vfprintf+0x278>
 bd4:	28 e0       	ldi	r18, 0x08	; 8
 bd6:	30 e0       	ldi	r19, 0x00	; 0
 bd8:	05 c0       	rjmp	.+10     	; 0xbe4 <vfprintf+0x27c>
 bda:	20 e1       	ldi	r18, 0x10	; 16
 bdc:	30 e0       	ldi	r19, 0x00	; 0
 bde:	02 c0       	rjmp	.+4      	; 0xbe4 <vfprintf+0x27c>
 be0:	20 e1       	ldi	r18, 0x10	; 16
 be2:	32 e0       	ldi	r19, 0x02	; 2
 be4:	f8 01       	movw	r30, r16
 be6:	b7 fe       	sbrs	r11, 7
 be8:	07 c0       	rjmp	.+14     	; 0xbf8 <vfprintf+0x290>
 bea:	60 81       	ld	r22, Z
 bec:	71 81       	ldd	r23, Z+1	; 0x01
 bee:	82 81       	ldd	r24, Z+2	; 0x02
 bf0:	93 81       	ldd	r25, Z+3	; 0x03
 bf2:	0c 5f       	subi	r16, 0xFC	; 252
 bf4:	1f 4f       	sbci	r17, 0xFF	; 255
 bf6:	06 c0       	rjmp	.+12     	; 0xc04 <vfprintf+0x29c>
 bf8:	60 81       	ld	r22, Z
 bfa:	71 81       	ldd	r23, Z+1	; 0x01
 bfc:	80 e0       	ldi	r24, 0x00	; 0
 bfe:	90 e0       	ldi	r25, 0x00	; 0
 c00:	0e 5f       	subi	r16, 0xFE	; 254
 c02:	1f 4f       	sbci	r17, 0xFF	; 255
 c04:	a3 01       	movw	r20, r6
 c06:	0e 94 e7 06 	call	0xdce	; 0xdce <__ultoa_invert>
 c0a:	88 2e       	mov	r8, r24
 c0c:	86 18       	sub	r8, r6
 c0e:	fb 2d       	mov	r31, r11
 c10:	ff 77       	andi	r31, 0x7F	; 127
 c12:	3f 2e       	mov	r3, r31
 c14:	36 fe       	sbrs	r3, 6
 c16:	0d c0       	rjmp	.+26     	; 0xc32 <vfprintf+0x2ca>
 c18:	23 2d       	mov	r18, r3
 c1a:	2e 7f       	andi	r18, 0xFE	; 254
 c1c:	a2 2e       	mov	r10, r18
 c1e:	89 14       	cp	r8, r9
 c20:	58 f4       	brcc	.+22     	; 0xc38 <vfprintf+0x2d0>
 c22:	34 fe       	sbrs	r3, 4
 c24:	0b c0       	rjmp	.+22     	; 0xc3c <vfprintf+0x2d4>
 c26:	32 fc       	sbrc	r3, 2
 c28:	09 c0       	rjmp	.+18     	; 0xc3c <vfprintf+0x2d4>
 c2a:	83 2d       	mov	r24, r3
 c2c:	8e 7e       	andi	r24, 0xEE	; 238
 c2e:	a8 2e       	mov	r10, r24
 c30:	05 c0       	rjmp	.+10     	; 0xc3c <vfprintf+0x2d4>
 c32:	b8 2c       	mov	r11, r8
 c34:	a3 2c       	mov	r10, r3
 c36:	03 c0       	rjmp	.+6      	; 0xc3e <vfprintf+0x2d6>
 c38:	b8 2c       	mov	r11, r8
 c3a:	01 c0       	rjmp	.+2      	; 0xc3e <vfprintf+0x2d6>
 c3c:	b9 2c       	mov	r11, r9
 c3e:	a4 fe       	sbrs	r10, 4
 c40:	0f c0       	rjmp	.+30     	; 0xc60 <vfprintf+0x2f8>
 c42:	fe 01       	movw	r30, r28
 c44:	e8 0d       	add	r30, r8
 c46:	f1 1d       	adc	r31, r1
 c48:	80 81       	ld	r24, Z
 c4a:	80 33       	cpi	r24, 0x30	; 48
 c4c:	21 f4       	brne	.+8      	; 0xc56 <vfprintf+0x2ee>
 c4e:	9a 2d       	mov	r25, r10
 c50:	99 7e       	andi	r25, 0xE9	; 233
 c52:	a9 2e       	mov	r10, r25
 c54:	09 c0       	rjmp	.+18     	; 0xc68 <vfprintf+0x300>
 c56:	a2 fe       	sbrs	r10, 2
 c58:	06 c0       	rjmp	.+12     	; 0xc66 <vfprintf+0x2fe>
 c5a:	b3 94       	inc	r11
 c5c:	b3 94       	inc	r11
 c5e:	04 c0       	rjmp	.+8      	; 0xc68 <vfprintf+0x300>
 c60:	8a 2d       	mov	r24, r10
 c62:	86 78       	andi	r24, 0x86	; 134
 c64:	09 f0       	breq	.+2      	; 0xc68 <vfprintf+0x300>
 c66:	b3 94       	inc	r11
 c68:	a3 fc       	sbrc	r10, 3
 c6a:	11 c0       	rjmp	.+34     	; 0xc8e <vfprintf+0x326>
 c6c:	a0 fe       	sbrs	r10, 0
 c6e:	06 c0       	rjmp	.+12     	; 0xc7c <vfprintf+0x314>
 c70:	b2 14       	cp	r11, r2
 c72:	88 f4       	brcc	.+34     	; 0xc96 <vfprintf+0x32e>
 c74:	28 0c       	add	r2, r8
 c76:	92 2c       	mov	r9, r2
 c78:	9b 18       	sub	r9, r11
 c7a:	0e c0       	rjmp	.+28     	; 0xc98 <vfprintf+0x330>
 c7c:	b2 14       	cp	r11, r2
 c7e:	60 f4       	brcc	.+24     	; 0xc98 <vfprintf+0x330>
 c80:	b6 01       	movw	r22, r12
 c82:	80 e2       	ldi	r24, 0x20	; 32
 c84:	90 e0       	ldi	r25, 0x00	; 0
 c86:	0e 94 ab 06 	call	0xd56	; 0xd56 <fputc>
 c8a:	b3 94       	inc	r11
 c8c:	f7 cf       	rjmp	.-18     	; 0xc7c <vfprintf+0x314>
 c8e:	b2 14       	cp	r11, r2
 c90:	18 f4       	brcc	.+6      	; 0xc98 <vfprintf+0x330>
 c92:	2b 18       	sub	r2, r11
 c94:	02 c0       	rjmp	.+4      	; 0xc9a <vfprintf+0x332>
 c96:	98 2c       	mov	r9, r8
 c98:	21 2c       	mov	r2, r1
 c9a:	a4 fe       	sbrs	r10, 4
 c9c:	10 c0       	rjmp	.+32     	; 0xcbe <vfprintf+0x356>
 c9e:	b6 01       	movw	r22, r12
 ca0:	80 e3       	ldi	r24, 0x30	; 48
 ca2:	90 e0       	ldi	r25, 0x00	; 0
 ca4:	0e 94 ab 06 	call	0xd56	; 0xd56 <fputc>
 ca8:	a2 fe       	sbrs	r10, 2
 caa:	17 c0       	rjmp	.+46     	; 0xcda <vfprintf+0x372>
 cac:	a1 fc       	sbrc	r10, 1
 cae:	03 c0       	rjmp	.+6      	; 0xcb6 <vfprintf+0x34e>
 cb0:	88 e7       	ldi	r24, 0x78	; 120
 cb2:	90 e0       	ldi	r25, 0x00	; 0
 cb4:	02 c0       	rjmp	.+4      	; 0xcba <vfprintf+0x352>
 cb6:	88 e5       	ldi	r24, 0x58	; 88
 cb8:	90 e0       	ldi	r25, 0x00	; 0
 cba:	b6 01       	movw	r22, r12
 cbc:	0c c0       	rjmp	.+24     	; 0xcd6 <vfprintf+0x36e>
 cbe:	8a 2d       	mov	r24, r10
 cc0:	86 78       	andi	r24, 0x86	; 134
 cc2:	59 f0       	breq	.+22     	; 0xcda <vfprintf+0x372>
 cc4:	a1 fe       	sbrs	r10, 1
 cc6:	02 c0       	rjmp	.+4      	; 0xccc <vfprintf+0x364>
 cc8:	8b e2       	ldi	r24, 0x2B	; 43
 cca:	01 c0       	rjmp	.+2      	; 0xcce <vfprintf+0x366>
 ccc:	80 e2       	ldi	r24, 0x20	; 32
 cce:	a7 fc       	sbrc	r10, 7
 cd0:	8d e2       	ldi	r24, 0x2D	; 45
 cd2:	b6 01       	movw	r22, r12
 cd4:	90 e0       	ldi	r25, 0x00	; 0
 cd6:	0e 94 ab 06 	call	0xd56	; 0xd56 <fputc>
 cda:	89 14       	cp	r8, r9
 cdc:	38 f4       	brcc	.+14     	; 0xcec <vfprintf+0x384>
 cde:	b6 01       	movw	r22, r12
 ce0:	80 e3       	ldi	r24, 0x30	; 48
 ce2:	90 e0       	ldi	r25, 0x00	; 0
 ce4:	0e 94 ab 06 	call	0xd56	; 0xd56 <fputc>
 ce8:	9a 94       	dec	r9
 cea:	f7 cf       	rjmp	.-18     	; 0xcda <vfprintf+0x372>
 cec:	8a 94       	dec	r8
 cee:	f3 01       	movw	r30, r6
 cf0:	e8 0d       	add	r30, r8
 cf2:	f1 1d       	adc	r31, r1
 cf4:	80 81       	ld	r24, Z
 cf6:	b6 01       	movw	r22, r12
 cf8:	90 e0       	ldi	r25, 0x00	; 0
 cfa:	0e 94 ab 06 	call	0xd56	; 0xd56 <fputc>
 cfe:	81 10       	cpse	r8, r1
 d00:	f5 cf       	rjmp	.-22     	; 0xcec <vfprintf+0x384>
 d02:	22 20       	and	r2, r2
 d04:	09 f4       	brne	.+2      	; 0xd08 <vfprintf+0x3a0>
 d06:	42 ce       	rjmp	.-892    	; 0x98c <vfprintf+0x24>
 d08:	b6 01       	movw	r22, r12
 d0a:	80 e2       	ldi	r24, 0x20	; 32
 d0c:	90 e0       	ldi	r25, 0x00	; 0
 d0e:	0e 94 ab 06 	call	0xd56	; 0xd56 <fputc>
 d12:	2a 94       	dec	r2
 d14:	f6 cf       	rjmp	.-20     	; 0xd02 <vfprintf+0x39a>
 d16:	f6 01       	movw	r30, r12
 d18:	86 81       	ldd	r24, Z+6	; 0x06
 d1a:	97 81       	ldd	r25, Z+7	; 0x07
 d1c:	02 c0       	rjmp	.+4      	; 0xd22 <vfprintf+0x3ba>
 d1e:	8f ef       	ldi	r24, 0xFF	; 255
 d20:	9f ef       	ldi	r25, 0xFF	; 255
 d22:	2b 96       	adiw	r28, 0x0b	; 11
 d24:	e2 e1       	ldi	r30, 0x12	; 18
 d26:	0c 94 61 07 	jmp	0xec2	; 0xec2 <__epilogue_restores__>

00000d2a <strnlen_P>:
 d2a:	fc 01       	movw	r30, r24
 d2c:	05 90       	lpm	r0, Z+
 d2e:	61 50       	subi	r22, 0x01	; 1
 d30:	70 40       	sbci	r23, 0x00	; 0
 d32:	01 10       	cpse	r0, r1
 d34:	d8 f7       	brcc	.-10     	; 0xd2c <strnlen_P+0x2>
 d36:	80 95       	com	r24
 d38:	90 95       	com	r25
 d3a:	8e 0f       	add	r24, r30
 d3c:	9f 1f       	adc	r25, r31
 d3e:	08 95       	ret

00000d40 <strnlen>:
 d40:	fc 01       	movw	r30, r24
 d42:	61 50       	subi	r22, 0x01	; 1
 d44:	70 40       	sbci	r23, 0x00	; 0
 d46:	01 90       	ld	r0, Z+
 d48:	01 10       	cpse	r0, r1
 d4a:	d8 f7       	brcc	.-10     	; 0xd42 <strnlen+0x2>
 d4c:	80 95       	com	r24
 d4e:	90 95       	com	r25
 d50:	8e 0f       	add	r24, r30
 d52:	9f 1f       	adc	r25, r31
 d54:	08 95       	ret

00000d56 <fputc>:
 d56:	0f 93       	push	r16
 d58:	1f 93       	push	r17
 d5a:	cf 93       	push	r28
 d5c:	df 93       	push	r29
 d5e:	fb 01       	movw	r30, r22
 d60:	23 81       	ldd	r18, Z+3	; 0x03
 d62:	21 fd       	sbrc	r18, 1
 d64:	03 c0       	rjmp	.+6      	; 0xd6c <fputc+0x16>
 d66:	8f ef       	ldi	r24, 0xFF	; 255
 d68:	9f ef       	ldi	r25, 0xFF	; 255
 d6a:	2c c0       	rjmp	.+88     	; 0xdc4 <fputc+0x6e>
 d6c:	22 ff       	sbrs	r18, 2
 d6e:	16 c0       	rjmp	.+44     	; 0xd9c <fputc+0x46>
 d70:	46 81       	ldd	r20, Z+6	; 0x06
 d72:	57 81       	ldd	r21, Z+7	; 0x07
 d74:	24 81       	ldd	r18, Z+4	; 0x04
 d76:	35 81       	ldd	r19, Z+5	; 0x05
 d78:	42 17       	cp	r20, r18
 d7a:	53 07       	cpc	r21, r19
 d7c:	44 f4       	brge	.+16     	; 0xd8e <fputc+0x38>
 d7e:	a0 81       	ld	r26, Z
 d80:	b1 81       	ldd	r27, Z+1	; 0x01
 d82:	9d 01       	movw	r18, r26
 d84:	2f 5f       	subi	r18, 0xFF	; 255
 d86:	3f 4f       	sbci	r19, 0xFF	; 255
 d88:	31 83       	std	Z+1, r19	; 0x01
 d8a:	20 83       	st	Z, r18
 d8c:	8c 93       	st	X, r24
 d8e:	26 81       	ldd	r18, Z+6	; 0x06
 d90:	37 81       	ldd	r19, Z+7	; 0x07
 d92:	2f 5f       	subi	r18, 0xFF	; 255
 d94:	3f 4f       	sbci	r19, 0xFF	; 255
 d96:	37 83       	std	Z+7, r19	; 0x07
 d98:	26 83       	std	Z+6, r18	; 0x06
 d9a:	14 c0       	rjmp	.+40     	; 0xdc4 <fputc+0x6e>
 d9c:	8b 01       	movw	r16, r22
 d9e:	ec 01       	movw	r28, r24
 da0:	fb 01       	movw	r30, r22
 da2:	00 84       	ldd	r0, Z+8	; 0x08
 da4:	f1 85       	ldd	r31, Z+9	; 0x09
 da6:	e0 2d       	mov	r30, r0
 da8:	09 95       	icall
 daa:	89 2b       	or	r24, r25
 dac:	e1 f6       	brne	.-72     	; 0xd66 <fputc+0x10>
 dae:	d8 01       	movw	r26, r16
 db0:	16 96       	adiw	r26, 0x06	; 6
 db2:	8d 91       	ld	r24, X+
 db4:	9c 91       	ld	r25, X
 db6:	17 97       	sbiw	r26, 0x07	; 7
 db8:	01 96       	adiw	r24, 0x01	; 1
 dba:	17 96       	adiw	r26, 0x07	; 7
 dbc:	9c 93       	st	X, r25
 dbe:	8e 93       	st	-X, r24
 dc0:	16 97       	sbiw	r26, 0x06	; 6
 dc2:	ce 01       	movw	r24, r28
 dc4:	df 91       	pop	r29
 dc6:	cf 91       	pop	r28
 dc8:	1f 91       	pop	r17
 dca:	0f 91       	pop	r16
 dcc:	08 95       	ret

00000dce <__ultoa_invert>:
 dce:	fa 01       	movw	r30, r20
 dd0:	aa 27       	eor	r26, r26
 dd2:	28 30       	cpi	r18, 0x08	; 8
 dd4:	51 f1       	breq	.+84     	; 0xe2a <__ultoa_invert+0x5c>
 dd6:	20 31       	cpi	r18, 0x10	; 16
 dd8:	81 f1       	breq	.+96     	; 0xe3a <__ultoa_invert+0x6c>
 dda:	e8 94       	clt
 ddc:	6f 93       	push	r22
 dde:	6e 7f       	andi	r22, 0xFE	; 254
 de0:	6e 5f       	subi	r22, 0xFE	; 254
 de2:	7f 4f       	sbci	r23, 0xFF	; 255
 de4:	8f 4f       	sbci	r24, 0xFF	; 255
 de6:	9f 4f       	sbci	r25, 0xFF	; 255
 de8:	af 4f       	sbci	r26, 0xFF	; 255
 dea:	b1 e0       	ldi	r27, 0x01	; 1
 dec:	3e d0       	rcall	.+124    	; 0xe6a <__ultoa_invert+0x9c>
 dee:	b4 e0       	ldi	r27, 0x04	; 4
 df0:	3c d0       	rcall	.+120    	; 0xe6a <__ultoa_invert+0x9c>
 df2:	67 0f       	add	r22, r23
 df4:	78 1f       	adc	r23, r24
 df6:	89 1f       	adc	r24, r25
 df8:	9a 1f       	adc	r25, r26
 dfa:	a1 1d       	adc	r26, r1
 dfc:	68 0f       	add	r22, r24
 dfe:	79 1f       	adc	r23, r25
 e00:	8a 1f       	adc	r24, r26
 e02:	91 1d       	adc	r25, r1
 e04:	a1 1d       	adc	r26, r1
 e06:	6a 0f       	add	r22, r26
 e08:	71 1d       	adc	r23, r1
 e0a:	81 1d       	adc	r24, r1
 e0c:	91 1d       	adc	r25, r1
 e0e:	a1 1d       	adc	r26, r1
 e10:	20 d0       	rcall	.+64     	; 0xe52 <__ultoa_invert+0x84>
 e12:	09 f4       	brne	.+2      	; 0xe16 <__ultoa_invert+0x48>
 e14:	68 94       	set
 e16:	3f 91       	pop	r19
 e18:	2a e0       	ldi	r18, 0x0A	; 10
 e1a:	26 9f       	mul	r18, r22
 e1c:	11 24       	eor	r1, r1
 e1e:	30 19       	sub	r19, r0
 e20:	30 5d       	subi	r19, 0xD0	; 208
 e22:	31 93       	st	Z+, r19
 e24:	de f6       	brtc	.-74     	; 0xddc <__ultoa_invert+0xe>
 e26:	cf 01       	movw	r24, r30
 e28:	08 95       	ret
 e2a:	46 2f       	mov	r20, r22
 e2c:	47 70       	andi	r20, 0x07	; 7
 e2e:	40 5d       	subi	r20, 0xD0	; 208
 e30:	41 93       	st	Z+, r20
 e32:	b3 e0       	ldi	r27, 0x03	; 3
 e34:	0f d0       	rcall	.+30     	; 0xe54 <__ultoa_invert+0x86>
 e36:	c9 f7       	brne	.-14     	; 0xe2a <__ultoa_invert+0x5c>
 e38:	f6 cf       	rjmp	.-20     	; 0xe26 <__ultoa_invert+0x58>
 e3a:	46 2f       	mov	r20, r22
 e3c:	4f 70       	andi	r20, 0x0F	; 15
 e3e:	40 5d       	subi	r20, 0xD0	; 208
 e40:	4a 33       	cpi	r20, 0x3A	; 58
 e42:	18 f0       	brcs	.+6      	; 0xe4a <__ultoa_invert+0x7c>
 e44:	49 5d       	subi	r20, 0xD9	; 217
 e46:	31 fd       	sbrc	r19, 1
 e48:	40 52       	subi	r20, 0x20	; 32
 e4a:	41 93       	st	Z+, r20
 e4c:	02 d0       	rcall	.+4      	; 0xe52 <__ultoa_invert+0x84>
 e4e:	a9 f7       	brne	.-22     	; 0xe3a <__ultoa_invert+0x6c>
 e50:	ea cf       	rjmp	.-44     	; 0xe26 <__ultoa_invert+0x58>
 e52:	b4 e0       	ldi	r27, 0x04	; 4
 e54:	a6 95       	lsr	r26
 e56:	97 95       	ror	r25
 e58:	87 95       	ror	r24
 e5a:	77 95       	ror	r23
 e5c:	67 95       	ror	r22
 e5e:	ba 95       	dec	r27
 e60:	c9 f7       	brne	.-14     	; 0xe54 <__ultoa_invert+0x86>
 e62:	00 97       	sbiw	r24, 0x00	; 0
 e64:	61 05       	cpc	r22, r1
 e66:	71 05       	cpc	r23, r1
 e68:	08 95       	ret
 e6a:	9b 01       	movw	r18, r22
 e6c:	ac 01       	movw	r20, r24
 e6e:	0a 2e       	mov	r0, r26
 e70:	06 94       	lsr	r0
 e72:	57 95       	ror	r21
 e74:	47 95       	ror	r20
 e76:	37 95       	ror	r19
 e78:	27 95       	ror	r18
 e7a:	ba 95       	dec	r27
 e7c:	c9 f7       	brne	.-14     	; 0xe70 <__ultoa_invert+0xa2>
 e7e:	62 0f       	add	r22, r18
 e80:	73 1f       	adc	r23, r19
 e82:	84 1f       	adc	r24, r20
 e84:	95 1f       	adc	r25, r21
 e86:	a0 1d       	adc	r26, r0
 e88:	08 95       	ret

00000e8a <__prologue_saves__>:
 e8a:	2f 92       	push	r2
 e8c:	3f 92       	push	r3
 e8e:	4f 92       	push	r4
 e90:	5f 92       	push	r5
 e92:	6f 92       	push	r6
 e94:	7f 92       	push	r7
 e96:	8f 92       	push	r8
 e98:	9f 92       	push	r9
 e9a:	af 92       	push	r10
 e9c:	bf 92       	push	r11
 e9e:	cf 92       	push	r12
 ea0:	df 92       	push	r13
 ea2:	ef 92       	push	r14
 ea4:	ff 92       	push	r15
 ea6:	0f 93       	push	r16
 ea8:	1f 93       	push	r17
 eaa:	cf 93       	push	r28
 eac:	df 93       	push	r29
 eae:	cd b7       	in	r28, 0x3d	; 61
 eb0:	de b7       	in	r29, 0x3e	; 62
 eb2:	ca 1b       	sub	r28, r26
 eb4:	db 0b       	sbc	r29, r27
 eb6:	0f b6       	in	r0, 0x3f	; 63
 eb8:	f8 94       	cli
 eba:	de bf       	out	0x3e, r29	; 62
 ebc:	0f be       	out	0x3f, r0	; 63
 ebe:	cd bf       	out	0x3d, r28	; 61
 ec0:	09 94       	ijmp

00000ec2 <__epilogue_restores__>:
 ec2:	2a 88       	ldd	r2, Y+18	; 0x12
 ec4:	39 88       	ldd	r3, Y+17	; 0x11
 ec6:	48 88       	ldd	r4, Y+16	; 0x10
 ec8:	5f 84       	ldd	r5, Y+15	; 0x0f
 eca:	6e 84       	ldd	r6, Y+14	; 0x0e
 ecc:	7d 84       	ldd	r7, Y+13	; 0x0d
 ece:	8c 84       	ldd	r8, Y+12	; 0x0c
 ed0:	9b 84       	ldd	r9, Y+11	; 0x0b
 ed2:	aa 84       	ldd	r10, Y+10	; 0x0a
 ed4:	b9 84       	ldd	r11, Y+9	; 0x09
 ed6:	c8 84       	ldd	r12, Y+8	; 0x08
 ed8:	df 80       	ldd	r13, Y+7	; 0x07
 eda:	ee 80       	ldd	r14, Y+6	; 0x06
 edc:	fd 80       	ldd	r15, Y+5	; 0x05
 ede:	0c 81       	ldd	r16, Y+4	; 0x04
 ee0:	1b 81       	ldd	r17, Y+3	; 0x03
 ee2:	aa 81       	ldd	r26, Y+2	; 0x02
 ee4:	b9 81       	ldd	r27, Y+1	; 0x01
 ee6:	ce 0f       	add	r28, r30
 ee8:	d1 1d       	adc	r29, r1
 eea:	0f b6       	in	r0, 0x3f	; 63
 eec:	f8 94       	cli
 eee:	de bf       	out	0x3e, r29	; 62
 ef0:	0f be       	out	0x3f, r0	; 63
 ef2:	cd bf       	out	0x3d, r28	; 61
 ef4:	ed 01       	movw	r28, r26
 ef6:	08 95       	ret

00000ef8 <_exit>:
 ef8:	f8 94       	cli

00000efa <__stop_program>:
 efa:	ff cf       	rjmp	.-2      	; 0xefa <__stop_program>
