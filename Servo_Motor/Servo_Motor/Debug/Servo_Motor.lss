
Servo_Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b0e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00000b0e  00000b82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      0000005c  00000000  00000000  00000ba0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bfc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  00000c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fd4  00000000  00000000  00000d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000814  00000000  00000000  00001cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000814  00000000  00000000  00002508  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000017c  00000000  00000000  00002d1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c1  00000000  00000000  00002e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000465  00000000  00000000  00003359  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  000037be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e0       	ldi	r30, 0x0E	; 14
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include "DIO_Interface.h"
#include "UART_Interface.h"
#include "DC_MOTOR_Interface.h"

int main() {
	PWM_init();
  82:	0e 94 90 00 	call	0x120	; 0x120 <PWM_init>
	UART_init(9600);
  86:	80 e8       	ldi	r24, 0x80	; 128
  88:	95 e2       	ldi	r25, 0x25	; 37
  8a:	0e 94 29 02 	call	0x452	; 0x452 <UART_init>
	Motor_init();
  8e:	0e 94 a3 00 	call	0x146	; 0x146 <Motor_init>

	while (1) {
		// Right
		MoveRight();
  92:	0e 94 ee 00 	call	0x1dc	; 0x1dc <MoveRight>
		ShowingTheValue('R');
  96:	82 e5       	ldi	r24, 0x52	; 82
  98:	0e 94 45 02 	call	0x48a	; 0x48a <ShowingTheValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	2f ef       	ldi	r18, 0xFF	; 255
  9e:	83 ed       	ldi	r24, 0xD3	; 211
  a0:	90 e3       	ldi	r25, 0x30	; 48
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	80 40       	sbci	r24, 0x00	; 0
  a6:	90 40       	sbci	r25, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <main+0x20>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x2a>
  ac:	00 00       	nop
		_delay_ms(2000);

		// Left

		MoveLeft();
  ae:	0e 94 09 01 	call	0x212	; 0x212 <MoveLeft>
		ShowingTheValue('L');
  b2:	8c e4       	ldi	r24, 0x4C	; 76
  b4:	0e 94 45 02 	call	0x48a	; 0x48a <ShowingTheValue>
  b8:	2f ef       	ldi	r18, 0xFF	; 255
  ba:	83 ed       	ldi	r24, 0xD3	; 211
  bc:	90 e3       	ldi	r25, 0x30	; 48
  be:	21 50       	subi	r18, 0x01	; 1
  c0:	80 40       	sbci	r24, 0x00	; 0
  c2:	90 40       	sbci	r25, 0x00	; 0
  c4:	e1 f7       	brne	.-8      	; 0xbe <main+0x3c>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x46>
  c8:	00 00       	nop
		_delay_ms(2000);

		// Forward

		MoveForward();
  ca:	0e 94 b8 00 	call	0x170	; 0x170 <MoveForward>
		ShowingTheValue('F');
  ce:	86 e4       	ldi	r24, 0x46	; 70
  d0:	0e 94 45 02 	call	0x48a	; 0x48a <ShowingTheValue>
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	83 ed       	ldi	r24, 0xD3	; 211
  d8:	90 e3       	ldi	r25, 0x30	; 48
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x58>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x62>
  e4:	00 00       	nop
		_delay_ms(2000);

		// Backward

		MoveBackward();
  e6:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <MoveBackward>
		ShowingTheValue('B');
  ea:	82 e4       	ldi	r24, 0x42	; 66
  ec:	0e 94 45 02 	call	0x48a	; 0x48a <ShowingTheValue>
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	83 ed       	ldi	r24, 0xD3	; 211
  f4:	90 e3       	ldi	r25, 0x30	; 48
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x74>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x7e>
 100:	00 00       	nop
		_delay_ms(2000);

		// Stop
		Stop();
 102:	0e 94 24 01 	call	0x248	; 0x248 <Stop>
		ShowingTheValue('S');
 106:	83 e5       	ldi	r24, 0x53	; 83
 108:	0e 94 45 02 	call	0x48a	; 0x48a <ShowingTheValue>
 10c:	2f ef       	ldi	r18, 0xFF	; 255
 10e:	83 ed       	ldi	r24, 0xD3	; 211
 110:	90 e3       	ldi	r25, 0x30	; 48
 112:	21 50       	subi	r18, 0x01	; 1
 114:	80 40       	sbci	r24, 0x00	; 0
 116:	90 40       	sbci	r25, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <main+0x90>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x9a>
 11c:	00 00       	nop
 11e:	b9 cf       	rjmp	.-142    	; 0x92 <main+0x10>

00000120 <PWM_init>:
#include "TIMER_Private.h"

// PWM Initialization
void PWM_init() {
	
	DIO_SetPinDirection(PORT_C,PIN4,PIN_OUTPUT); //Output pins OCR1B (PD4)
 120:	41 e0       	ldi	r20, 0x01	; 1
 122:	64 e0       	ldi	r22, 0x04	; 4
 124:	83 e0       	ldi	r24, 0x03	; 3
 126:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_SetPinDirection>
	DIO_SetPinDirection(PORT_C,PIN5,PIN_OUTPUT); //Output pins OCR1A (PD5)
 12a:	41 e0       	ldi	r20, 0x01	; 1
 12c:	65 e0       	ldi	r22, 0x05	; 5
 12e:	83 e0       	ldi	r24, 0x03	; 3
 130:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_SetPinDirection>
	
	// Fast PWM Mode 14, Non-inverting
	TTCR1A = (1 << TTCR1A_COM1A1) | (1 << TTCR1A_COM1B1) | (1 << TTCR1A_WGM11);
 134:	82 ea       	ldi	r24, 0xA2	; 162
 136:	8f bd       	out	0x2f, r24	; 47
	TTCR1B = (1 << TTCR1B_WGM12) | (1 << TTCR1B_WGM13) | (1 << TTCR1B_CS11);  // Prescaler = 8
 138:	8a e1       	ldi	r24, 0x1A	; 26
 13a:	8e bd       	out	0x2e, r24	; 46

	ICR1 = 255;  // PWM 8-bit
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	98 bd       	out	0x28, r25	; 40
 142:	87 bd       	out	0x27, r24	; 39
 144:	08 95       	ret

00000146 <Motor_init>:
}

// Direction control via L298N (Connected to PORTC)

void Motor_init() {
	DIO_SetPinDirection(PORT_C,PIN0,PIN_OUTPUT); //Output pins IN1 (PD0)
 146:	41 e0       	ldi	r20, 0x01	; 1
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	83 e0       	ldi	r24, 0x03	; 3
 14c:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_SetPinDirection>
	DIO_SetPinDirection(PORT_C,PIN1,PIN_OUTPUT); //Output pins IN2 (PD1)
 150:	41 e0       	ldi	r20, 0x01	; 1
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	83 e0       	ldi	r24, 0x03	; 3
 156:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_SetPinDirection>
	DIO_SetPinDirection(PORT_C,PIN2,PIN_OUTPUT); //Output pins IN3 (PD2)
 15a:	41 e0       	ldi	r20, 0x01	; 1
 15c:	62 e0       	ldi	r22, 0x02	; 2
 15e:	83 e0       	ldi	r24, 0x03	; 3
 160:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_SetPinDirection>
	DIO_SetPinDirection(PORT_C,PIN3,PIN_OUTPUT); //Output pins IN4 (PD3)
 164:	41 e0       	ldi	r20, 0x01	; 1
 166:	63 e0       	ldi	r22, 0x03	; 3
 168:	83 e0       	ldi	r24, 0x03	; 3
 16a:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_SetPinDirection>
 16e:	08 95       	ret

00000170 <MoveForward>:
}

void MoveForward() {
	OCR1A=191;   // Left
 170:	8f eb       	ldi	r24, 0xBF	; 191
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	9c bd       	out	0x2c, r25	; 44
 176:	8b bd       	out	0x2b, r24	; 43
	OCR1B=191;   // Right
 178:	9a bd       	out	0x2a, r25	; 42
 17a:	89 bd       	out	0x29, r24	; 41
	
	DIO_SetPinValue(PORT_C,PIN0,PIN_HIGH);
 17c:	41 e0       	ldi	r20, 0x01	; 1
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	83 e0       	ldi	r24, 0x03	; 3
 182:	0e 94 b3 01 	call	0x366	; 0x366 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN2,PIN_HIGH);
 186:	41 e0       	ldi	r20, 0x01	; 1
 188:	62 e0       	ldi	r22, 0x02	; 2
 18a:	83 e0       	ldi	r24, 0x03	; 3
 18c:	0e 94 b3 01 	call	0x366	; 0x366 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN1,PIN_LOW);
 190:	40 e0       	ldi	r20, 0x00	; 0
 192:	61 e0       	ldi	r22, 0x01	; 1
 194:	83 e0       	ldi	r24, 0x03	; 3
 196:	0e 94 b3 01 	call	0x366	; 0x366 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN3,PIN_LOW);
 19a:	40 e0       	ldi	r20, 0x00	; 0
 19c:	63 e0       	ldi	r22, 0x03	; 3
 19e:	83 e0       	ldi	r24, 0x03	; 3
 1a0:	0e 94 b3 01 	call	0x366	; 0x366 <DIO_SetPinValue>
 1a4:	08 95       	ret

000001a6 <MoveBackward>:
}

void MoveBackward() {
	OCR1A=191;
 1a6:	8f eb       	ldi	r24, 0xBF	; 191
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	9c bd       	out	0x2c, r25	; 44
 1ac:	8b bd       	out	0x2b, r24	; 43
	OCR1B=191;
 1ae:	9a bd       	out	0x2a, r25	; 42
 1b0:	89 bd       	out	0x29, r24	; 41

	DIO_SetPinValue(PORT_C,PIN1,PIN_HIGH);
 1b2:	41 e0       	ldi	r20, 0x01	; 1
 1b4:	61 e0       	ldi	r22, 0x01	; 1
 1b6:	83 e0       	ldi	r24, 0x03	; 3
 1b8:	0e 94 b3 01 	call	0x366	; 0x366 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN3,PIN_HIGH);
 1bc:	41 e0       	ldi	r20, 0x01	; 1
 1be:	63 e0       	ldi	r22, 0x03	; 3
 1c0:	83 e0       	ldi	r24, 0x03	; 3
 1c2:	0e 94 b3 01 	call	0x366	; 0x366 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN0,PIN_LOW);
 1c6:	40 e0       	ldi	r20, 0x00	; 0
 1c8:	60 e0       	ldi	r22, 0x00	; 0
 1ca:	83 e0       	ldi	r24, 0x03	; 3
 1cc:	0e 94 b3 01 	call	0x366	; 0x366 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN2,PIN_LOW);
 1d0:	40 e0       	ldi	r20, 0x00	; 0
 1d2:	62 e0       	ldi	r22, 0x02	; 2
 1d4:	83 e0       	ldi	r24, 0x03	; 3
 1d6:	0e 94 b3 01 	call	0x366	; 0x366 <DIO_SetPinValue>
 1da:	08 95       	ret

000001dc <MoveRight>:
}

void MoveRight() {
	OCR1A=191;
 1dc:	8f eb       	ldi	r24, 0xBF	; 191
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	9c bd       	out	0x2c, r25	; 44
 1e2:	8b bd       	out	0x2b, r24	; 43
	OCR1B=0;
 1e4:	1a bc       	out	0x2a, r1	; 42
 1e6:	19 bc       	out	0x29, r1	; 41

	DIO_SetPinValue(PORT_C,PIN0,PIN_HIGH);  // Left Motor Forward
 1e8:	41 e0       	ldi	r20, 0x01	; 1
 1ea:	60 e0       	ldi	r22, 0x00	; 0
 1ec:	83 e0       	ldi	r24, 0x03	; 3
 1ee:	0e 94 b3 01 	call	0x366	; 0x366 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN1,PIN_LOW);
 1f2:	40 e0       	ldi	r20, 0x00	; 0
 1f4:	61 e0       	ldi	r22, 0x01	; 1
 1f6:	83 e0       	ldi	r24, 0x03	; 3
 1f8:	0e 94 b3 01 	call	0x366	; 0x366 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN2,PIN_LOW);  // Right Motor Stop
 1fc:	40 e0       	ldi	r20, 0x00	; 0
 1fe:	62 e0       	ldi	r22, 0x02	; 2
 200:	83 e0       	ldi	r24, 0x03	; 3
 202:	0e 94 b3 01 	call	0x366	; 0x366 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN3,PIN_LOW);
 206:	40 e0       	ldi	r20, 0x00	; 0
 208:	63 e0       	ldi	r22, 0x03	; 3
 20a:	83 e0       	ldi	r24, 0x03	; 3
 20c:	0e 94 b3 01 	call	0x366	; 0x366 <DIO_SetPinValue>
 210:	08 95       	ret

00000212 <MoveLeft>:

}

void MoveLeft() {
	OCR1A=0;
 212:	1c bc       	out	0x2c, r1	; 44
 214:	1b bc       	out	0x2b, r1	; 43
	OCR1B=191;
 216:	8f eb       	ldi	r24, 0xBF	; 191
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	9a bd       	out	0x2a, r25	; 42
 21c:	89 bd       	out	0x29, r24	; 41
	
	DIO_SetPinValue(PORT_C,PIN2,PIN_HIGH);  // Right Motor Forward
 21e:	41 e0       	ldi	r20, 0x01	; 1
 220:	62 e0       	ldi	r22, 0x02	; 2
 222:	83 e0       	ldi	r24, 0x03	; 3
 224:	0e 94 b3 01 	call	0x366	; 0x366 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN3,PIN_LOW);
 228:	40 e0       	ldi	r20, 0x00	; 0
 22a:	63 e0       	ldi	r22, 0x03	; 3
 22c:	83 e0       	ldi	r24, 0x03	; 3
 22e:	0e 94 b3 01 	call	0x366	; 0x366 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN0,PIN_LOW);  // Left Motor Stop
 232:	40 e0       	ldi	r20, 0x00	; 0
 234:	60 e0       	ldi	r22, 0x00	; 0
 236:	83 e0       	ldi	r24, 0x03	; 3
 238:	0e 94 b3 01 	call	0x366	; 0x366 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN1,PIN_LOW);
 23c:	40 e0       	ldi	r20, 0x00	; 0
 23e:	61 e0       	ldi	r22, 0x01	; 1
 240:	83 e0       	ldi	r24, 0x03	; 3
 242:	0e 94 b3 01 	call	0x366	; 0x366 <DIO_SetPinValue>
 246:	08 95       	ret

00000248 <Stop>:
}

void Stop() {
	OCR1A=0;
 248:	1c bc       	out	0x2c, r1	; 44
 24a:	1b bc       	out	0x2b, r1	; 43
	OCR1B=0;
 24c:	1a bc       	out	0x2a, r1	; 42
 24e:	19 bc       	out	0x29, r1	; 41
	// All motors stop
	DIO_SetPinValue(PORT_C,PIN0,PIN_LOW);
 250:	40 e0       	ldi	r20, 0x00	; 0
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	83 e0       	ldi	r24, 0x03	; 3
 256:	0e 94 b3 01 	call	0x366	; 0x366 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN1,PIN_LOW);
 25a:	40 e0       	ldi	r20, 0x00	; 0
 25c:	61 e0       	ldi	r22, 0x01	; 1
 25e:	83 e0       	ldi	r24, 0x03	; 3
 260:	0e 94 b3 01 	call	0x366	; 0x366 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN2,PIN_LOW);
 264:	40 e0       	ldi	r20, 0x00	; 0
 266:	62 e0       	ldi	r22, 0x02	; 2
 268:	83 e0       	ldi	r24, 0x03	; 3
 26a:	0e 94 b3 01 	call	0x366	; 0x366 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN3,PIN_LOW);
 26e:	40 e0       	ldi	r20, 0x00	; 0
 270:	63 e0       	ldi	r22, 0x03	; 3
 272:	83 e0       	ldi	r24, 0x03	; 3
 274:	0e 94 b3 01 	call	0x366	; 0x366 <DIO_SetPinValue>
 278:	08 95       	ret

0000027a <DIO_SetPinDirection>:

/* Function definitions that deals with pins */

void DIO_SetPinDirection(u8 PortName,u8 PinNumber,u8 PinDirection)
{
	if(PinDirection==PIN_OUTPUT)
 27a:	41 30       	cpi	r20, 0x01	; 1
 27c:	b9 f5       	brne	.+110    	; 0x2ec <DIO_SetPinDirection+0x72>
	{
		switch(PortName)
 27e:	82 30       	cpi	r24, 0x02	; 2
 280:	a1 f0       	breq	.+40     	; 0x2aa <DIO_SetPinDirection+0x30>
 282:	18 f4       	brcc	.+6      	; 0x28a <DIO_SetPinDirection+0x10>
 284:	81 30       	cpi	r24, 0x01	; 1
 286:	31 f0       	breq	.+12     	; 0x294 <DIO_SetPinDirection+0x1a>
 288:	08 95       	ret
 28a:	83 30       	cpi	r24, 0x03	; 3
 28c:	c9 f0       	breq	.+50     	; 0x2c0 <DIO_SetPinDirection+0x46>
 28e:	84 30       	cpi	r24, 0x04	; 4
 290:	11 f1       	breq	.+68     	; 0x2d6 <DIO_SetPinDirection+0x5c>
 292:	08 95       	ret
		{	case PORT_A: SET_BIT(DDRA,PinNumber);
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_SetPinDirection+0x24>
 29a:	88 0f       	add	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	6a 95       	dec	r22
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_SetPinDirection+0x20>
 2a2:	9a b3       	in	r25, 0x1a	; 26
 2a4:	89 2b       	or	r24, r25
 2a6:	8a bb       	out	0x1a, r24	; 26
			break;
 2a8:	08 95       	ret
			case PORT_B: SET_BIT(DDRB,PinNumber);
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_SetPinDirection+0x3a>
 2b0:	88 0f       	add	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	6a 95       	dec	r22
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_SetPinDirection+0x36>
 2b8:	97 b3       	in	r25, 0x17	; 23
 2ba:	89 2b       	or	r24, r25
 2bc:	87 bb       	out	0x17, r24	; 23
			break;
 2be:	08 95       	ret
			case PORT_C: SET_BIT(DDRC,PinNumber);
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <DIO_SetPinDirection+0x50>
 2c6:	88 0f       	add	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	6a 95       	dec	r22
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <DIO_SetPinDirection+0x4c>
 2ce:	94 b3       	in	r25, 0x14	; 20
 2d0:	89 2b       	or	r24, r25
 2d2:	84 bb       	out	0x14, r24	; 20
			break;
 2d4:	08 95       	ret
			case PORT_D: SET_BIT(DDRD,PinNumber);
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <DIO_SetPinDirection+0x66>
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	6a 95       	dec	r22
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <DIO_SetPinDirection+0x62>
 2e4:	91 b3       	in	r25, 0x11	; 17
 2e6:	89 2b       	or	r24, r25
 2e8:	81 bb       	out	0x11, r24	; 17
			break;
 2ea:	08 95       	ret
		}
	}
	else if(PinDirection==PIN_INPUT)
 2ec:	41 11       	cpse	r20, r1
 2ee:	3a c0       	rjmp	.+116    	; 0x364 <DIO_SetPinDirection+0xea>
	{
		switch(PortName)
 2f0:	82 30       	cpi	r24, 0x02	; 2
 2f2:	a9 f0       	breq	.+42     	; 0x31e <DIO_SetPinDirection+0xa4>
 2f4:	18 f4       	brcc	.+6      	; 0x2fc <DIO_SetPinDirection+0x82>
 2f6:	81 30       	cpi	r24, 0x01	; 1
 2f8:	31 f0       	breq	.+12     	; 0x306 <DIO_SetPinDirection+0x8c>
 2fa:	08 95       	ret
 2fc:	83 30       	cpi	r24, 0x03	; 3
 2fe:	d9 f0       	breq	.+54     	; 0x336 <DIO_SetPinDirection+0xbc>
 300:	84 30       	cpi	r24, 0x04	; 4
 302:	29 f1       	breq	.+74     	; 0x34e <DIO_SetPinDirection+0xd4>
 304:	08 95       	ret
		{	case PORT_A: CLR_BIT(DDRA,PinNumber);
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_SetPinDirection+0x96>
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	6a 95       	dec	r22
 312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_SetPinDirection+0x92>
 314:	80 95       	com	r24
 316:	9a b3       	in	r25, 0x1a	; 26
 318:	89 23       	and	r24, r25
 31a:	8a bb       	out	0x1a, r24	; 26
			break;
 31c:	08 95       	ret
			case PORT_B: CLR_BIT(DDRB,PinNumber);
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	02 c0       	rjmp	.+4      	; 0x328 <DIO_SetPinDirection+0xae>
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	6a 95       	dec	r22
 32a:	e2 f7       	brpl	.-8      	; 0x324 <DIO_SetPinDirection+0xaa>
 32c:	80 95       	com	r24
 32e:	97 b3       	in	r25, 0x17	; 23
 330:	89 23       	and	r24, r25
 332:	87 bb       	out	0x17, r24	; 23
			break;
 334:	08 95       	ret
			case PORT_C: CLR_BIT(DDRC,PinNumber);
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_SetPinDirection+0xc6>
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	6a 95       	dec	r22
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_SetPinDirection+0xc2>
 344:	80 95       	com	r24
 346:	94 b3       	in	r25, 0x14	; 20
 348:	89 23       	and	r24, r25
 34a:	84 bb       	out	0x14, r24	; 20
			break;
 34c:	08 95       	ret
			case PORT_D: CLR_BIT(DDRD,PinNumber);
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_SetPinDirection+0xde>
 354:	88 0f       	add	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	6a 95       	dec	r22
 35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_SetPinDirection+0xda>
 35c:	80 95       	com	r24
 35e:	91 b3       	in	r25, 0x11	; 17
 360:	89 23       	and	r24, r25
 362:	81 bb       	out	0x11, r24	; 17
 364:	08 95       	ret

00000366 <DIO_SetPinValue>:
		}
	}
}
void DIO_SetPinValue(u8 PortName,u8 PinNumber,u8 PinValue)
{
		if(PinValue==PIN_HIGH)
 366:	41 30       	cpi	r20, 0x01	; 1
 368:	b9 f5       	brne	.+110    	; 0x3d8 <DIO_SetPinValue+0x72>
		{
			switch(PortName)
 36a:	82 30       	cpi	r24, 0x02	; 2
 36c:	a1 f0       	breq	.+40     	; 0x396 <DIO_SetPinValue+0x30>
 36e:	18 f4       	brcc	.+6      	; 0x376 <DIO_SetPinValue+0x10>
 370:	81 30       	cpi	r24, 0x01	; 1
 372:	31 f0       	breq	.+12     	; 0x380 <DIO_SetPinValue+0x1a>
 374:	08 95       	ret
 376:	83 30       	cpi	r24, 0x03	; 3
 378:	c9 f0       	breq	.+50     	; 0x3ac <DIO_SetPinValue+0x46>
 37a:	84 30       	cpi	r24, 0x04	; 4
 37c:	11 f1       	breq	.+68     	; 0x3c2 <DIO_SetPinValue+0x5c>
 37e:	08 95       	ret
			{	case PORT_A: SET_BIT(PORTA,PinNumber);
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	02 c0       	rjmp	.+4      	; 0x38a <DIO_SetPinValue+0x24>
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	6a 95       	dec	r22
 38c:	e2 f7       	brpl	.-8      	; 0x386 <DIO_SetPinValue+0x20>
 38e:	9b b3       	in	r25, 0x1b	; 27
 390:	89 2b       	or	r24, r25
 392:	8b bb       	out	0x1b, r24	; 27
				break;
 394:	08 95       	ret
				case PORT_B: SET_BIT(PORTB,PinNumber);
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <DIO_SetPinValue+0x3a>
 39c:	88 0f       	add	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	6a 95       	dec	r22
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <DIO_SetPinValue+0x36>
 3a4:	98 b3       	in	r25, 0x18	; 24
 3a6:	89 2b       	or	r24, r25
 3a8:	88 bb       	out	0x18, r24	; 24
				break;
 3aa:	08 95       	ret
				case PORT_C: SET_BIT(PORTC,PinNumber);
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_SetPinValue+0x50>
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	6a 95       	dec	r22
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_SetPinValue+0x4c>
 3ba:	95 b3       	in	r25, 0x15	; 21
 3bc:	89 2b       	or	r24, r25
 3be:	85 bb       	out	0x15, r24	; 21
				break;
 3c0:	08 95       	ret
				case PORT_D: SET_BIT(PORTD,PinNumber);
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_SetPinValue+0x66>
 3c8:	88 0f       	add	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	6a 95       	dec	r22
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_SetPinValue+0x62>
 3d0:	92 b3       	in	r25, 0x12	; 18
 3d2:	89 2b       	or	r24, r25
 3d4:	82 bb       	out	0x12, r24	; 18
				break;
 3d6:	08 95       	ret
			}
		}
		else if(PinValue==PIN_LOW)
 3d8:	41 11       	cpse	r20, r1
 3da:	3a c0       	rjmp	.+116    	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
		{
			switch(PortName)
 3dc:	82 30       	cpi	r24, 0x02	; 2
 3de:	a9 f0       	breq	.+42     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3e0:	18 f4       	brcc	.+6      	; 0x3e8 <DIO_SetPinValue+0x82>
 3e2:	81 30       	cpi	r24, 0x01	; 1
 3e4:	31 f0       	breq	.+12     	; 0x3f2 <DIO_SetPinValue+0x8c>
 3e6:	08 95       	ret
 3e8:	83 30       	cpi	r24, 0x03	; 3
 3ea:	d9 f0       	breq	.+54     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 3ec:	84 30       	cpi	r24, 0x04	; 4
 3ee:	29 f1       	breq	.+74     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 3f0:	08 95       	ret
			{	case PORT_A: CLR_BIT(PORTA,PinNumber);
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <DIO_SetPinValue+0x96>
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	6a 95       	dec	r22
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <DIO_SetPinValue+0x92>
 400:	80 95       	com	r24
 402:	9b b3       	in	r25, 0x1b	; 27
 404:	89 23       	and	r24, r25
 406:	8b bb       	out	0x1b, r24	; 27
				break;
 408:	08 95       	ret
				case PORT_B: CLR_BIT(PORTB,PinNumber);
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	02 c0       	rjmp	.+4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 410:	88 0f       	add	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	6a 95       	dec	r22
 416:	e2 f7       	brpl	.-8      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 418:	80 95       	com	r24
 41a:	98 b3       	in	r25, 0x18	; 24
 41c:	89 23       	and	r24, r25
 41e:	88 bb       	out	0x18, r24	; 24
				break;
 420:	08 95       	ret
				case PORT_C: CLR_BIT(PORTC,PinNumber);
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	02 c0       	rjmp	.+4      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 428:	88 0f       	add	r24, r24
 42a:	99 1f       	adc	r25, r25
 42c:	6a 95       	dec	r22
 42e:	e2 f7       	brpl	.-8      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 430:	80 95       	com	r24
 432:	95 b3       	in	r25, 0x15	; 21
 434:	89 23       	and	r24, r25
 436:	85 bb       	out	0x15, r24	; 21
				break;
 438:	08 95       	ret
				case PORT_D: CLR_BIT(PORTD,PinNumber);
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	02 c0       	rjmp	.+4      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 440:	88 0f       	add	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	6a 95       	dec	r22
 446:	e2 f7       	brpl	.-8      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 448:	80 95       	com	r24
 44a:	92 b3       	in	r25, 0x12	; 18
 44c:	89 23       	and	r24, r25
 44e:	82 bb       	out	0x12, r24	; 18
 450:	08 95       	ret

00000452 <UART_init>:
#include "UART_Interface.h"
#include "TIMER_Private.h"

// UART Initialization
void UART_init(u16 baud) {
	u16 ubrr = F_CPU / 16 / baud - 1;
 452:	9c 01       	movw	r18, r24
 454:	40 e0       	ldi	r20, 0x00	; 0
 456:	50 e0       	ldi	r21, 0x00	; 0
 458:	60 e2       	ldi	r22, 0x20	; 32
 45a:	71 ea       	ldi	r23, 0xA1	; 161
 45c:	87 e0       	ldi	r24, 0x07	; 7
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__udivmodsi4>
 464:	21 50       	subi	r18, 0x01	; 1
 466:	31 09       	sbc	r19, r1
	UBRRH = (u8)(ubrr >> 8);
 468:	30 bd       	out	0x20, r19	; 32
	UBRRL = (u8)ubrr;
 46a:	29 b9       	out	0x09, r18	; 9
	// Enable receiver and transmitter
	UCSRB = (1 << UCSRB_RXEN) | (1 << UCSRB_TXEN);
 46c:	88 e1       	ldi	r24, 0x18	; 24
 46e:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << UCSRC_URSEL) | (1 << UCSRC_UCSZ1) | (1 << UCSRC_UCSZ0);  // Set frame format: 8 data bits, 1 stop bit
 470:	86 e8       	ldi	r24, 0x86	; 134
 472:	80 bd       	out	0x20, r24	; 32
 474:	08 95       	ret

00000476 <UART_sendString>:
}

// Send String via UART
void UART_sendString(const u8* data) {
 476:	fc 01       	movw	r30, r24
	while (*data) {
 478:	04 c0       	rjmp	.+8      	; 0x482 <UART_sendString+0xc>
		while (!(UCSRA & (1 << UCSRA_UDRE)));  // Wait until buffer is empty
 47a:	5d 9b       	sbis	0x0b, 5	; 11
 47c:	fe cf       	rjmp	.-4      	; 0x47a <UART_sendString+0x4>
			// Put data into buffer, sends the data
		UDR_InputOutput = *data++;
 47e:	31 96       	adiw	r30, 0x01	; 1
 480:	8c b9       	out	0x0c, r24	; 12
	UCSRC = (1 << UCSRC_URSEL) | (1 << UCSRC_UCSZ1) | (1 << UCSRC_UCSZ0);  // Set frame format: 8 data bits, 1 stop bit
}

// Send String via UART
void UART_sendString(const u8* data) {
	while (*data) {
 482:	80 81       	ld	r24, Z
 484:	81 11       	cpse	r24, r1
 486:	f9 cf       	rjmp	.-14     	; 0x47a <UART_sendString+0x4>
		while (!(UCSRA & (1 << UCSRA_UDRE)));  // Wait until buffer is empty
			// Put data into buffer, sends the data
		UDR_InputOutput = *data++;
	}
}
 488:	08 95       	ret

0000048a <ShowingTheValue>:

// Show OCR values and movement direction
void ShowingTheValue(u8 movement) {
 48a:	0f 93       	push	r16
 48c:	1f 93       	push	r17
 48e:	cf 93       	push	r28
 490:	df 93       	push	r29
 492:	cd b7       	in	r28, 0x3d	; 61
 494:	de b7       	in	r29, 0x3e	; 62
 496:	ec 97       	sbiw	r28, 0x3c	; 60
 498:	0f b6       	in	r0, 0x3f	; 63
 49a:	f8 94       	cli
 49c:	de bf       	out	0x3e, r29	; 62
 49e:	0f be       	out	0x3f, r0	; 63
 4a0:	cd bf       	out	0x3d, r28	; 61
	u8 buffer[60];
	sprintf(buffer, "[%c] OCR1A: %u , OCR1B: %u\n\n", movement, OCR1A, OCR1B);
 4a2:	49 b5       	in	r20, 0x29	; 41
 4a4:	5a b5       	in	r21, 0x2a	; 42
 4a6:	2b b5       	in	r18, 0x2b	; 43
 4a8:	3c b5       	in	r19, 0x2c	; 44
 4aa:	5f 93       	push	r21
 4ac:	4f 93       	push	r20
 4ae:	3f 93       	push	r19
 4b0:	2f 93       	push	r18
 4b2:	1f 92       	push	r1
 4b4:	8f 93       	push	r24
 4b6:	80 e6       	ldi	r24, 0x60	; 96
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	9f 93       	push	r25
 4bc:	8f 93       	push	r24
 4be:	8e 01       	movw	r16, r28
 4c0:	0f 5f       	subi	r16, 0xFF	; 255
 4c2:	1f 4f       	sbci	r17, 0xFF	; 255
 4c4:	1f 93       	push	r17
 4c6:	0f 93       	push	r16
 4c8:	0e 94 9b 02 	call	0x536	; 0x536 <sprintf>
	UART_sendString(buffer);
 4cc:	c8 01       	movw	r24, r16
 4ce:	0e 94 3b 02 	call	0x476	; 0x476 <UART_sendString>
}
 4d2:	0f b6       	in	r0, 0x3f	; 63
 4d4:	f8 94       	cli
 4d6:	de bf       	out	0x3e, r29	; 62
 4d8:	0f be       	out	0x3f, r0	; 63
 4da:	cd bf       	out	0x3d, r28	; 61
 4dc:	ec 96       	adiw	r28, 0x3c	; 60
 4de:	0f b6       	in	r0, 0x3f	; 63
 4e0:	f8 94       	cli
 4e2:	de bf       	out	0x3e, r29	; 62
 4e4:	0f be       	out	0x3f, r0	; 63
 4e6:	cd bf       	out	0x3d, r28	; 61
 4e8:	df 91       	pop	r29
 4ea:	cf 91       	pop	r28
 4ec:	1f 91       	pop	r17
 4ee:	0f 91       	pop	r16
 4f0:	08 95       	ret

000004f2 <__udivmodsi4>:
 4f2:	a1 e2       	ldi	r26, 0x21	; 33
 4f4:	1a 2e       	mov	r1, r26
 4f6:	aa 1b       	sub	r26, r26
 4f8:	bb 1b       	sub	r27, r27
 4fa:	fd 01       	movw	r30, r26
 4fc:	0d c0       	rjmp	.+26     	; 0x518 <__udivmodsi4_ep>

000004fe <__udivmodsi4_loop>:
 4fe:	aa 1f       	adc	r26, r26
 500:	bb 1f       	adc	r27, r27
 502:	ee 1f       	adc	r30, r30
 504:	ff 1f       	adc	r31, r31
 506:	a2 17       	cp	r26, r18
 508:	b3 07       	cpc	r27, r19
 50a:	e4 07       	cpc	r30, r20
 50c:	f5 07       	cpc	r31, r21
 50e:	20 f0       	brcs	.+8      	; 0x518 <__udivmodsi4_ep>
 510:	a2 1b       	sub	r26, r18
 512:	b3 0b       	sbc	r27, r19
 514:	e4 0b       	sbc	r30, r20
 516:	f5 0b       	sbc	r31, r21

00000518 <__udivmodsi4_ep>:
 518:	66 1f       	adc	r22, r22
 51a:	77 1f       	adc	r23, r23
 51c:	88 1f       	adc	r24, r24
 51e:	99 1f       	adc	r25, r25
 520:	1a 94       	dec	r1
 522:	69 f7       	brne	.-38     	; 0x4fe <__udivmodsi4_loop>
 524:	60 95       	com	r22
 526:	70 95       	com	r23
 528:	80 95       	com	r24
 52a:	90 95       	com	r25
 52c:	9b 01       	movw	r18, r22
 52e:	ac 01       	movw	r20, r24
 530:	bd 01       	movw	r22, r26
 532:	cf 01       	movw	r24, r30
 534:	08 95       	ret

00000536 <sprintf>:
 536:	ae e0       	ldi	r26, 0x0E	; 14
 538:	b0 e0       	ldi	r27, 0x00	; 0
 53a:	e1 ea       	ldi	r30, 0xA1	; 161
 53c:	f2 e0       	ldi	r31, 0x02	; 2
 53e:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__prologue_saves__+0x1c>
 542:	0d 89       	ldd	r16, Y+21	; 0x15
 544:	1e 89       	ldd	r17, Y+22	; 0x16
 546:	86 e0       	ldi	r24, 0x06	; 6
 548:	8c 83       	std	Y+4, r24	; 0x04
 54a:	1a 83       	std	Y+2, r17	; 0x02
 54c:	09 83       	std	Y+1, r16	; 0x01
 54e:	8f ef       	ldi	r24, 0xFF	; 255
 550:	9f e7       	ldi	r25, 0x7F	; 127
 552:	9e 83       	std	Y+6, r25	; 0x06
 554:	8d 83       	std	Y+5, r24	; 0x05
 556:	ae 01       	movw	r20, r28
 558:	47 5e       	subi	r20, 0xE7	; 231
 55a:	5f 4f       	sbci	r21, 0xFF	; 255
 55c:	6f 89       	ldd	r22, Y+23	; 0x17
 55e:	78 8d       	ldd	r23, Y+24	; 0x18
 560:	ce 01       	movw	r24, r28
 562:	01 96       	adiw	r24, 0x01	; 1
 564:	0e 94 bd 02 	call	0x57a	; 0x57a <vfprintf>
 568:	ef 81       	ldd	r30, Y+7	; 0x07
 56a:	f8 85       	ldd	r31, Y+8	; 0x08
 56c:	e0 0f       	add	r30, r16
 56e:	f1 1f       	adc	r31, r17
 570:	10 82       	st	Z, r1
 572:	2e 96       	adiw	r28, 0x0e	; 14
 574:	e4 e0       	ldi	r30, 0x04	; 4
 576:	0c 94 78 05 	jmp	0xaf0	; 0xaf0 <__epilogue_restores__+0x1c>

0000057a <vfprintf>:
 57a:	ab e0       	ldi	r26, 0x0B	; 11
 57c:	b0 e0       	ldi	r27, 0x00	; 0
 57e:	e3 ec       	ldi	r30, 0xC3	; 195
 580:	f2 e0       	ldi	r31, 0x02	; 2
 582:	0c 94 4e 05 	jmp	0xa9c	; 0xa9c <__prologue_saves__>
 586:	6c 01       	movw	r12, r24
 588:	7b 01       	movw	r14, r22
 58a:	8a 01       	movw	r16, r20
 58c:	fc 01       	movw	r30, r24
 58e:	17 82       	std	Z+7, r1	; 0x07
 590:	16 82       	std	Z+6, r1	; 0x06
 592:	83 81       	ldd	r24, Z+3	; 0x03
 594:	81 ff       	sbrs	r24, 1
 596:	cc c1       	rjmp	.+920    	; 0x930 <__stack+0xd1>
 598:	ce 01       	movw	r24, r28
 59a:	01 96       	adiw	r24, 0x01	; 1
 59c:	3c 01       	movw	r6, r24
 59e:	f6 01       	movw	r30, r12
 5a0:	93 81       	ldd	r25, Z+3	; 0x03
 5a2:	f7 01       	movw	r30, r14
 5a4:	93 fd       	sbrc	r25, 3
 5a6:	85 91       	lpm	r24, Z+
 5a8:	93 ff       	sbrs	r25, 3
 5aa:	81 91       	ld	r24, Z+
 5ac:	7f 01       	movw	r14, r30
 5ae:	88 23       	and	r24, r24
 5b0:	09 f4       	brne	.+2      	; 0x5b4 <vfprintf+0x3a>
 5b2:	ba c1       	rjmp	.+884    	; 0x928 <__stack+0xc9>
 5b4:	85 32       	cpi	r24, 0x25	; 37
 5b6:	39 f4       	brne	.+14     	; 0x5c6 <vfprintf+0x4c>
 5b8:	93 fd       	sbrc	r25, 3
 5ba:	85 91       	lpm	r24, Z+
 5bc:	93 ff       	sbrs	r25, 3
 5be:	81 91       	ld	r24, Z+
 5c0:	7f 01       	movw	r14, r30
 5c2:	85 32       	cpi	r24, 0x25	; 37
 5c4:	29 f4       	brne	.+10     	; 0x5d0 <vfprintf+0x56>
 5c6:	b6 01       	movw	r22, r12
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	0e 94 b4 04 	call	0x968	; 0x968 <fputc>
 5ce:	e7 cf       	rjmp	.-50     	; 0x59e <vfprintf+0x24>
 5d0:	91 2c       	mov	r9, r1
 5d2:	21 2c       	mov	r2, r1
 5d4:	31 2c       	mov	r3, r1
 5d6:	ff e1       	ldi	r31, 0x1F	; 31
 5d8:	f3 15       	cp	r31, r3
 5da:	d8 f0       	brcs	.+54     	; 0x612 <vfprintf+0x98>
 5dc:	8b 32       	cpi	r24, 0x2B	; 43
 5de:	79 f0       	breq	.+30     	; 0x5fe <vfprintf+0x84>
 5e0:	38 f4       	brcc	.+14     	; 0x5f0 <vfprintf+0x76>
 5e2:	80 32       	cpi	r24, 0x20	; 32
 5e4:	79 f0       	breq	.+30     	; 0x604 <vfprintf+0x8a>
 5e6:	83 32       	cpi	r24, 0x23	; 35
 5e8:	a1 f4       	brne	.+40     	; 0x612 <vfprintf+0x98>
 5ea:	23 2d       	mov	r18, r3
 5ec:	20 61       	ori	r18, 0x10	; 16
 5ee:	1d c0       	rjmp	.+58     	; 0x62a <vfprintf+0xb0>
 5f0:	8d 32       	cpi	r24, 0x2D	; 45
 5f2:	61 f0       	breq	.+24     	; 0x60c <vfprintf+0x92>
 5f4:	80 33       	cpi	r24, 0x30	; 48
 5f6:	69 f4       	brne	.+26     	; 0x612 <vfprintf+0x98>
 5f8:	23 2d       	mov	r18, r3
 5fa:	21 60       	ori	r18, 0x01	; 1
 5fc:	16 c0       	rjmp	.+44     	; 0x62a <vfprintf+0xb0>
 5fe:	83 2d       	mov	r24, r3
 600:	82 60       	ori	r24, 0x02	; 2
 602:	38 2e       	mov	r3, r24
 604:	e3 2d       	mov	r30, r3
 606:	e4 60       	ori	r30, 0x04	; 4
 608:	3e 2e       	mov	r3, r30
 60a:	2a c0       	rjmp	.+84     	; 0x660 <vfprintf+0xe6>
 60c:	f3 2d       	mov	r31, r3
 60e:	f8 60       	ori	r31, 0x08	; 8
 610:	1d c0       	rjmp	.+58     	; 0x64c <vfprintf+0xd2>
 612:	37 fc       	sbrc	r3, 7
 614:	2d c0       	rjmp	.+90     	; 0x670 <vfprintf+0xf6>
 616:	20 ed       	ldi	r18, 0xD0	; 208
 618:	28 0f       	add	r18, r24
 61a:	2a 30       	cpi	r18, 0x0A	; 10
 61c:	40 f0       	brcs	.+16     	; 0x62e <vfprintf+0xb4>
 61e:	8e 32       	cpi	r24, 0x2E	; 46
 620:	b9 f4       	brne	.+46     	; 0x650 <vfprintf+0xd6>
 622:	36 fc       	sbrc	r3, 6
 624:	81 c1       	rjmp	.+770    	; 0x928 <__stack+0xc9>
 626:	23 2d       	mov	r18, r3
 628:	20 64       	ori	r18, 0x40	; 64
 62a:	32 2e       	mov	r3, r18
 62c:	19 c0       	rjmp	.+50     	; 0x660 <vfprintf+0xe6>
 62e:	36 fe       	sbrs	r3, 6
 630:	06 c0       	rjmp	.+12     	; 0x63e <vfprintf+0xc4>
 632:	8a e0       	ldi	r24, 0x0A	; 10
 634:	98 9e       	mul	r9, r24
 636:	20 0d       	add	r18, r0
 638:	11 24       	eor	r1, r1
 63a:	92 2e       	mov	r9, r18
 63c:	11 c0       	rjmp	.+34     	; 0x660 <vfprintf+0xe6>
 63e:	ea e0       	ldi	r30, 0x0A	; 10
 640:	2e 9e       	mul	r2, r30
 642:	20 0d       	add	r18, r0
 644:	11 24       	eor	r1, r1
 646:	22 2e       	mov	r2, r18
 648:	f3 2d       	mov	r31, r3
 64a:	f0 62       	ori	r31, 0x20	; 32
 64c:	3f 2e       	mov	r3, r31
 64e:	08 c0       	rjmp	.+16     	; 0x660 <vfprintf+0xe6>
 650:	8c 36       	cpi	r24, 0x6C	; 108
 652:	21 f4       	brne	.+8      	; 0x65c <vfprintf+0xe2>
 654:	83 2d       	mov	r24, r3
 656:	80 68       	ori	r24, 0x80	; 128
 658:	38 2e       	mov	r3, r24
 65a:	02 c0       	rjmp	.+4      	; 0x660 <vfprintf+0xe6>
 65c:	88 36       	cpi	r24, 0x68	; 104
 65e:	41 f4       	brne	.+16     	; 0x670 <vfprintf+0xf6>
 660:	f7 01       	movw	r30, r14
 662:	93 fd       	sbrc	r25, 3
 664:	85 91       	lpm	r24, Z+
 666:	93 ff       	sbrs	r25, 3
 668:	81 91       	ld	r24, Z+
 66a:	7f 01       	movw	r14, r30
 66c:	81 11       	cpse	r24, r1
 66e:	b3 cf       	rjmp	.-154    	; 0x5d6 <vfprintf+0x5c>
 670:	98 2f       	mov	r25, r24
 672:	9f 7d       	andi	r25, 0xDF	; 223
 674:	95 54       	subi	r25, 0x45	; 69
 676:	93 30       	cpi	r25, 0x03	; 3
 678:	28 f4       	brcc	.+10     	; 0x684 <vfprintf+0x10a>
 67a:	0c 5f       	subi	r16, 0xFC	; 252
 67c:	1f 4f       	sbci	r17, 0xFF	; 255
 67e:	9f e3       	ldi	r25, 0x3F	; 63
 680:	99 83       	std	Y+1, r25	; 0x01
 682:	0d c0       	rjmp	.+26     	; 0x69e <vfprintf+0x124>
 684:	83 36       	cpi	r24, 0x63	; 99
 686:	31 f0       	breq	.+12     	; 0x694 <vfprintf+0x11a>
 688:	83 37       	cpi	r24, 0x73	; 115
 68a:	71 f0       	breq	.+28     	; 0x6a8 <vfprintf+0x12e>
 68c:	83 35       	cpi	r24, 0x53	; 83
 68e:	09 f0       	breq	.+2      	; 0x692 <vfprintf+0x118>
 690:	59 c0       	rjmp	.+178    	; 0x744 <vfprintf+0x1ca>
 692:	21 c0       	rjmp	.+66     	; 0x6d6 <vfprintf+0x15c>
 694:	f8 01       	movw	r30, r16
 696:	80 81       	ld	r24, Z
 698:	89 83       	std	Y+1, r24	; 0x01
 69a:	0e 5f       	subi	r16, 0xFE	; 254
 69c:	1f 4f       	sbci	r17, 0xFF	; 255
 69e:	88 24       	eor	r8, r8
 6a0:	83 94       	inc	r8
 6a2:	91 2c       	mov	r9, r1
 6a4:	53 01       	movw	r10, r6
 6a6:	13 c0       	rjmp	.+38     	; 0x6ce <vfprintf+0x154>
 6a8:	28 01       	movw	r4, r16
 6aa:	f2 e0       	ldi	r31, 0x02	; 2
 6ac:	4f 0e       	add	r4, r31
 6ae:	51 1c       	adc	r5, r1
 6b0:	f8 01       	movw	r30, r16
 6b2:	a0 80       	ld	r10, Z
 6b4:	b1 80       	ldd	r11, Z+1	; 0x01
 6b6:	36 fe       	sbrs	r3, 6
 6b8:	03 c0       	rjmp	.+6      	; 0x6c0 <vfprintf+0x146>
 6ba:	69 2d       	mov	r22, r9
 6bc:	70 e0       	ldi	r23, 0x00	; 0
 6be:	02 c0       	rjmp	.+4      	; 0x6c4 <vfprintf+0x14a>
 6c0:	6f ef       	ldi	r22, 0xFF	; 255
 6c2:	7f ef       	ldi	r23, 0xFF	; 255
 6c4:	c5 01       	movw	r24, r10
 6c6:	0e 94 a9 04 	call	0x952	; 0x952 <strnlen>
 6ca:	4c 01       	movw	r8, r24
 6cc:	82 01       	movw	r16, r4
 6ce:	f3 2d       	mov	r31, r3
 6d0:	ff 77       	andi	r31, 0x7F	; 127
 6d2:	3f 2e       	mov	r3, r31
 6d4:	16 c0       	rjmp	.+44     	; 0x702 <vfprintf+0x188>
 6d6:	28 01       	movw	r4, r16
 6d8:	22 e0       	ldi	r18, 0x02	; 2
 6da:	42 0e       	add	r4, r18
 6dc:	51 1c       	adc	r5, r1
 6de:	f8 01       	movw	r30, r16
 6e0:	a0 80       	ld	r10, Z
 6e2:	b1 80       	ldd	r11, Z+1	; 0x01
 6e4:	36 fe       	sbrs	r3, 6
 6e6:	03 c0       	rjmp	.+6      	; 0x6ee <vfprintf+0x174>
 6e8:	69 2d       	mov	r22, r9
 6ea:	70 e0       	ldi	r23, 0x00	; 0
 6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <vfprintf+0x178>
 6ee:	6f ef       	ldi	r22, 0xFF	; 255
 6f0:	7f ef       	ldi	r23, 0xFF	; 255
 6f2:	c5 01       	movw	r24, r10
 6f4:	0e 94 9e 04 	call	0x93c	; 0x93c <strnlen_P>
 6f8:	4c 01       	movw	r8, r24
 6fa:	f3 2d       	mov	r31, r3
 6fc:	f0 68       	ori	r31, 0x80	; 128
 6fe:	3f 2e       	mov	r3, r31
 700:	82 01       	movw	r16, r4
 702:	33 fc       	sbrc	r3, 3
 704:	1b c0       	rjmp	.+54     	; 0x73c <vfprintf+0x1c2>
 706:	82 2d       	mov	r24, r2
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	88 16       	cp	r8, r24
 70c:	99 06       	cpc	r9, r25
 70e:	b0 f4       	brcc	.+44     	; 0x73c <vfprintf+0x1c2>
 710:	b6 01       	movw	r22, r12
 712:	80 e2       	ldi	r24, 0x20	; 32
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	0e 94 b4 04 	call	0x968	; 0x968 <fputc>
 71a:	2a 94       	dec	r2
 71c:	f4 cf       	rjmp	.-24     	; 0x706 <vfprintf+0x18c>
 71e:	f5 01       	movw	r30, r10
 720:	37 fc       	sbrc	r3, 7
 722:	85 91       	lpm	r24, Z+
 724:	37 fe       	sbrs	r3, 7
 726:	81 91       	ld	r24, Z+
 728:	5f 01       	movw	r10, r30
 72a:	b6 01       	movw	r22, r12
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	0e 94 b4 04 	call	0x968	; 0x968 <fputc>
 732:	21 10       	cpse	r2, r1
 734:	2a 94       	dec	r2
 736:	21 e0       	ldi	r18, 0x01	; 1
 738:	82 1a       	sub	r8, r18
 73a:	91 08       	sbc	r9, r1
 73c:	81 14       	cp	r8, r1
 73e:	91 04       	cpc	r9, r1
 740:	71 f7       	brne	.-36     	; 0x71e <vfprintf+0x1a4>
 742:	e8 c0       	rjmp	.+464    	; 0x914 <__stack+0xb5>
 744:	84 36       	cpi	r24, 0x64	; 100
 746:	11 f0       	breq	.+4      	; 0x74c <vfprintf+0x1d2>
 748:	89 36       	cpi	r24, 0x69	; 105
 74a:	41 f5       	brne	.+80     	; 0x79c <vfprintf+0x222>
 74c:	f8 01       	movw	r30, r16
 74e:	37 fe       	sbrs	r3, 7
 750:	07 c0       	rjmp	.+14     	; 0x760 <vfprintf+0x1e6>
 752:	60 81       	ld	r22, Z
 754:	71 81       	ldd	r23, Z+1	; 0x01
 756:	82 81       	ldd	r24, Z+2	; 0x02
 758:	93 81       	ldd	r25, Z+3	; 0x03
 75a:	0c 5f       	subi	r16, 0xFC	; 252
 75c:	1f 4f       	sbci	r17, 0xFF	; 255
 75e:	08 c0       	rjmp	.+16     	; 0x770 <vfprintf+0x1f6>
 760:	60 81       	ld	r22, Z
 762:	71 81       	ldd	r23, Z+1	; 0x01
 764:	07 2e       	mov	r0, r23
 766:	00 0c       	add	r0, r0
 768:	88 0b       	sbc	r24, r24
 76a:	99 0b       	sbc	r25, r25
 76c:	0e 5f       	subi	r16, 0xFE	; 254
 76e:	1f 4f       	sbci	r17, 0xFF	; 255
 770:	f3 2d       	mov	r31, r3
 772:	ff 76       	andi	r31, 0x6F	; 111
 774:	3f 2e       	mov	r3, r31
 776:	97 ff       	sbrs	r25, 7
 778:	09 c0       	rjmp	.+18     	; 0x78c <vfprintf+0x212>
 77a:	90 95       	com	r25
 77c:	80 95       	com	r24
 77e:	70 95       	com	r23
 780:	61 95       	neg	r22
 782:	7f 4f       	sbci	r23, 0xFF	; 255
 784:	8f 4f       	sbci	r24, 0xFF	; 255
 786:	9f 4f       	sbci	r25, 0xFF	; 255
 788:	f0 68       	ori	r31, 0x80	; 128
 78a:	3f 2e       	mov	r3, r31
 78c:	2a e0       	ldi	r18, 0x0A	; 10
 78e:	30 e0       	ldi	r19, 0x00	; 0
 790:	a3 01       	movw	r20, r6
 792:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__ultoa_invert>
 796:	88 2e       	mov	r8, r24
 798:	86 18       	sub	r8, r6
 79a:	45 c0       	rjmp	.+138    	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 79c:	85 37       	cpi	r24, 0x75	; 117
 79e:	31 f4       	brne	.+12     	; 0x7ac <vfprintf+0x232>
 7a0:	23 2d       	mov	r18, r3
 7a2:	2f 7e       	andi	r18, 0xEF	; 239
 7a4:	b2 2e       	mov	r11, r18
 7a6:	2a e0       	ldi	r18, 0x0A	; 10
 7a8:	30 e0       	ldi	r19, 0x00	; 0
 7aa:	25 c0       	rjmp	.+74     	; 0x7f6 <vfprintf+0x27c>
 7ac:	93 2d       	mov	r25, r3
 7ae:	99 7f       	andi	r25, 0xF9	; 249
 7b0:	b9 2e       	mov	r11, r25
 7b2:	8f 36       	cpi	r24, 0x6F	; 111
 7b4:	c1 f0       	breq	.+48     	; 0x7e6 <vfprintf+0x26c>
 7b6:	18 f4       	brcc	.+6      	; 0x7be <vfprintf+0x244>
 7b8:	88 35       	cpi	r24, 0x58	; 88
 7ba:	79 f0       	breq	.+30     	; 0x7da <vfprintf+0x260>
 7bc:	b5 c0       	rjmp	.+362    	; 0x928 <__stack+0xc9>
 7be:	80 37       	cpi	r24, 0x70	; 112
 7c0:	19 f0       	breq	.+6      	; 0x7c8 <vfprintf+0x24e>
 7c2:	88 37       	cpi	r24, 0x78	; 120
 7c4:	21 f0       	breq	.+8      	; 0x7ce <vfprintf+0x254>
 7c6:	b0 c0       	rjmp	.+352    	; 0x928 <__stack+0xc9>
 7c8:	e9 2f       	mov	r30, r25
 7ca:	e0 61       	ori	r30, 0x10	; 16
 7cc:	be 2e       	mov	r11, r30
 7ce:	b4 fe       	sbrs	r11, 4
 7d0:	0d c0       	rjmp	.+26     	; 0x7ec <vfprintf+0x272>
 7d2:	fb 2d       	mov	r31, r11
 7d4:	f4 60       	ori	r31, 0x04	; 4
 7d6:	bf 2e       	mov	r11, r31
 7d8:	09 c0       	rjmp	.+18     	; 0x7ec <vfprintf+0x272>
 7da:	34 fe       	sbrs	r3, 4
 7dc:	0a c0       	rjmp	.+20     	; 0x7f2 <vfprintf+0x278>
 7de:	29 2f       	mov	r18, r25
 7e0:	26 60       	ori	r18, 0x06	; 6
 7e2:	b2 2e       	mov	r11, r18
 7e4:	06 c0       	rjmp	.+12     	; 0x7f2 <vfprintf+0x278>
 7e6:	28 e0       	ldi	r18, 0x08	; 8
 7e8:	30 e0       	ldi	r19, 0x00	; 0
 7ea:	05 c0       	rjmp	.+10     	; 0x7f6 <vfprintf+0x27c>
 7ec:	20 e1       	ldi	r18, 0x10	; 16
 7ee:	30 e0       	ldi	r19, 0x00	; 0
 7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <vfprintf+0x27c>
 7f2:	20 e1       	ldi	r18, 0x10	; 16
 7f4:	32 e0       	ldi	r19, 0x02	; 2
 7f6:	f8 01       	movw	r30, r16
 7f8:	b7 fe       	sbrs	r11, 7
 7fa:	07 c0       	rjmp	.+14     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7fc:	60 81       	ld	r22, Z
 7fe:	71 81       	ldd	r23, Z+1	; 0x01
 800:	82 81       	ldd	r24, Z+2	; 0x02
 802:	93 81       	ldd	r25, Z+3	; 0x03
 804:	0c 5f       	subi	r16, 0xFC	; 252
 806:	1f 4f       	sbci	r17, 0xFF	; 255
 808:	06 c0       	rjmp	.+12     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 80a:	60 81       	ld	r22, Z
 80c:	71 81       	ldd	r23, Z+1	; 0x01
 80e:	80 e0       	ldi	r24, 0x00	; 0
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	0e 5f       	subi	r16, 0xFE	; 254
 814:	1f 4f       	sbci	r17, 0xFF	; 255
 816:	a3 01       	movw	r20, r6
 818:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__ultoa_invert>
 81c:	88 2e       	mov	r8, r24
 81e:	86 18       	sub	r8, r6
 820:	fb 2d       	mov	r31, r11
 822:	ff 77       	andi	r31, 0x7F	; 127
 824:	3f 2e       	mov	r3, r31
 826:	36 fe       	sbrs	r3, 6
 828:	0d c0       	rjmp	.+26     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 82a:	23 2d       	mov	r18, r3
 82c:	2e 7f       	andi	r18, 0xFE	; 254
 82e:	a2 2e       	mov	r10, r18
 830:	89 14       	cp	r8, r9
 832:	58 f4       	brcc	.+22     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 834:	34 fe       	sbrs	r3, 4
 836:	0b c0       	rjmp	.+22     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 838:	32 fc       	sbrc	r3, 2
 83a:	09 c0       	rjmp	.+18     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 83c:	83 2d       	mov	r24, r3
 83e:	8e 7e       	andi	r24, 0xEE	; 238
 840:	a8 2e       	mov	r10, r24
 842:	05 c0       	rjmp	.+10     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 844:	b8 2c       	mov	r11, r8
 846:	a3 2c       	mov	r10, r3
 848:	03 c0       	rjmp	.+6      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 84a:	b8 2c       	mov	r11, r8
 84c:	01 c0       	rjmp	.+2      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 84e:	b9 2c       	mov	r11, r9
 850:	a4 fe       	sbrs	r10, 4
 852:	0f c0       	rjmp	.+30     	; 0x872 <__stack+0x13>
 854:	fe 01       	movw	r30, r28
 856:	e8 0d       	add	r30, r8
 858:	f1 1d       	adc	r31, r1
 85a:	80 81       	ld	r24, Z
 85c:	80 33       	cpi	r24, 0x30	; 48
 85e:	21 f4       	brne	.+8      	; 0x868 <__stack+0x9>
 860:	9a 2d       	mov	r25, r10
 862:	99 7e       	andi	r25, 0xE9	; 233
 864:	a9 2e       	mov	r10, r25
 866:	09 c0       	rjmp	.+18     	; 0x87a <__stack+0x1b>
 868:	a2 fe       	sbrs	r10, 2
 86a:	06 c0       	rjmp	.+12     	; 0x878 <__stack+0x19>
 86c:	b3 94       	inc	r11
 86e:	b3 94       	inc	r11
 870:	04 c0       	rjmp	.+8      	; 0x87a <__stack+0x1b>
 872:	8a 2d       	mov	r24, r10
 874:	86 78       	andi	r24, 0x86	; 134
 876:	09 f0       	breq	.+2      	; 0x87a <__stack+0x1b>
 878:	b3 94       	inc	r11
 87a:	a3 fc       	sbrc	r10, 3
 87c:	11 c0       	rjmp	.+34     	; 0x8a0 <__stack+0x41>
 87e:	a0 fe       	sbrs	r10, 0
 880:	06 c0       	rjmp	.+12     	; 0x88e <__stack+0x2f>
 882:	b2 14       	cp	r11, r2
 884:	88 f4       	brcc	.+34     	; 0x8a8 <__stack+0x49>
 886:	28 0c       	add	r2, r8
 888:	92 2c       	mov	r9, r2
 88a:	9b 18       	sub	r9, r11
 88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
 88e:	b2 14       	cp	r11, r2
 890:	60 f4       	brcc	.+24     	; 0x8aa <__stack+0x4b>
 892:	b6 01       	movw	r22, r12
 894:	80 e2       	ldi	r24, 0x20	; 32
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	0e 94 b4 04 	call	0x968	; 0x968 <fputc>
 89c:	b3 94       	inc	r11
 89e:	f7 cf       	rjmp	.-18     	; 0x88e <__stack+0x2f>
 8a0:	b2 14       	cp	r11, r2
 8a2:	18 f4       	brcc	.+6      	; 0x8aa <__stack+0x4b>
 8a4:	2b 18       	sub	r2, r11
 8a6:	02 c0       	rjmp	.+4      	; 0x8ac <__stack+0x4d>
 8a8:	98 2c       	mov	r9, r8
 8aa:	21 2c       	mov	r2, r1
 8ac:	a4 fe       	sbrs	r10, 4
 8ae:	10 c0       	rjmp	.+32     	; 0x8d0 <__stack+0x71>
 8b0:	b6 01       	movw	r22, r12
 8b2:	80 e3       	ldi	r24, 0x30	; 48
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	0e 94 b4 04 	call	0x968	; 0x968 <fputc>
 8ba:	a2 fe       	sbrs	r10, 2
 8bc:	17 c0       	rjmp	.+46     	; 0x8ec <__stack+0x8d>
 8be:	a1 fc       	sbrc	r10, 1
 8c0:	03 c0       	rjmp	.+6      	; 0x8c8 <__stack+0x69>
 8c2:	88 e7       	ldi	r24, 0x78	; 120
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	02 c0       	rjmp	.+4      	; 0x8cc <__stack+0x6d>
 8c8:	88 e5       	ldi	r24, 0x58	; 88
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	b6 01       	movw	r22, r12
 8ce:	0c c0       	rjmp	.+24     	; 0x8e8 <__stack+0x89>
 8d0:	8a 2d       	mov	r24, r10
 8d2:	86 78       	andi	r24, 0x86	; 134
 8d4:	59 f0       	breq	.+22     	; 0x8ec <__stack+0x8d>
 8d6:	a1 fe       	sbrs	r10, 1
 8d8:	02 c0       	rjmp	.+4      	; 0x8de <__stack+0x7f>
 8da:	8b e2       	ldi	r24, 0x2B	; 43
 8dc:	01 c0       	rjmp	.+2      	; 0x8e0 <__stack+0x81>
 8de:	80 e2       	ldi	r24, 0x20	; 32
 8e0:	a7 fc       	sbrc	r10, 7
 8e2:	8d e2       	ldi	r24, 0x2D	; 45
 8e4:	b6 01       	movw	r22, r12
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	0e 94 b4 04 	call	0x968	; 0x968 <fputc>
 8ec:	89 14       	cp	r8, r9
 8ee:	38 f4       	brcc	.+14     	; 0x8fe <__stack+0x9f>
 8f0:	b6 01       	movw	r22, r12
 8f2:	80 e3       	ldi	r24, 0x30	; 48
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	0e 94 b4 04 	call	0x968	; 0x968 <fputc>
 8fa:	9a 94       	dec	r9
 8fc:	f7 cf       	rjmp	.-18     	; 0x8ec <__stack+0x8d>
 8fe:	8a 94       	dec	r8
 900:	f3 01       	movw	r30, r6
 902:	e8 0d       	add	r30, r8
 904:	f1 1d       	adc	r31, r1
 906:	80 81       	ld	r24, Z
 908:	b6 01       	movw	r22, r12
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	0e 94 b4 04 	call	0x968	; 0x968 <fputc>
 910:	81 10       	cpse	r8, r1
 912:	f5 cf       	rjmp	.-22     	; 0x8fe <__stack+0x9f>
 914:	22 20       	and	r2, r2
 916:	09 f4       	brne	.+2      	; 0x91a <__stack+0xbb>
 918:	42 ce       	rjmp	.-892    	; 0x59e <vfprintf+0x24>
 91a:	b6 01       	movw	r22, r12
 91c:	80 e2       	ldi	r24, 0x20	; 32
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	0e 94 b4 04 	call	0x968	; 0x968 <fputc>
 924:	2a 94       	dec	r2
 926:	f6 cf       	rjmp	.-20     	; 0x914 <__stack+0xb5>
 928:	f6 01       	movw	r30, r12
 92a:	86 81       	ldd	r24, Z+6	; 0x06
 92c:	97 81       	ldd	r25, Z+7	; 0x07
 92e:	02 c0       	rjmp	.+4      	; 0x934 <__stack+0xd5>
 930:	8f ef       	ldi	r24, 0xFF	; 255
 932:	9f ef       	ldi	r25, 0xFF	; 255
 934:	2b 96       	adiw	r28, 0x0b	; 11
 936:	e2 e1       	ldi	r30, 0x12	; 18
 938:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__epilogue_restores__>

0000093c <strnlen_P>:
 93c:	fc 01       	movw	r30, r24
 93e:	05 90       	lpm	r0, Z+
 940:	61 50       	subi	r22, 0x01	; 1
 942:	70 40       	sbci	r23, 0x00	; 0
 944:	01 10       	cpse	r0, r1
 946:	d8 f7       	brcc	.-10     	; 0x93e <strnlen_P+0x2>
 948:	80 95       	com	r24
 94a:	90 95       	com	r25
 94c:	8e 0f       	add	r24, r30
 94e:	9f 1f       	adc	r25, r31
 950:	08 95       	ret

00000952 <strnlen>:
 952:	fc 01       	movw	r30, r24
 954:	61 50       	subi	r22, 0x01	; 1
 956:	70 40       	sbci	r23, 0x00	; 0
 958:	01 90       	ld	r0, Z+
 95a:	01 10       	cpse	r0, r1
 95c:	d8 f7       	brcc	.-10     	; 0x954 <strnlen+0x2>
 95e:	80 95       	com	r24
 960:	90 95       	com	r25
 962:	8e 0f       	add	r24, r30
 964:	9f 1f       	adc	r25, r31
 966:	08 95       	ret

00000968 <fputc>:
 968:	0f 93       	push	r16
 96a:	1f 93       	push	r17
 96c:	cf 93       	push	r28
 96e:	df 93       	push	r29
 970:	fb 01       	movw	r30, r22
 972:	23 81       	ldd	r18, Z+3	; 0x03
 974:	21 fd       	sbrc	r18, 1
 976:	03 c0       	rjmp	.+6      	; 0x97e <fputc+0x16>
 978:	8f ef       	ldi	r24, 0xFF	; 255
 97a:	9f ef       	ldi	r25, 0xFF	; 255
 97c:	2c c0       	rjmp	.+88     	; 0x9d6 <fputc+0x6e>
 97e:	22 ff       	sbrs	r18, 2
 980:	16 c0       	rjmp	.+44     	; 0x9ae <fputc+0x46>
 982:	46 81       	ldd	r20, Z+6	; 0x06
 984:	57 81       	ldd	r21, Z+7	; 0x07
 986:	24 81       	ldd	r18, Z+4	; 0x04
 988:	35 81       	ldd	r19, Z+5	; 0x05
 98a:	42 17       	cp	r20, r18
 98c:	53 07       	cpc	r21, r19
 98e:	44 f4       	brge	.+16     	; 0x9a0 <fputc+0x38>
 990:	a0 81       	ld	r26, Z
 992:	b1 81       	ldd	r27, Z+1	; 0x01
 994:	9d 01       	movw	r18, r26
 996:	2f 5f       	subi	r18, 0xFF	; 255
 998:	3f 4f       	sbci	r19, 0xFF	; 255
 99a:	31 83       	std	Z+1, r19	; 0x01
 99c:	20 83       	st	Z, r18
 99e:	8c 93       	st	X, r24
 9a0:	26 81       	ldd	r18, Z+6	; 0x06
 9a2:	37 81       	ldd	r19, Z+7	; 0x07
 9a4:	2f 5f       	subi	r18, 0xFF	; 255
 9a6:	3f 4f       	sbci	r19, 0xFF	; 255
 9a8:	37 83       	std	Z+7, r19	; 0x07
 9aa:	26 83       	std	Z+6, r18	; 0x06
 9ac:	14 c0       	rjmp	.+40     	; 0x9d6 <fputc+0x6e>
 9ae:	8b 01       	movw	r16, r22
 9b0:	ec 01       	movw	r28, r24
 9b2:	fb 01       	movw	r30, r22
 9b4:	00 84       	ldd	r0, Z+8	; 0x08
 9b6:	f1 85       	ldd	r31, Z+9	; 0x09
 9b8:	e0 2d       	mov	r30, r0
 9ba:	09 95       	icall
 9bc:	89 2b       	or	r24, r25
 9be:	e1 f6       	brne	.-72     	; 0x978 <fputc+0x10>
 9c0:	d8 01       	movw	r26, r16
 9c2:	16 96       	adiw	r26, 0x06	; 6
 9c4:	8d 91       	ld	r24, X+
 9c6:	9c 91       	ld	r25, X
 9c8:	17 97       	sbiw	r26, 0x07	; 7
 9ca:	01 96       	adiw	r24, 0x01	; 1
 9cc:	17 96       	adiw	r26, 0x07	; 7
 9ce:	9c 93       	st	X, r25
 9d0:	8e 93       	st	-X, r24
 9d2:	16 97       	sbiw	r26, 0x06	; 6
 9d4:	ce 01       	movw	r24, r28
 9d6:	df 91       	pop	r29
 9d8:	cf 91       	pop	r28
 9da:	1f 91       	pop	r17
 9dc:	0f 91       	pop	r16
 9de:	08 95       	ret

000009e0 <__ultoa_invert>:
 9e0:	fa 01       	movw	r30, r20
 9e2:	aa 27       	eor	r26, r26
 9e4:	28 30       	cpi	r18, 0x08	; 8
 9e6:	51 f1       	breq	.+84     	; 0xa3c <__ultoa_invert+0x5c>
 9e8:	20 31       	cpi	r18, 0x10	; 16
 9ea:	81 f1       	breq	.+96     	; 0xa4c <__ultoa_invert+0x6c>
 9ec:	e8 94       	clt
 9ee:	6f 93       	push	r22
 9f0:	6e 7f       	andi	r22, 0xFE	; 254
 9f2:	6e 5f       	subi	r22, 0xFE	; 254
 9f4:	7f 4f       	sbci	r23, 0xFF	; 255
 9f6:	8f 4f       	sbci	r24, 0xFF	; 255
 9f8:	9f 4f       	sbci	r25, 0xFF	; 255
 9fa:	af 4f       	sbci	r26, 0xFF	; 255
 9fc:	b1 e0       	ldi	r27, 0x01	; 1
 9fe:	3e d0       	rcall	.+124    	; 0xa7c <__ultoa_invert+0x9c>
 a00:	b4 e0       	ldi	r27, 0x04	; 4
 a02:	3c d0       	rcall	.+120    	; 0xa7c <__ultoa_invert+0x9c>
 a04:	67 0f       	add	r22, r23
 a06:	78 1f       	adc	r23, r24
 a08:	89 1f       	adc	r24, r25
 a0a:	9a 1f       	adc	r25, r26
 a0c:	a1 1d       	adc	r26, r1
 a0e:	68 0f       	add	r22, r24
 a10:	79 1f       	adc	r23, r25
 a12:	8a 1f       	adc	r24, r26
 a14:	91 1d       	adc	r25, r1
 a16:	a1 1d       	adc	r26, r1
 a18:	6a 0f       	add	r22, r26
 a1a:	71 1d       	adc	r23, r1
 a1c:	81 1d       	adc	r24, r1
 a1e:	91 1d       	adc	r25, r1
 a20:	a1 1d       	adc	r26, r1
 a22:	20 d0       	rcall	.+64     	; 0xa64 <__ultoa_invert+0x84>
 a24:	09 f4       	brne	.+2      	; 0xa28 <__ultoa_invert+0x48>
 a26:	68 94       	set
 a28:	3f 91       	pop	r19
 a2a:	2a e0       	ldi	r18, 0x0A	; 10
 a2c:	26 9f       	mul	r18, r22
 a2e:	11 24       	eor	r1, r1
 a30:	30 19       	sub	r19, r0
 a32:	30 5d       	subi	r19, 0xD0	; 208
 a34:	31 93       	st	Z+, r19
 a36:	de f6       	brtc	.-74     	; 0x9ee <__ultoa_invert+0xe>
 a38:	cf 01       	movw	r24, r30
 a3a:	08 95       	ret
 a3c:	46 2f       	mov	r20, r22
 a3e:	47 70       	andi	r20, 0x07	; 7
 a40:	40 5d       	subi	r20, 0xD0	; 208
 a42:	41 93       	st	Z+, r20
 a44:	b3 e0       	ldi	r27, 0x03	; 3
 a46:	0f d0       	rcall	.+30     	; 0xa66 <__ultoa_invert+0x86>
 a48:	c9 f7       	brne	.-14     	; 0xa3c <__ultoa_invert+0x5c>
 a4a:	f6 cf       	rjmp	.-20     	; 0xa38 <__ultoa_invert+0x58>
 a4c:	46 2f       	mov	r20, r22
 a4e:	4f 70       	andi	r20, 0x0F	; 15
 a50:	40 5d       	subi	r20, 0xD0	; 208
 a52:	4a 33       	cpi	r20, 0x3A	; 58
 a54:	18 f0       	brcs	.+6      	; 0xa5c <__ultoa_invert+0x7c>
 a56:	49 5d       	subi	r20, 0xD9	; 217
 a58:	31 fd       	sbrc	r19, 1
 a5a:	40 52       	subi	r20, 0x20	; 32
 a5c:	41 93       	st	Z+, r20
 a5e:	02 d0       	rcall	.+4      	; 0xa64 <__ultoa_invert+0x84>
 a60:	a9 f7       	brne	.-22     	; 0xa4c <__ultoa_invert+0x6c>
 a62:	ea cf       	rjmp	.-44     	; 0xa38 <__ultoa_invert+0x58>
 a64:	b4 e0       	ldi	r27, 0x04	; 4
 a66:	a6 95       	lsr	r26
 a68:	97 95       	ror	r25
 a6a:	87 95       	ror	r24
 a6c:	77 95       	ror	r23
 a6e:	67 95       	ror	r22
 a70:	ba 95       	dec	r27
 a72:	c9 f7       	brne	.-14     	; 0xa66 <__ultoa_invert+0x86>
 a74:	00 97       	sbiw	r24, 0x00	; 0
 a76:	61 05       	cpc	r22, r1
 a78:	71 05       	cpc	r23, r1
 a7a:	08 95       	ret
 a7c:	9b 01       	movw	r18, r22
 a7e:	ac 01       	movw	r20, r24
 a80:	0a 2e       	mov	r0, r26
 a82:	06 94       	lsr	r0
 a84:	57 95       	ror	r21
 a86:	47 95       	ror	r20
 a88:	37 95       	ror	r19
 a8a:	27 95       	ror	r18
 a8c:	ba 95       	dec	r27
 a8e:	c9 f7       	brne	.-14     	; 0xa82 <__ultoa_invert+0xa2>
 a90:	62 0f       	add	r22, r18
 a92:	73 1f       	adc	r23, r19
 a94:	84 1f       	adc	r24, r20
 a96:	95 1f       	adc	r25, r21
 a98:	a0 1d       	adc	r26, r0
 a9a:	08 95       	ret

00000a9c <__prologue_saves__>:
 a9c:	2f 92       	push	r2
 a9e:	3f 92       	push	r3
 aa0:	4f 92       	push	r4
 aa2:	5f 92       	push	r5
 aa4:	6f 92       	push	r6
 aa6:	7f 92       	push	r7
 aa8:	8f 92       	push	r8
 aaa:	9f 92       	push	r9
 aac:	af 92       	push	r10
 aae:	bf 92       	push	r11
 ab0:	cf 92       	push	r12
 ab2:	df 92       	push	r13
 ab4:	ef 92       	push	r14
 ab6:	ff 92       	push	r15
 ab8:	0f 93       	push	r16
 aba:	1f 93       	push	r17
 abc:	cf 93       	push	r28
 abe:	df 93       	push	r29
 ac0:	cd b7       	in	r28, 0x3d	; 61
 ac2:	de b7       	in	r29, 0x3e	; 62
 ac4:	ca 1b       	sub	r28, r26
 ac6:	db 0b       	sbc	r29, r27
 ac8:	0f b6       	in	r0, 0x3f	; 63
 aca:	f8 94       	cli
 acc:	de bf       	out	0x3e, r29	; 62
 ace:	0f be       	out	0x3f, r0	; 63
 ad0:	cd bf       	out	0x3d, r28	; 61
 ad2:	09 94       	ijmp

00000ad4 <__epilogue_restores__>:
 ad4:	2a 88       	ldd	r2, Y+18	; 0x12
 ad6:	39 88       	ldd	r3, Y+17	; 0x11
 ad8:	48 88       	ldd	r4, Y+16	; 0x10
 ada:	5f 84       	ldd	r5, Y+15	; 0x0f
 adc:	6e 84       	ldd	r6, Y+14	; 0x0e
 ade:	7d 84       	ldd	r7, Y+13	; 0x0d
 ae0:	8c 84       	ldd	r8, Y+12	; 0x0c
 ae2:	9b 84       	ldd	r9, Y+11	; 0x0b
 ae4:	aa 84       	ldd	r10, Y+10	; 0x0a
 ae6:	b9 84       	ldd	r11, Y+9	; 0x09
 ae8:	c8 84       	ldd	r12, Y+8	; 0x08
 aea:	df 80       	ldd	r13, Y+7	; 0x07
 aec:	ee 80       	ldd	r14, Y+6	; 0x06
 aee:	fd 80       	ldd	r15, Y+5	; 0x05
 af0:	0c 81       	ldd	r16, Y+4	; 0x04
 af2:	1b 81       	ldd	r17, Y+3	; 0x03
 af4:	aa 81       	ldd	r26, Y+2	; 0x02
 af6:	b9 81       	ldd	r27, Y+1	; 0x01
 af8:	ce 0f       	add	r28, r30
 afa:	d1 1d       	adc	r29, r1
 afc:	0f b6       	in	r0, 0x3f	; 63
 afe:	f8 94       	cli
 b00:	de bf       	out	0x3e, r29	; 62
 b02:	0f be       	out	0x3f, r0	; 63
 b04:	cd bf       	out	0x3d, r28	; 61
 b06:	ed 01       	movw	r28, r26
 b08:	08 95       	ret

00000b0a <_exit>:
 b0a:	f8 94       	cli

00000b0c <__stop_program>:
 b0c:	ff cf       	rjmp	.-2      	; 0xb0c <__stop_program>
