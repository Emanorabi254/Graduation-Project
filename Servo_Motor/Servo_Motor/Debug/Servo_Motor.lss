
Servo_Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e9a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005a  00800060  00000e9a  00000f0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      0000005c  00000000  00000000  00000f68  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000fc4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000160  00000000  00000000  00001000  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ace  00000000  00000000  00001160  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a71  00000000  00000000  00002c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c6f  00000000  00000000  0000369f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000268  00000000  00000000  00004310  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000588  00000000  00000000  00004578  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006bd  00000000  00000000  00004b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  000051bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e9       	ldi	r30, 0x9A	; 154
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 3b       	cpi	r26, 0xBA	; 186
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 4b 07 	jmp	0xe96	; 0xe96 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include "ADC_Interface.h"
#include "MainApp.h"


int main() {
	PWM_init();
  82:	0e 94 00 02 	call	0x400	; 0x400 <PWM_init>
	UART_init(9600);
  86:	80 e8       	ldi	r24, 0x80	; 128
  88:	95 e2       	ldi	r25, 0x25	; 37
  8a:	0e 94 dd 03 	call	0x7ba	; 0x7ba <UART_init>
	Motor_init();
  8e:	0e 94 13 02 	call	0x426	; 0x426 <Motor_init>
	ADC_Init();
  92:	0e 94 ad 02 	call	0x55a	; 0x55a <ADC_Init>
	setup_modes_pins();
  96:	0e 94 85 00 	call	0x10a	; 0x10a <setup_modes_pins>
	
	while (1) {
		u8 Chosen_Mode = get_mode();
  9a:	0e 94 b8 00 	call	0x170	; 0x170 <get_mode>
  9e:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	2f ef       	ldi	r18, 0xFF	; 255
  a2:	80 e7       	ldi	r24, 0x70	; 112
  a4:	92 e0       	ldi	r25, 0x02	; 2
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x24>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x2e>
  b0:	00 00       	nop
		_delay_ms(100);  
		UART_Flush();
  b2:	0e 94 31 04 	call	0x862	; 0x862 <UART_Flush>
		
		if (Chosen_Mode == MODE_VOICE || Chosen_Mode == MODE_EYE) {
  b6:	8e ef       	ldi	r24, 0xFE	; 254
  b8:	8c 0f       	add	r24, r28
  ba:	82 30       	cpi	r24, 0x02	; 2
  bc:	30 f4       	brcc	.+12     	; 0xca <main+0x48>
			DIO_SetPinValue(PORT_C, PIN4, PIN_LOW);  // Raspberry Pi -> 0
  be:	40 e0       	ldi	r20, 0x00	; 0
  c0:	64 e0       	ldi	r22, 0x04	; 4
  c2:	83 e0       	ldi	r24, 0x03	; 3
  c4:	0e 94 33 03 	call	0x666	; 0x666 <DIO_SetPinValue>
  c8:	07 c0       	rjmp	.+14     	; 0xd8 <main+0x56>
		}
		else if (Chosen_Mode == MODE_MOBILE) {
  ca:	c1 30       	cpi	r28, 0x01	; 1
  cc:	29 f4       	brne	.+10     	; 0xd8 <main+0x56>
			DIO_SetPinValue(PORT_C, PIN4, PIN_HIGH); //  ESP -> 1
  ce:	41 e0       	ldi	r20, 0x01	; 1
  d0:	64 e0       	ldi	r22, 0x04	; 4
  d2:	83 e0       	ldi	r24, 0x03	; 3
  d4:	0e 94 33 03 	call	0x666	; 0x666 <DIO_SetPinValue>
		}

		switch (Chosen_Mode) {
  d8:	c1 30       	cpi	r28, 0x01	; 1
  da:	49 f0       	breq	.+18     	; 0xee <main+0x6c>
  dc:	28 f0       	brcs	.+10     	; 0xe8 <main+0x66>
  de:	c2 30       	cpi	r28, 0x02	; 2
  e0:	49 f0       	breq	.+18     	; 0xf4 <main+0x72>
  e2:	c3 30       	cpi	r28, 0x03	; 3
  e4:	51 f0       	breq	.+20     	; 0xfa <main+0x78>
  e6:	0c c0       	rjmp	.+24     	; 0x100 <main+0x7e>
			case 0:
			JoyStick_Mode();
  e8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <JoyStick_Mode>
			break;
  ec:	d6 cf       	rjmp	.-84     	; 0x9a <main+0x18>

			case 1:
			MobileApp_Mode();
  ee:	0e 94 58 01 	call	0x2b0	; 0x2b0 <MobileApp_Mode>
			break;
  f2:	d3 cf       	rjmp	.-90     	; 0x9a <main+0x18>

			case 2:
			Voice_Mode();
  f4:	0e 94 90 01 	call	0x320	; 0x320 <Voice_Mode>
			break;
  f8:	d0 cf       	rjmp	.-96     	; 0x9a <main+0x18>

			case 3:
			EyeTracking_Mode();
  fa:	0e 94 c8 01 	call	0x390	; 0x390 <EyeTracking_Mode>
			break;
  fe:	cd cf       	rjmp	.-102    	; 0x9a <main+0x18>

			default:
			UART_sendString("No Mode Selected!\n");
 100:	80 e6       	ldi	r24, 0x60	; 96
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 ef 03 	call	0x7de	; 0x7de <UART_sendString>
			break;
 108:	c8 cf       	rjmp	.-112    	; 0x9a <main+0x18>

0000010a <setup_modes_pins>:
#include "avr/delay.h"



void setup_modes_pins() {
	DIO_SetPinDirection(PORT_B, PIN0, PIN_INPUT);
 10a:	40 e0       	ldi	r20, 0x00	; 0
 10c:	60 e0       	ldi	r22, 0x00	; 0
 10e:	82 e0       	ldi	r24, 0x02	; 2
 110:	0e 94 bd 02 	call	0x57a	; 0x57a <DIO_SetPinDirection>
	DIO_SetPinDirection(PORT_B, PIN1, PIN_INPUT);
 114:	40 e0       	ldi	r20, 0x00	; 0
 116:	61 e0       	ldi	r22, 0x01	; 1
 118:	82 e0       	ldi	r24, 0x02	; 2
 11a:	0e 94 bd 02 	call	0x57a	; 0x57a <DIO_SetPinDirection>
	DIO_SetPinDirection(PORT_B, PIN2, PIN_INPUT);
 11e:	40 e0       	ldi	r20, 0x00	; 0
 120:	62 e0       	ldi	r22, 0x02	; 2
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	0e 94 bd 02 	call	0x57a	; 0x57a <DIO_SetPinDirection>
	DIO_SetPinDirection(PORT_B, PIN3, PIN_INPUT);
 128:	40 e0       	ldi	r20, 0x00	; 0
 12a:	63 e0       	ldi	r22, 0x03	; 3
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	0e 94 bd 02 	call	0x57a	; 0x57a <DIO_SetPinDirection>
	
	DIO_SetPinDirection(PORT_C,PIN4,PIN_OUTPUT);  // for the Select pin in the Mux
 132:	41 e0       	ldi	r20, 0x01	; 1
 134:	64 e0       	ldi	r22, 0x04	; 4
 136:	83 e0       	ldi	r24, 0x03	; 3
 138:	0e 94 bd 02 	call	0x57a	; 0x57a <DIO_SetPinDirection>
	
	DIO_SetPinValue(PORT_B, PIN0, PIN_HIGH);
 13c:	41 e0       	ldi	r20, 0x01	; 1
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	0e 94 33 03 	call	0x666	; 0x666 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B, PIN1, PIN_HIGH);
 146:	41 e0       	ldi	r20, 0x01	; 1
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	0e 94 33 03 	call	0x666	; 0x666 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B, PIN2, PIN_HIGH);
 150:	41 e0       	ldi	r20, 0x01	; 1
 152:	62 e0       	ldi	r22, 0x02	; 2
 154:	82 e0       	ldi	r24, 0x02	; 2
 156:	0e 94 33 03 	call	0x666	; 0x666 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B, PIN3, PIN_HIGH);
 15a:	41 e0       	ldi	r20, 0x01	; 1
 15c:	63 e0       	ldi	r22, 0x03	; 3
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	0e 94 33 03 	call	0x666	; 0x666 <DIO_SetPinValue>
	
	DIO_SetPinValue(PORT_C, PIN4, PIN_LOW);  // default for Raspberry Pi
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	64 e0       	ldi	r22, 0x04	; 4
 168:	83 e0       	ldi	r24, 0x03	; 3
 16a:	0e 94 33 03 	call	0x666	; 0x666 <DIO_SetPinValue>
 16e:	08 95       	ret

00000170 <get_mode>:

}

u8 get_mode() {
	if (DIO_GetPinValue(PORT_B, PIN0) == PIN_LOW) return MODE_JOYSTICK; // Joystick
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	82 e0       	ldi	r24, 0x02	; 2
 174:	0e 94 a9 03 	call	0x752	; 0x752 <DIO_GetPinValue>
 178:	88 23       	and	r24, r24
 17a:	c9 f0       	breq	.+50     	; 0x1ae <get_mode+0x3e>
	if (DIO_GetPinValue(PORT_B, PIN1) == PIN_LOW) return MODE_MOBILE; // Mobile
 17c:	61 e0       	ldi	r22, 0x01	; 1
 17e:	82 e0       	ldi	r24, 0x02	; 2
 180:	0e 94 a9 03 	call	0x752	; 0x752 <DIO_GetPinValue>
 184:	88 23       	and	r24, r24
 186:	71 f0       	breq	.+28     	; 0x1a4 <get_mode+0x34>
	if (DIO_GetPinValue(PORT_B, PIN2) == PIN_LOW) return MODE_VOICE; // Voice
 188:	62 e0       	ldi	r22, 0x02	; 2
 18a:	82 e0       	ldi	r24, 0x02	; 2
 18c:	0e 94 a9 03 	call	0x752	; 0x752 <DIO_GetPinValue>
 190:	88 23       	and	r24, r24
 192:	51 f0       	breq	.+20     	; 0x1a8 <get_mode+0x38>
	if (DIO_GetPinValue(PORT_B, PIN3) == PIN_LOW) return MODE_EYE; // Eye
 194:	63 e0       	ldi	r22, 0x03	; 3
 196:	82 e0       	ldi	r24, 0x02	; 2
 198:	0e 94 a9 03 	call	0x752	; 0x752 <DIO_GetPinValue>
 19c:	81 11       	cpse	r24, r1
 19e:	06 c0       	rjmp	.+12     	; 0x1ac <get_mode+0x3c>
 1a0:	83 e0       	ldi	r24, 0x03	; 3
 1a2:	08 95       	ret

}

u8 get_mode() {
	if (DIO_GetPinValue(PORT_B, PIN0) == PIN_LOW) return MODE_JOYSTICK; // Joystick
	if (DIO_GetPinValue(PORT_B, PIN1) == PIN_LOW) return MODE_MOBILE; // Mobile
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	08 95       	ret
	if (DIO_GetPinValue(PORT_B, PIN2) == PIN_LOW) return MODE_VOICE; // Voice
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	08 95       	ret
	if (DIO_GetPinValue(PORT_B, PIN3) == PIN_LOW) return MODE_EYE; // Eye
	return 255; // Undefined
 1ac:	8f ef       	ldi	r24, 0xFF	; 255
}
 1ae:	08 95       	ret

000001b0 <JoyStick_Mode>:

void JoyStick_Mode() {
 1b0:	ef 92       	push	r14
 1b2:	ff 92       	push	r15
 1b4:	0f 93       	push	r16
 1b6:	1f 93       	push	r17
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	de b7       	in	r29, 0x3e	; 62
 1c0:	64 97       	sbiw	r28, 0x14	; 20
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	f8 94       	cli
 1c6:	de bf       	out	0x3e, r29	; 62
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	cd bf       	out	0x3d, r28	; 61
	
	u16 x = ADC_Read(0); // Read X-axis
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 b2 02 	call	0x564	; 0x564 <ADC_Read>
 1d4:	7c 01       	movw	r14, r24
	u16 y = ADC_Read(1); // Read Y-axis
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 b2 02 	call	0x564	; 0x564 <ADC_Read>
 1de:	8c 01       	movw	r16, r24
	char buffer[20];
	sprintf(buffer, "--> X: %d and Y: %d \r\n", x, y);
 1e0:	1f 93       	push	r17
 1e2:	8f 93       	push	r24
 1e4:	ff 92       	push	r15
 1e6:	ef 92       	push	r14
 1e8:	83 e7       	ldi	r24, 0x73	; 115
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	9f 93       	push	r25
 1ee:	8f 93       	push	r24
 1f0:	ce 01       	movw	r24, r28
 1f2:	01 96       	adiw	r24, 0x01	; 1
 1f4:	9f 93       	push	r25
 1f6:	8f 93       	push	r24
 1f8:	0e 94 61 04 	call	0x8c2	; 0x8c2 <sprintf>
	
	if (y > 600) {
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	f8 94       	cli
 200:	de bf       	out	0x3e, r29	; 62
 202:	0f be       	out	0x3f, r0	; 63
 204:	cd bf       	out	0x3d, r28	; 61
 206:	09 35       	cpi	r16, 0x59	; 89
 208:	92 e0       	ldi	r25, 0x02	; 2
 20a:	19 07       	cpc	r17, r25
 20c:	50 f0       	brcs	.+20     	; 0x222 <JoyStick_Mode+0x72>
		MoveBackward();
 20e:	0e 94 43 02 	call	0x486	; 0x486 <MoveBackward>
		ShowingTheValue('B');
 212:	82 e4       	ldi	r24, 0x42	; 66
 214:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <ShowingTheValue>
		UART_sendString(buffer);
 218:	ce 01       	movw	r24, r28
 21a:	01 96       	adiw	r24, 0x01	; 1
 21c:	0e 94 ef 03 	call	0x7de	; 0x7de <UART_sendString>
 220:	34 c0       	rjmp	.+104    	; 0x28a <JoyStick_Mode+0xda>
	}
	else if (y < 400) {
 222:	00 39       	cpi	r16, 0x90	; 144
 224:	11 40       	sbci	r17, 0x01	; 1
 226:	50 f4       	brcc	.+20     	; 0x23c <JoyStick_Mode+0x8c>
		MoveForward();
 228:	0e 94 28 02 	call	0x450	; 0x450 <MoveForward>
		ShowingTheValue('F');
 22c:	86 e4       	ldi	r24, 0x46	; 70
 22e:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <ShowingTheValue>
		UART_sendString(buffer);
 232:	ce 01       	movw	r24, r28
 234:	01 96       	adiw	r24, 0x01	; 1
 236:	0e 94 ef 03 	call	0x7de	; 0x7de <UART_sendString>
 23a:	27 c0       	rjmp	.+78     	; 0x28a <JoyStick_Mode+0xda>
	}
	else if (x < 400) {
 23c:	90 e9       	ldi	r25, 0x90	; 144
 23e:	e9 16       	cp	r14, r25
 240:	91 e0       	ldi	r25, 0x01	; 1
 242:	f9 06       	cpc	r15, r25
 244:	50 f4       	brcc	.+20     	; 0x25a <JoyStick_Mode+0xaa>
		MoveLeft();
 246:	0e 94 79 02 	call	0x4f2	; 0x4f2 <MoveLeft>
		ShowingTheValue('L');
 24a:	8c e4       	ldi	r24, 0x4C	; 76
 24c:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <ShowingTheValue>
		UART_sendString(buffer);
 250:	ce 01       	movw	r24, r28
 252:	01 96       	adiw	r24, 0x01	; 1
 254:	0e 94 ef 03 	call	0x7de	; 0x7de <UART_sendString>
 258:	18 c0       	rjmp	.+48     	; 0x28a <JoyStick_Mode+0xda>
	}
	else if (x > 600) {
 25a:	89 e5       	ldi	r24, 0x59	; 89
 25c:	e8 16       	cp	r14, r24
 25e:	82 e0       	ldi	r24, 0x02	; 2
 260:	f8 06       	cpc	r15, r24
 262:	50 f0       	brcs	.+20     	; 0x278 <JoyStick_Mode+0xc8>
		MoveRight();
 264:	0e 94 5e 02 	call	0x4bc	; 0x4bc <MoveRight>
		ShowingTheValue('R');
 268:	82 e5       	ldi	r24, 0x52	; 82
 26a:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <ShowingTheValue>
		UART_sendString(buffer);
 26e:	ce 01       	movw	r24, r28
 270:	01 96       	adiw	r24, 0x01	; 1
 272:	0e 94 ef 03 	call	0x7de	; 0x7de <UART_sendString>
 276:	09 c0       	rjmp	.+18     	; 0x28a <JoyStick_Mode+0xda>
	}
	else {
		Stop();
 278:	0e 94 94 02 	call	0x528	; 0x528 <Stop>
		ShowingTheValue('S');
 27c:	83 e5       	ldi	r24, 0x53	; 83
 27e:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <ShowingTheValue>
		UART_sendString(buffer);
 282:	ce 01       	movw	r24, r28
 284:	01 96       	adiw	r24, 0x01	; 1
 286:	0e 94 ef 03 	call	0x7de	; 0x7de <UART_sendString>
 28a:	8f e4       	ldi	r24, 0x4F	; 79
 28c:	93 ec       	ldi	r25, 0xC3	; 195
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <JoyStick_Mode+0xde>
 292:	00 c0       	rjmp	.+0      	; 0x294 <JoyStick_Mode+0xe4>
 294:	00 00       	nop
	}

	_delay_ms(200);

}
 296:	64 96       	adiw	r28, 0x14	; 20
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	f8 94       	cli
 29c:	de bf       	out	0x3e, r29	; 62
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	cd bf       	out	0x3d, r28	; 61
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	1f 91       	pop	r17
 2a8:	0f 91       	pop	r16
 2aa:	ff 90       	pop	r15
 2ac:	ef 90       	pop	r14
 2ae:	08 95       	ret

000002b0 <MobileApp_Mode>:

void MobileApp_Mode() {
	char command = UART_Receive(); // Receive from ESP
 2b0:	0e 94 2d 04 	call	0x85a	; 0x85a <UART_Receive>
	switch(command) {
 2b4:	8c 36       	cpi	r24, 0x6C	; 108
 2b6:	b9 f0       	breq	.+46     	; 0x2e6 <MobileApp_Mode+0x36>
 2b8:	28 f4       	brcc	.+10     	; 0x2c4 <MobileApp_Mode+0x14>
 2ba:	82 36       	cpi	r24, 0x62	; 98
 2bc:	71 f0       	breq	.+28     	; 0x2da <MobileApp_Mode+0x2a>
 2be:	86 36       	cpi	r24, 0x66	; 102
 2c0:	31 f0       	breq	.+12     	; 0x2ce <MobileApp_Mode+0x1e>
 2c2:	23 c0       	rjmp	.+70     	; 0x30a <MobileApp_Mode+0x5a>
 2c4:	82 37       	cpi	r24, 0x72	; 114
 2c6:	a9 f0       	breq	.+42     	; 0x2f2 <MobileApp_Mode+0x42>
 2c8:	83 37       	cpi	r24, 0x73	; 115
 2ca:	c9 f0       	breq	.+50     	; 0x2fe <MobileApp_Mode+0x4e>
 2cc:	1e c0       	rjmp	.+60     	; 0x30a <MobileApp_Mode+0x5a>
		case 'f': MoveForward(); ShowingTheValue('F'); break;
 2ce:	0e 94 28 02 	call	0x450	; 0x450 <MoveForward>
 2d2:	86 e4       	ldi	r24, 0x46	; 70
 2d4:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <ShowingTheValue>
 2d8:	1c c0       	rjmp	.+56     	; 0x312 <MobileApp_Mode+0x62>
		case 'b': MoveBackward(); ShowingTheValue('B'); break;
 2da:	0e 94 43 02 	call	0x486	; 0x486 <MoveBackward>
 2de:	82 e4       	ldi	r24, 0x42	; 66
 2e0:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <ShowingTheValue>
 2e4:	16 c0       	rjmp	.+44     	; 0x312 <MobileApp_Mode+0x62>
		case 'l': MoveLeft(); ShowingTheValue('L'); break;
 2e6:	0e 94 79 02 	call	0x4f2	; 0x4f2 <MoveLeft>
 2ea:	8c e4       	ldi	r24, 0x4C	; 76
 2ec:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <ShowingTheValue>
 2f0:	10 c0       	rjmp	.+32     	; 0x312 <MobileApp_Mode+0x62>
		case 'r': MoveRight(); ShowingTheValue('R'); break;
 2f2:	0e 94 5e 02 	call	0x4bc	; 0x4bc <MoveRight>
 2f6:	82 e5       	ldi	r24, 0x52	; 82
 2f8:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <ShowingTheValue>
 2fc:	0a c0       	rjmp	.+20     	; 0x312 <MobileApp_Mode+0x62>
		case 's': Stop(); ShowingTheValue('S'); break;
 2fe:	0e 94 94 02 	call	0x528	; 0x528 <Stop>
 302:	83 e5       	ldi	r24, 0x53	; 83
 304:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <ShowingTheValue>
 308:	04 c0       	rjmp	.+8      	; 0x312 <MobileApp_Mode+0x62>
		default: UART_sendString("Invalid Command\n"); break;
 30a:	8a e8       	ldi	r24, 0x8A	; 138
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	0e 94 ef 03 	call	0x7de	; 0x7de <UART_sendString>
 312:	8f e4       	ldi	r24, 0x4F	; 79
 314:	93 ec       	ldi	r25, 0xC3	; 195
 316:	01 97       	sbiw	r24, 0x01	; 1
 318:	f1 f7       	brne	.-4      	; 0x316 <MobileApp_Mode+0x66>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <MobileApp_Mode+0x6c>
 31c:	00 00       	nop
 31e:	08 95       	ret

00000320 <Voice_Mode>:
	_delay_ms(200);
}


void Voice_Mode() {
	char command = UART_Receive();  //Receive from raspberry  Pi 
 320:	0e 94 2d 04 	call	0x85a	; 0x85a <UART_Receive>
	switch(command) {
 324:	8c 36       	cpi	r24, 0x6C	; 108
 326:	b9 f0       	breq	.+46     	; 0x356 <Voice_Mode+0x36>
 328:	28 f4       	brcc	.+10     	; 0x334 <Voice_Mode+0x14>
 32a:	82 36       	cpi	r24, 0x62	; 98
 32c:	71 f0       	breq	.+28     	; 0x34a <Voice_Mode+0x2a>
 32e:	86 36       	cpi	r24, 0x66	; 102
 330:	31 f0       	breq	.+12     	; 0x33e <Voice_Mode+0x1e>
 332:	23 c0       	rjmp	.+70     	; 0x37a <Voice_Mode+0x5a>
 334:	82 37       	cpi	r24, 0x72	; 114
 336:	a9 f0       	breq	.+42     	; 0x362 <Voice_Mode+0x42>
 338:	83 37       	cpi	r24, 0x73	; 115
 33a:	c9 f0       	breq	.+50     	; 0x36e <Voice_Mode+0x4e>
 33c:	1e c0       	rjmp	.+60     	; 0x37a <Voice_Mode+0x5a>
		case 'f': MoveForward(); ShowingTheValue('F'); break;
 33e:	0e 94 28 02 	call	0x450	; 0x450 <MoveForward>
 342:	86 e4       	ldi	r24, 0x46	; 70
 344:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <ShowingTheValue>
 348:	1c c0       	rjmp	.+56     	; 0x382 <Voice_Mode+0x62>
		case 'b': MoveBackward(); ShowingTheValue('B'); break;
 34a:	0e 94 43 02 	call	0x486	; 0x486 <MoveBackward>
 34e:	82 e4       	ldi	r24, 0x42	; 66
 350:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <ShowingTheValue>
 354:	16 c0       	rjmp	.+44     	; 0x382 <Voice_Mode+0x62>
		case 'l': MoveLeft(); ShowingTheValue('L'); break;
 356:	0e 94 79 02 	call	0x4f2	; 0x4f2 <MoveLeft>
 35a:	8c e4       	ldi	r24, 0x4C	; 76
 35c:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <ShowingTheValue>
 360:	10 c0       	rjmp	.+32     	; 0x382 <Voice_Mode+0x62>
		case 'r': MoveRight(); ShowingTheValue('R'); break;
 362:	0e 94 5e 02 	call	0x4bc	; 0x4bc <MoveRight>
 366:	82 e5       	ldi	r24, 0x52	; 82
 368:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <ShowingTheValue>
 36c:	0a c0       	rjmp	.+20     	; 0x382 <Voice_Mode+0x62>
		case 's': Stop(); ShowingTheValue('S'); break;
 36e:	0e 94 94 02 	call	0x528	; 0x528 <Stop>
 372:	83 e5       	ldi	r24, 0x53	; 83
 374:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <ShowingTheValue>
 378:	04 c0       	rjmp	.+8      	; 0x382 <Voice_Mode+0x62>
		default: UART_sendString("Invalid Command\n"); break;
 37a:	8a e8       	ldi	r24, 0x8A	; 138
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 ef 03 	call	0x7de	; 0x7de <UART_sendString>
 382:	8f e4       	ldi	r24, 0x4F	; 79
 384:	93 ec       	ldi	r25, 0xC3	; 195
 386:	01 97       	sbiw	r24, 0x01	; 1
 388:	f1 f7       	brne	.-4      	; 0x386 <Voice_Mode+0x66>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <Voice_Mode+0x6c>
 38c:	00 00       	nop
 38e:	08 95       	ret

00000390 <EyeTracking_Mode>:
	_delay_ms(200);
}

void EyeTracking_Mode() {
	
	char direction = UART_Receive();  //Receive from raspberry  Pi 
 390:	0e 94 2d 04 	call	0x85a	; 0x85a <UART_Receive>
	switch(direction) {
 394:	8c 36       	cpi	r24, 0x6C	; 108
 396:	b9 f0       	breq	.+46     	; 0x3c6 <EyeTracking_Mode+0x36>
 398:	28 f4       	brcc	.+10     	; 0x3a4 <EyeTracking_Mode+0x14>
 39a:	82 36       	cpi	r24, 0x62	; 98
 39c:	71 f0       	breq	.+28     	; 0x3ba <EyeTracking_Mode+0x2a>
 39e:	86 36       	cpi	r24, 0x66	; 102
 3a0:	31 f0       	breq	.+12     	; 0x3ae <EyeTracking_Mode+0x1e>
 3a2:	23 c0       	rjmp	.+70     	; 0x3ea <EyeTracking_Mode+0x5a>
 3a4:	82 37       	cpi	r24, 0x72	; 114
 3a6:	a9 f0       	breq	.+42     	; 0x3d2 <EyeTracking_Mode+0x42>
 3a8:	83 37       	cpi	r24, 0x73	; 115
 3aa:	c9 f0       	breq	.+50     	; 0x3de <EyeTracking_Mode+0x4e>
 3ac:	1e c0       	rjmp	.+60     	; 0x3ea <EyeTracking_Mode+0x5a>
		case 'f': MoveForward(); ShowingTheValue('F'); break;
 3ae:	0e 94 28 02 	call	0x450	; 0x450 <MoveForward>
 3b2:	86 e4       	ldi	r24, 0x46	; 70
 3b4:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <ShowingTheValue>
 3b8:	1c c0       	rjmp	.+56     	; 0x3f2 <EyeTracking_Mode+0x62>
		case 'b': MoveBackward(); ShowingTheValue('B'); break;
 3ba:	0e 94 43 02 	call	0x486	; 0x486 <MoveBackward>
 3be:	82 e4       	ldi	r24, 0x42	; 66
 3c0:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <ShowingTheValue>
 3c4:	16 c0       	rjmp	.+44     	; 0x3f2 <EyeTracking_Mode+0x62>
		case 'l': MoveLeft(); ShowingTheValue('L'); break;
 3c6:	0e 94 79 02 	call	0x4f2	; 0x4f2 <MoveLeft>
 3ca:	8c e4       	ldi	r24, 0x4C	; 76
 3cc:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <ShowingTheValue>
 3d0:	10 c0       	rjmp	.+32     	; 0x3f2 <EyeTracking_Mode+0x62>
		case 'r': MoveRight(); ShowingTheValue('R'); break;
 3d2:	0e 94 5e 02 	call	0x4bc	; 0x4bc <MoveRight>
 3d6:	82 e5       	ldi	r24, 0x52	; 82
 3d8:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <ShowingTheValue>
 3dc:	0a c0       	rjmp	.+20     	; 0x3f2 <EyeTracking_Mode+0x62>
		case 's': Stop(); ShowingTheValue('S'); break;
 3de:	0e 94 94 02 	call	0x528	; 0x528 <Stop>
 3e2:	83 e5       	ldi	r24, 0x53	; 83
 3e4:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <ShowingTheValue>
 3e8:	04 c0       	rjmp	.+8      	; 0x3f2 <EyeTracking_Mode+0x62>
		default: UART_sendString("Invalid Command\n"); break;
 3ea:	8a e8       	ldi	r24, 0x8A	; 138
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	0e 94 ef 03 	call	0x7de	; 0x7de <UART_sendString>
 3f2:	8f e4       	ldi	r24, 0x4F	; 79
 3f4:	93 ec       	ldi	r25, 0xC3	; 195
 3f6:	01 97       	sbiw	r24, 0x01	; 1
 3f8:	f1 f7       	brne	.-4      	; 0x3f6 <EyeTracking_Mode+0x66>
 3fa:	00 c0       	rjmp	.+0      	; 0x3fc <EyeTracking_Mode+0x6c>
 3fc:	00 00       	nop
 3fe:	08 95       	ret

00000400 <PWM_init>:
#include "TIMER_Private.h"

// PWM Initialization
void PWM_init() {
	
	DIO_SetPinDirection(PORT_C,PIN4,PIN_OUTPUT); //Output pins OCR1B (PD4)
 400:	41 e0       	ldi	r20, 0x01	; 1
 402:	64 e0       	ldi	r22, 0x04	; 4
 404:	83 e0       	ldi	r24, 0x03	; 3
 406:	0e 94 bd 02 	call	0x57a	; 0x57a <DIO_SetPinDirection>
	DIO_SetPinDirection(PORT_C,PIN5,PIN_OUTPUT); //Output pins OCR1A (PD5)
 40a:	41 e0       	ldi	r20, 0x01	; 1
 40c:	65 e0       	ldi	r22, 0x05	; 5
 40e:	83 e0       	ldi	r24, 0x03	; 3
 410:	0e 94 bd 02 	call	0x57a	; 0x57a <DIO_SetPinDirection>
	
	// Fast PWM Mode 14, Non-inverting
	TTCR1A = (1 << TTCR1A_COM1A1) | (1 << TTCR1A_COM1B1) | (1 << TTCR1A_WGM11);
 414:	82 ea       	ldi	r24, 0xA2	; 162
 416:	8f bd       	out	0x2f, r24	; 47
	TTCR1B = (1 << TTCR1B_WGM12) | (1 << TTCR1B_WGM13) | (1 << TTCR1B_CS11);  // Prescaler = 8
 418:	8a e1       	ldi	r24, 0x1A	; 26
 41a:	8e bd       	out	0x2e, r24	; 46

	ICR1 = 255;  // PWM 8-bit
 41c:	8f ef       	ldi	r24, 0xFF	; 255
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	98 bd       	out	0x28, r25	; 40
 422:	87 bd       	out	0x27, r24	; 39
 424:	08 95       	ret

00000426 <Motor_init>:
}

// Direction control via L298N (Connected to PORTC)

void Motor_init() {
	DIO_SetPinDirection(PORT_C,PIN0,PIN_OUTPUT); //Output pins IN1 (PC0)
 426:	41 e0       	ldi	r20, 0x01	; 1
 428:	60 e0       	ldi	r22, 0x00	; 0
 42a:	83 e0       	ldi	r24, 0x03	; 3
 42c:	0e 94 bd 02 	call	0x57a	; 0x57a <DIO_SetPinDirection>
	DIO_SetPinDirection(PORT_C,PIN1,PIN_OUTPUT); //Output pins IN2 (PC1)
 430:	41 e0       	ldi	r20, 0x01	; 1
 432:	61 e0       	ldi	r22, 0x01	; 1
 434:	83 e0       	ldi	r24, 0x03	; 3
 436:	0e 94 bd 02 	call	0x57a	; 0x57a <DIO_SetPinDirection>
	DIO_SetPinDirection(PORT_C,PIN2,PIN_OUTPUT); //Output pins IN3 (PC2)
 43a:	41 e0       	ldi	r20, 0x01	; 1
 43c:	62 e0       	ldi	r22, 0x02	; 2
 43e:	83 e0       	ldi	r24, 0x03	; 3
 440:	0e 94 bd 02 	call	0x57a	; 0x57a <DIO_SetPinDirection>
	DIO_SetPinDirection(PORT_C,PIN3,PIN_OUTPUT); //Output pins IN4 (PC3)
 444:	41 e0       	ldi	r20, 0x01	; 1
 446:	63 e0       	ldi	r22, 0x03	; 3
 448:	83 e0       	ldi	r24, 0x03	; 3
 44a:	0e 94 bd 02 	call	0x57a	; 0x57a <DIO_SetPinDirection>
 44e:	08 95       	ret

00000450 <MoveForward>:
}

void MoveForward() {
	OCR1A=191;   // Left
 450:	8f eb       	ldi	r24, 0xBF	; 191
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	9c bd       	out	0x2c, r25	; 44
 456:	8b bd       	out	0x2b, r24	; 43
	OCR1B=191;   // Right
 458:	9a bd       	out	0x2a, r25	; 42
 45a:	89 bd       	out	0x29, r24	; 41
	
	DIO_SetPinValue(PORT_C,PIN0,PIN_HIGH);
 45c:	41 e0       	ldi	r20, 0x01	; 1
 45e:	60 e0       	ldi	r22, 0x00	; 0
 460:	83 e0       	ldi	r24, 0x03	; 3
 462:	0e 94 33 03 	call	0x666	; 0x666 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN2,PIN_HIGH);
 466:	41 e0       	ldi	r20, 0x01	; 1
 468:	62 e0       	ldi	r22, 0x02	; 2
 46a:	83 e0       	ldi	r24, 0x03	; 3
 46c:	0e 94 33 03 	call	0x666	; 0x666 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN1,PIN_LOW);
 470:	40 e0       	ldi	r20, 0x00	; 0
 472:	61 e0       	ldi	r22, 0x01	; 1
 474:	83 e0       	ldi	r24, 0x03	; 3
 476:	0e 94 33 03 	call	0x666	; 0x666 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN3,PIN_LOW);
 47a:	40 e0       	ldi	r20, 0x00	; 0
 47c:	63 e0       	ldi	r22, 0x03	; 3
 47e:	83 e0       	ldi	r24, 0x03	; 3
 480:	0e 94 33 03 	call	0x666	; 0x666 <DIO_SetPinValue>
 484:	08 95       	ret

00000486 <MoveBackward>:
}

void MoveBackward() {
	OCR1A=191;
 486:	8f eb       	ldi	r24, 0xBF	; 191
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	9c bd       	out	0x2c, r25	; 44
 48c:	8b bd       	out	0x2b, r24	; 43
	OCR1B=191;
 48e:	9a bd       	out	0x2a, r25	; 42
 490:	89 bd       	out	0x29, r24	; 41

	DIO_SetPinValue(PORT_C,PIN1,PIN_HIGH);
 492:	41 e0       	ldi	r20, 0x01	; 1
 494:	61 e0       	ldi	r22, 0x01	; 1
 496:	83 e0       	ldi	r24, 0x03	; 3
 498:	0e 94 33 03 	call	0x666	; 0x666 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN3,PIN_HIGH);
 49c:	41 e0       	ldi	r20, 0x01	; 1
 49e:	63 e0       	ldi	r22, 0x03	; 3
 4a0:	83 e0       	ldi	r24, 0x03	; 3
 4a2:	0e 94 33 03 	call	0x666	; 0x666 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN0,PIN_LOW);
 4a6:	40 e0       	ldi	r20, 0x00	; 0
 4a8:	60 e0       	ldi	r22, 0x00	; 0
 4aa:	83 e0       	ldi	r24, 0x03	; 3
 4ac:	0e 94 33 03 	call	0x666	; 0x666 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN2,PIN_LOW);
 4b0:	40 e0       	ldi	r20, 0x00	; 0
 4b2:	62 e0       	ldi	r22, 0x02	; 2
 4b4:	83 e0       	ldi	r24, 0x03	; 3
 4b6:	0e 94 33 03 	call	0x666	; 0x666 <DIO_SetPinValue>
 4ba:	08 95       	ret

000004bc <MoveRight>:
}

void MoveRight() {
	OCR1A=191;
 4bc:	8f eb       	ldi	r24, 0xBF	; 191
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	9c bd       	out	0x2c, r25	; 44
 4c2:	8b bd       	out	0x2b, r24	; 43
	OCR1B=0;
 4c4:	1a bc       	out	0x2a, r1	; 42
 4c6:	19 bc       	out	0x29, r1	; 41

	DIO_SetPinValue(PORT_C,PIN0,PIN_HIGH);  // Left Motor Forward
 4c8:	41 e0       	ldi	r20, 0x01	; 1
 4ca:	60 e0       	ldi	r22, 0x00	; 0
 4cc:	83 e0       	ldi	r24, 0x03	; 3
 4ce:	0e 94 33 03 	call	0x666	; 0x666 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN1,PIN_LOW);
 4d2:	40 e0       	ldi	r20, 0x00	; 0
 4d4:	61 e0       	ldi	r22, 0x01	; 1
 4d6:	83 e0       	ldi	r24, 0x03	; 3
 4d8:	0e 94 33 03 	call	0x666	; 0x666 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN2,PIN_LOW);  // Right Motor Stop
 4dc:	40 e0       	ldi	r20, 0x00	; 0
 4de:	62 e0       	ldi	r22, 0x02	; 2
 4e0:	83 e0       	ldi	r24, 0x03	; 3
 4e2:	0e 94 33 03 	call	0x666	; 0x666 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN3,PIN_LOW);
 4e6:	40 e0       	ldi	r20, 0x00	; 0
 4e8:	63 e0       	ldi	r22, 0x03	; 3
 4ea:	83 e0       	ldi	r24, 0x03	; 3
 4ec:	0e 94 33 03 	call	0x666	; 0x666 <DIO_SetPinValue>
 4f0:	08 95       	ret

000004f2 <MoveLeft>:

}

void MoveLeft() {
	OCR1A=0;
 4f2:	1c bc       	out	0x2c, r1	; 44
 4f4:	1b bc       	out	0x2b, r1	; 43
	OCR1B=191;
 4f6:	8f eb       	ldi	r24, 0xBF	; 191
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	9a bd       	out	0x2a, r25	; 42
 4fc:	89 bd       	out	0x29, r24	; 41
	
	DIO_SetPinValue(PORT_C,PIN2,PIN_HIGH);  // Right Motor Forward
 4fe:	41 e0       	ldi	r20, 0x01	; 1
 500:	62 e0       	ldi	r22, 0x02	; 2
 502:	83 e0       	ldi	r24, 0x03	; 3
 504:	0e 94 33 03 	call	0x666	; 0x666 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN3,PIN_LOW);
 508:	40 e0       	ldi	r20, 0x00	; 0
 50a:	63 e0       	ldi	r22, 0x03	; 3
 50c:	83 e0       	ldi	r24, 0x03	; 3
 50e:	0e 94 33 03 	call	0x666	; 0x666 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN0,PIN_LOW);  // Left Motor Stop
 512:	40 e0       	ldi	r20, 0x00	; 0
 514:	60 e0       	ldi	r22, 0x00	; 0
 516:	83 e0       	ldi	r24, 0x03	; 3
 518:	0e 94 33 03 	call	0x666	; 0x666 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN1,PIN_LOW);
 51c:	40 e0       	ldi	r20, 0x00	; 0
 51e:	61 e0       	ldi	r22, 0x01	; 1
 520:	83 e0       	ldi	r24, 0x03	; 3
 522:	0e 94 33 03 	call	0x666	; 0x666 <DIO_SetPinValue>
 526:	08 95       	ret

00000528 <Stop>:
}

void Stop() {
	OCR1A=0;
 528:	1c bc       	out	0x2c, r1	; 44
 52a:	1b bc       	out	0x2b, r1	; 43
	OCR1B=0;
 52c:	1a bc       	out	0x2a, r1	; 42
 52e:	19 bc       	out	0x29, r1	; 41
	// All motors stop
	DIO_SetPinValue(PORT_C,PIN0,PIN_LOW);
 530:	40 e0       	ldi	r20, 0x00	; 0
 532:	60 e0       	ldi	r22, 0x00	; 0
 534:	83 e0       	ldi	r24, 0x03	; 3
 536:	0e 94 33 03 	call	0x666	; 0x666 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN1,PIN_LOW);
 53a:	40 e0       	ldi	r20, 0x00	; 0
 53c:	61 e0       	ldi	r22, 0x01	; 1
 53e:	83 e0       	ldi	r24, 0x03	; 3
 540:	0e 94 33 03 	call	0x666	; 0x666 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN2,PIN_LOW);
 544:	40 e0       	ldi	r20, 0x00	; 0
 546:	62 e0       	ldi	r22, 0x02	; 2
 548:	83 e0       	ldi	r24, 0x03	; 3
 54a:	0e 94 33 03 	call	0x666	; 0x666 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_C,PIN3,PIN_LOW);
 54e:	40 e0       	ldi	r20, 0x00	; 0
 550:	63 e0       	ldi	r22, 0x03	; 3
 552:	83 e0       	ldi	r24, 0x03	; 3
 554:	0e 94 33 03 	call	0x666	; 0x666 <DIO_SetPinValue>
 558:	08 95       	ret

0000055a <ADC_Init>:
#include "ADC_Interface.h"



void ADC_Init() {
	ADMUX = (1<<ADMUX_REFS0);  // AVcc as reference
 55a:	80 e4       	ldi	r24, 0x40	; 64
 55c:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADCSRA_ADEN)|(1<<ADCSRA_ADPS2)|(1<<ADCSRA_ADPS1);  //Enable ADC, prescaler 64
 55e:	86 e8       	ldi	r24, 0x86	; 134
 560:	86 b9       	out	0x06, r24	; 6
 562:	08 95       	ret

00000564 <ADC_Read>:
}

u16 ADC_Read(u8 channel) {
	ADMUX = (1 << ADMUX_REFS0) | (channel & 0x0F);  // Select ADC channel
 564:	8f 70       	andi	r24, 0x0F	; 15
 566:	80 64       	ori	r24, 0x40	; 64
 568:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<< ADCSRA_ADSC);   // Start conversion
 56a:	86 b1       	in	r24, 0x06	; 6
 56c:	80 64       	ori	r24, 0x40	; 64
 56e:	86 b9       	out	0x06, r24	; 6
	while(ADCSRA & (1<< ADCSRA_ADSC));  // Wait for conversion to finish
 570:	36 99       	sbic	0x06, 6	; 6
 572:	fe cf       	rjmp	.-4      	; 0x570 <ADC_Read+0xc>
	return ADC_OUTPUT;
 574:	84 b1       	in	r24, 0x04	; 4
 576:	95 b1       	in	r25, 0x05	; 5
}
 578:	08 95       	ret

0000057a <DIO_SetPinDirection>:

/* Function definitions that deals with pins */

void DIO_SetPinDirection(u8 PortName,u8 PinNumber,u8 PinDirection)
{
	if(PinDirection==PIN_OUTPUT)
 57a:	41 30       	cpi	r20, 0x01	; 1
 57c:	b9 f5       	brne	.+110    	; 0x5ec <DIO_SetPinDirection+0x72>
	{
		switch(PortName)
 57e:	82 30       	cpi	r24, 0x02	; 2
 580:	a1 f0       	breq	.+40     	; 0x5aa <DIO_SetPinDirection+0x30>
 582:	18 f4       	brcc	.+6      	; 0x58a <DIO_SetPinDirection+0x10>
 584:	81 30       	cpi	r24, 0x01	; 1
 586:	31 f0       	breq	.+12     	; 0x594 <DIO_SetPinDirection+0x1a>
 588:	08 95       	ret
 58a:	83 30       	cpi	r24, 0x03	; 3
 58c:	c9 f0       	breq	.+50     	; 0x5c0 <DIO_SetPinDirection+0x46>
 58e:	84 30       	cpi	r24, 0x04	; 4
 590:	11 f1       	breq	.+68     	; 0x5d6 <DIO_SetPinDirection+0x5c>
 592:	08 95       	ret
		{	case PORT_A: SET_BIT(DDRA,PinNumber);
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	02 c0       	rjmp	.+4      	; 0x59e <DIO_SetPinDirection+0x24>
 59a:	88 0f       	add	r24, r24
 59c:	99 1f       	adc	r25, r25
 59e:	6a 95       	dec	r22
 5a0:	e2 f7       	brpl	.-8      	; 0x59a <DIO_SetPinDirection+0x20>
 5a2:	9a b3       	in	r25, 0x1a	; 26
 5a4:	89 2b       	or	r24, r25
 5a6:	8a bb       	out	0x1a, r24	; 26
			break;
 5a8:	08 95       	ret
			case PORT_B: SET_BIT(DDRB,PinNumber);
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <DIO_SetPinDirection+0x3a>
 5b0:	88 0f       	add	r24, r24
 5b2:	99 1f       	adc	r25, r25
 5b4:	6a 95       	dec	r22
 5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <DIO_SetPinDirection+0x36>
 5b8:	97 b3       	in	r25, 0x17	; 23
 5ba:	89 2b       	or	r24, r25
 5bc:	87 bb       	out	0x17, r24	; 23
			break;
 5be:	08 95       	ret
			case PORT_C: SET_BIT(DDRC,PinNumber);
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <DIO_SetPinDirection+0x50>
 5c6:	88 0f       	add	r24, r24
 5c8:	99 1f       	adc	r25, r25
 5ca:	6a 95       	dec	r22
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <DIO_SetPinDirection+0x4c>
 5ce:	94 b3       	in	r25, 0x14	; 20
 5d0:	89 2b       	or	r24, r25
 5d2:	84 bb       	out	0x14, r24	; 20
			break;
 5d4:	08 95       	ret
			case PORT_D: SET_BIT(DDRD,PinNumber);
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <DIO_SetPinDirection+0x66>
 5dc:	88 0f       	add	r24, r24
 5de:	99 1f       	adc	r25, r25
 5e0:	6a 95       	dec	r22
 5e2:	e2 f7       	brpl	.-8      	; 0x5dc <DIO_SetPinDirection+0x62>
 5e4:	91 b3       	in	r25, 0x11	; 17
 5e6:	89 2b       	or	r24, r25
 5e8:	81 bb       	out	0x11, r24	; 17
			break;
 5ea:	08 95       	ret
		}
	}
	else if(PinDirection==PIN_INPUT)
 5ec:	41 11       	cpse	r20, r1
 5ee:	3a c0       	rjmp	.+116    	; 0x664 <DIO_SetPinDirection+0xea>
	{
		switch(PortName)
 5f0:	82 30       	cpi	r24, 0x02	; 2
 5f2:	a9 f0       	breq	.+42     	; 0x61e <DIO_SetPinDirection+0xa4>
 5f4:	18 f4       	brcc	.+6      	; 0x5fc <DIO_SetPinDirection+0x82>
 5f6:	81 30       	cpi	r24, 0x01	; 1
 5f8:	31 f0       	breq	.+12     	; 0x606 <DIO_SetPinDirection+0x8c>
 5fa:	08 95       	ret
 5fc:	83 30       	cpi	r24, 0x03	; 3
 5fe:	d9 f0       	breq	.+54     	; 0x636 <DIO_SetPinDirection+0xbc>
 600:	84 30       	cpi	r24, 0x04	; 4
 602:	29 f1       	breq	.+74     	; 0x64e <DIO_SetPinDirection+0xd4>
 604:	08 95       	ret
		{	case PORT_A: CLR_BIT(DDRA,PinNumber);
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	02 c0       	rjmp	.+4      	; 0x610 <DIO_SetPinDirection+0x96>
 60c:	88 0f       	add	r24, r24
 60e:	99 1f       	adc	r25, r25
 610:	6a 95       	dec	r22
 612:	e2 f7       	brpl	.-8      	; 0x60c <DIO_SetPinDirection+0x92>
 614:	80 95       	com	r24
 616:	9a b3       	in	r25, 0x1a	; 26
 618:	89 23       	and	r24, r25
 61a:	8a bb       	out	0x1a, r24	; 26
			break;
 61c:	08 95       	ret
			case PORT_B: CLR_BIT(DDRB,PinNumber);
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	02 c0       	rjmp	.+4      	; 0x628 <DIO_SetPinDirection+0xae>
 624:	88 0f       	add	r24, r24
 626:	99 1f       	adc	r25, r25
 628:	6a 95       	dec	r22
 62a:	e2 f7       	brpl	.-8      	; 0x624 <DIO_SetPinDirection+0xaa>
 62c:	80 95       	com	r24
 62e:	97 b3       	in	r25, 0x17	; 23
 630:	89 23       	and	r24, r25
 632:	87 bb       	out	0x17, r24	; 23
			break;
 634:	08 95       	ret
			case PORT_C: CLR_BIT(DDRC,PinNumber);
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	02 c0       	rjmp	.+4      	; 0x640 <DIO_SetPinDirection+0xc6>
 63c:	88 0f       	add	r24, r24
 63e:	99 1f       	adc	r25, r25
 640:	6a 95       	dec	r22
 642:	e2 f7       	brpl	.-8      	; 0x63c <DIO_SetPinDirection+0xc2>
 644:	80 95       	com	r24
 646:	94 b3       	in	r25, 0x14	; 20
 648:	89 23       	and	r24, r25
 64a:	84 bb       	out	0x14, r24	; 20
			break;
 64c:	08 95       	ret
			case PORT_D: CLR_BIT(DDRD,PinNumber);
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	02 c0       	rjmp	.+4      	; 0x658 <DIO_SetPinDirection+0xde>
 654:	88 0f       	add	r24, r24
 656:	99 1f       	adc	r25, r25
 658:	6a 95       	dec	r22
 65a:	e2 f7       	brpl	.-8      	; 0x654 <DIO_SetPinDirection+0xda>
 65c:	80 95       	com	r24
 65e:	91 b3       	in	r25, 0x11	; 17
 660:	89 23       	and	r24, r25
 662:	81 bb       	out	0x11, r24	; 17
 664:	08 95       	ret

00000666 <DIO_SetPinValue>:
		}
	}
}
void DIO_SetPinValue(u8 PortName,u8 PinNumber,u8 PinValue)
{
		if(PinValue==PIN_HIGH)
 666:	41 30       	cpi	r20, 0x01	; 1
 668:	b9 f5       	brne	.+110    	; 0x6d8 <DIO_SetPinValue+0x72>
		{
			switch(PortName)
 66a:	82 30       	cpi	r24, 0x02	; 2
 66c:	a1 f0       	breq	.+40     	; 0x696 <DIO_SetPinValue+0x30>
 66e:	18 f4       	brcc	.+6      	; 0x676 <DIO_SetPinValue+0x10>
 670:	81 30       	cpi	r24, 0x01	; 1
 672:	31 f0       	breq	.+12     	; 0x680 <DIO_SetPinValue+0x1a>
 674:	08 95       	ret
 676:	83 30       	cpi	r24, 0x03	; 3
 678:	c9 f0       	breq	.+50     	; 0x6ac <DIO_SetPinValue+0x46>
 67a:	84 30       	cpi	r24, 0x04	; 4
 67c:	11 f1       	breq	.+68     	; 0x6c2 <DIO_SetPinValue+0x5c>
 67e:	08 95       	ret
			{	case PORT_A: SET_BIT(PORTA,PinNumber);
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	02 c0       	rjmp	.+4      	; 0x68a <DIO_SetPinValue+0x24>
 686:	88 0f       	add	r24, r24
 688:	99 1f       	adc	r25, r25
 68a:	6a 95       	dec	r22
 68c:	e2 f7       	brpl	.-8      	; 0x686 <DIO_SetPinValue+0x20>
 68e:	9b b3       	in	r25, 0x1b	; 27
 690:	89 2b       	or	r24, r25
 692:	8b bb       	out	0x1b, r24	; 27
				break;
 694:	08 95       	ret
				case PORT_B: SET_BIT(PORTB,PinNumber);
 696:	81 e0       	ldi	r24, 0x01	; 1
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	02 c0       	rjmp	.+4      	; 0x6a0 <DIO_SetPinValue+0x3a>
 69c:	88 0f       	add	r24, r24
 69e:	99 1f       	adc	r25, r25
 6a0:	6a 95       	dec	r22
 6a2:	e2 f7       	brpl	.-8      	; 0x69c <DIO_SetPinValue+0x36>
 6a4:	98 b3       	in	r25, 0x18	; 24
 6a6:	89 2b       	or	r24, r25
 6a8:	88 bb       	out	0x18, r24	; 24
				break;
 6aa:	08 95       	ret
				case PORT_C: SET_BIT(PORTC,PinNumber);
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <DIO_SetPinValue+0x50>
 6b2:	88 0f       	add	r24, r24
 6b4:	99 1f       	adc	r25, r25
 6b6:	6a 95       	dec	r22
 6b8:	e2 f7       	brpl	.-8      	; 0x6b2 <DIO_SetPinValue+0x4c>
 6ba:	95 b3       	in	r25, 0x15	; 21
 6bc:	89 2b       	or	r24, r25
 6be:	85 bb       	out	0x15, r24	; 21
				break;
 6c0:	08 95       	ret
				case PORT_D: SET_BIT(PORTD,PinNumber);
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <DIO_SetPinValue+0x66>
 6c8:	88 0f       	add	r24, r24
 6ca:	99 1f       	adc	r25, r25
 6cc:	6a 95       	dec	r22
 6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <DIO_SetPinValue+0x62>
 6d0:	92 b3       	in	r25, 0x12	; 18
 6d2:	89 2b       	or	r24, r25
 6d4:	82 bb       	out	0x12, r24	; 18
				break;
 6d6:	08 95       	ret
			}
		}
		else if(PinValue==PIN_LOW)
 6d8:	41 11       	cpse	r20, r1
 6da:	3a c0       	rjmp	.+116    	; 0x750 <DIO_SetPinValue+0xea>
		{
			switch(PortName)
 6dc:	82 30       	cpi	r24, 0x02	; 2
 6de:	a9 f0       	breq	.+42     	; 0x70a <DIO_SetPinValue+0xa4>
 6e0:	18 f4       	brcc	.+6      	; 0x6e8 <DIO_SetPinValue+0x82>
 6e2:	81 30       	cpi	r24, 0x01	; 1
 6e4:	31 f0       	breq	.+12     	; 0x6f2 <DIO_SetPinValue+0x8c>
 6e6:	08 95       	ret
 6e8:	83 30       	cpi	r24, 0x03	; 3
 6ea:	d9 f0       	breq	.+54     	; 0x722 <DIO_SetPinValue+0xbc>
 6ec:	84 30       	cpi	r24, 0x04	; 4
 6ee:	29 f1       	breq	.+74     	; 0x73a <DIO_SetPinValue+0xd4>
 6f0:	08 95       	ret
			{	case PORT_A: CLR_BIT(PORTA,PinNumber);
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	02 c0       	rjmp	.+4      	; 0x6fc <DIO_SetPinValue+0x96>
 6f8:	88 0f       	add	r24, r24
 6fa:	99 1f       	adc	r25, r25
 6fc:	6a 95       	dec	r22
 6fe:	e2 f7       	brpl	.-8      	; 0x6f8 <DIO_SetPinValue+0x92>
 700:	80 95       	com	r24
 702:	9b b3       	in	r25, 0x1b	; 27
 704:	89 23       	and	r24, r25
 706:	8b bb       	out	0x1b, r24	; 27
				break;
 708:	08 95       	ret
				case PORT_B: CLR_BIT(PORTB,PinNumber);
 70a:	81 e0       	ldi	r24, 0x01	; 1
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	02 c0       	rjmp	.+4      	; 0x714 <DIO_SetPinValue+0xae>
 710:	88 0f       	add	r24, r24
 712:	99 1f       	adc	r25, r25
 714:	6a 95       	dec	r22
 716:	e2 f7       	brpl	.-8      	; 0x710 <DIO_SetPinValue+0xaa>
 718:	80 95       	com	r24
 71a:	98 b3       	in	r25, 0x18	; 24
 71c:	89 23       	and	r24, r25
 71e:	88 bb       	out	0x18, r24	; 24
				break;
 720:	08 95       	ret
				case PORT_C: CLR_BIT(PORTC,PinNumber);
 722:	81 e0       	ldi	r24, 0x01	; 1
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	02 c0       	rjmp	.+4      	; 0x72c <DIO_SetPinValue+0xc6>
 728:	88 0f       	add	r24, r24
 72a:	99 1f       	adc	r25, r25
 72c:	6a 95       	dec	r22
 72e:	e2 f7       	brpl	.-8      	; 0x728 <DIO_SetPinValue+0xc2>
 730:	80 95       	com	r24
 732:	95 b3       	in	r25, 0x15	; 21
 734:	89 23       	and	r24, r25
 736:	85 bb       	out	0x15, r24	; 21
				break;
 738:	08 95       	ret
				case PORT_D: CLR_BIT(PORTD,PinNumber);
 73a:	81 e0       	ldi	r24, 0x01	; 1
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	02 c0       	rjmp	.+4      	; 0x744 <DIO_SetPinValue+0xde>
 740:	88 0f       	add	r24, r24
 742:	99 1f       	adc	r25, r25
 744:	6a 95       	dec	r22
 746:	e2 f7       	brpl	.-8      	; 0x740 <DIO_SetPinValue+0xda>
 748:	80 95       	com	r24
 74a:	92 b3       	in	r25, 0x12	; 18
 74c:	89 23       	and	r24, r25
 74e:	82 bb       	out	0x12, r24	; 18
 750:	08 95       	ret

00000752 <DIO_GetPinValue>:
		}
}
u8   DIO_GetPinValue(u8 Portname,u8 PinNumber)
{
	u8 PinState;
	switch(Portname)
 752:	82 30       	cpi	r24, 0x02	; 2
 754:	99 f0       	breq	.+38     	; 0x77c <DIO_GetPinValue+0x2a>
 756:	18 f4       	brcc	.+6      	; 0x75e <DIO_GetPinValue+0xc>
 758:	81 30       	cpi	r24, 0x01	; 1
 75a:	31 f0       	breq	.+12     	; 0x768 <DIO_GetPinValue+0x16>
 75c:	2c c0       	rjmp	.+88     	; 0x7b6 <DIO_GetPinValue+0x64>
 75e:	83 30       	cpi	r24, 0x03	; 3
 760:	b9 f0       	breq	.+46     	; 0x790 <DIO_GetPinValue+0x3e>
 762:	84 30       	cpi	r24, 0x04	; 4
 764:	f9 f0       	breq	.+62     	; 0x7a4 <DIO_GetPinValue+0x52>
 766:	27 c0       	rjmp	.+78     	; 0x7b6 <DIO_GetPinValue+0x64>
	{
		case PORT_A:PinState=GET_BIT(PINA,PinNumber);
 768:	89 b3       	in	r24, 0x19	; 25
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	02 c0       	rjmp	.+4      	; 0x772 <DIO_GetPinValue+0x20>
 76e:	95 95       	asr	r25
 770:	87 95       	ror	r24
 772:	6a 95       	dec	r22
 774:	e2 f7       	brpl	.-8      	; 0x76e <DIO_GetPinValue+0x1c>
 776:	98 2f       	mov	r25, r24
 778:	91 70       	andi	r25, 0x01	; 1
		break;
 77a:	1d c0       	rjmp	.+58     	; 0x7b6 <DIO_GetPinValue+0x64>
		case PORT_B:PinState=GET_BIT(PINB,PinNumber);
 77c:	86 b3       	in	r24, 0x16	; 22
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	02 c0       	rjmp	.+4      	; 0x786 <DIO_GetPinValue+0x34>
 782:	95 95       	asr	r25
 784:	87 95       	ror	r24
 786:	6a 95       	dec	r22
 788:	e2 f7       	brpl	.-8      	; 0x782 <DIO_GetPinValue+0x30>
 78a:	98 2f       	mov	r25, r24
 78c:	91 70       	andi	r25, 0x01	; 1
		break;
 78e:	13 c0       	rjmp	.+38     	; 0x7b6 <DIO_GetPinValue+0x64>
		case PORT_C:PinState=GET_BIT(PINC,PinNumber);
 790:	83 b3       	in	r24, 0x13	; 19
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	02 c0       	rjmp	.+4      	; 0x79a <DIO_GetPinValue+0x48>
 796:	95 95       	asr	r25
 798:	87 95       	ror	r24
 79a:	6a 95       	dec	r22
 79c:	e2 f7       	brpl	.-8      	; 0x796 <DIO_GetPinValue+0x44>
 79e:	98 2f       	mov	r25, r24
 7a0:	91 70       	andi	r25, 0x01	; 1
		break;
 7a2:	09 c0       	rjmp	.+18     	; 0x7b6 <DIO_GetPinValue+0x64>
		case PORT_D:PinState=GET_BIT(PIND,PinNumber);
 7a4:	80 b3       	in	r24, 0x10	; 16
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	02 c0       	rjmp	.+4      	; 0x7ae <DIO_GetPinValue+0x5c>
 7aa:	95 95       	asr	r25
 7ac:	87 95       	ror	r24
 7ae:	6a 95       	dec	r22
 7b0:	e2 f7       	brpl	.-8      	; 0x7aa <DIO_GetPinValue+0x58>
 7b2:	98 2f       	mov	r25, r24
 7b4:	91 70       	andi	r25, 0x01	; 1
		break;
	}
	return PinState;	
}
 7b6:	89 2f       	mov	r24, r25
 7b8:	08 95       	ret

000007ba <UART_init>:
#include "UART_Interface.h"
#include "TIMER_Private.h"

// UART Initialization
void UART_init(u16 baud) {
	u16 ubrr = F_CPU / 16 / baud - 1;
 7ba:	9c 01       	movw	r18, r24
 7bc:	40 e0       	ldi	r20, 0x00	; 0
 7be:	50 e0       	ldi	r21, 0x00	; 0
 7c0:	60 e2       	ldi	r22, 0x20	; 32
 7c2:	71 ea       	ldi	r23, 0xA1	; 161
 7c4:	87 e0       	ldi	r24, 0x07	; 7
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	0e 94 3f 04 	call	0x87e	; 0x87e <__udivmodsi4>
 7cc:	21 50       	subi	r18, 0x01	; 1
 7ce:	31 09       	sbc	r19, r1
	UBRRH = (u8)(ubrr >> 8);
 7d0:	30 bd       	out	0x20, r19	; 32
	UBRRL = (u8)ubrr;
 7d2:	29 b9       	out	0x09, r18	; 9
	// Enable receiver and transmitter
	UCSRB = (1 << UCSRB_RXEN) | (1 << UCSRB_TXEN);
 7d4:	88 e1       	ldi	r24, 0x18	; 24
 7d6:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << UCSRC_URSEL) | (1 << UCSRC_UCSZ1) | (1 << UCSRC_UCSZ0);  // Set frame format: 8 data bits, 1 stop bit
 7d8:	86 e8       	ldi	r24, 0x86	; 134
 7da:	80 bd       	out	0x20, r24	; 32
 7dc:	08 95       	ret

000007de <UART_sendString>:
}

// Send String via UART
void UART_sendString(const u8* data) {
 7de:	fc 01       	movw	r30, r24
	while (*data) {
 7e0:	04 c0       	rjmp	.+8      	; 0x7ea <UART_sendString+0xc>
		while (!(UCSRA & (1 << UCSRA_UDRE)));  // Wait until buffer is empty
 7e2:	5d 9b       	sbis	0x0b, 5	; 11
 7e4:	fe cf       	rjmp	.-4      	; 0x7e2 <UART_sendString+0x4>
			// Put data into buffer, sends the data
		UDR_InputOutput = *data++;
 7e6:	31 96       	adiw	r30, 0x01	; 1
 7e8:	8c b9       	out	0x0c, r24	; 12
	UCSRC = (1 << UCSRC_URSEL) | (1 << UCSRC_UCSZ1) | (1 << UCSRC_UCSZ0);  // Set frame format: 8 data bits, 1 stop bit
}

// Send String via UART
void UART_sendString(const u8* data) {
	while (*data) {
 7ea:	80 81       	ld	r24, Z
 7ec:	81 11       	cpse	r24, r1
 7ee:	f9 cf       	rjmp	.-14     	; 0x7e2 <UART_sendString+0x4>
		while (!(UCSRA & (1 << UCSRA_UDRE)));  // Wait until buffer is empty
			// Put data into buffer, sends the data
		UDR_InputOutput = *data++;
	}
}
 7f0:	08 95       	ret

000007f2 <ShowingTheValue>:

// Show OCR values and movement direction
void ShowingTheValue(u8 movement) {
 7f2:	0f 93       	push	r16
 7f4:	1f 93       	push	r17
 7f6:	cf 93       	push	r28
 7f8:	df 93       	push	r29
 7fa:	cd b7       	in	r28, 0x3d	; 61
 7fc:	de b7       	in	r29, 0x3e	; 62
 7fe:	ec 97       	sbiw	r28, 0x3c	; 60
 800:	0f b6       	in	r0, 0x3f	; 63
 802:	f8 94       	cli
 804:	de bf       	out	0x3e, r29	; 62
 806:	0f be       	out	0x3f, r0	; 63
 808:	cd bf       	out	0x3d, r28	; 61
	u8 buffer[60];
	sprintf(buffer, "[%c] OCR1A: %u , OCR1B: %u \n\n", movement, OCR1A, OCR1B);
 80a:	49 b5       	in	r20, 0x29	; 41
 80c:	5a b5       	in	r21, 0x2a	; 42
 80e:	2b b5       	in	r18, 0x2b	; 43
 810:	3c b5       	in	r19, 0x2c	; 44
 812:	5f 93       	push	r21
 814:	4f 93       	push	r20
 816:	3f 93       	push	r19
 818:	2f 93       	push	r18
 81a:	1f 92       	push	r1
 81c:	8f 93       	push	r24
 81e:	8b e9       	ldi	r24, 0x9B	; 155
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	9f 93       	push	r25
 824:	8f 93       	push	r24
 826:	8e 01       	movw	r16, r28
 828:	0f 5f       	subi	r16, 0xFF	; 255
 82a:	1f 4f       	sbci	r17, 0xFF	; 255
 82c:	1f 93       	push	r17
 82e:	0f 93       	push	r16
 830:	0e 94 61 04 	call	0x8c2	; 0x8c2 <sprintf>
	UART_sendString(buffer);
 834:	c8 01       	movw	r24, r16
 836:	0e 94 ef 03 	call	0x7de	; 0x7de <UART_sendString>
}
 83a:	0f b6       	in	r0, 0x3f	; 63
 83c:	f8 94       	cli
 83e:	de bf       	out	0x3e, r29	; 62
 840:	0f be       	out	0x3f, r0	; 63
 842:	cd bf       	out	0x3d, r28	; 61
 844:	ec 96       	adiw	r28, 0x3c	; 60
 846:	0f b6       	in	r0, 0x3f	; 63
 848:	f8 94       	cli
 84a:	de bf       	out	0x3e, r29	; 62
 84c:	0f be       	out	0x3f, r0	; 63
 84e:	cd bf       	out	0x3d, r28	; 61
 850:	df 91       	pop	r29
 852:	cf 91       	pop	r28
 854:	1f 91       	pop	r17
 856:	0f 91       	pop	r16
 858:	08 95       	ret

0000085a <UART_Receive>:
u8 UART_Receive(void) {
	// Wait for data to be received
	while (!(UCSRA & (1 << UCSRA_RXC)));
 85a:	5f 9b       	sbis	0x0b, 7	; 11
 85c:	fe cf       	rjmp	.-4      	; 0x85a <UART_Receive>
	// Get and return received data from buffer
	return (UDR_InputOutput);
 85e:	8c b1       	in	r24, 0x0c	; 12
}
 860:	08 95       	ret

00000862 <UART_Flush>:

void UART_Flush(void) {
 862:	cf 93       	push	r28
 864:	df 93       	push	r29
 866:	1f 92       	push	r1
 868:	cd b7       	in	r28, 0x3d	; 61
 86a:	de b7       	in	r29, 0x3e	; 62
	while ( UCSRA & (1<<UCSRA_RXC) ) {
 86c:	02 c0       	rjmp	.+4      	; 0x872 <UART_Flush+0x10>
		volatile u8 dummy = UDR_InputOutput;
 86e:	8c b1       	in	r24, 0x0c	; 12
 870:	89 83       	std	Y+1, r24	; 0x01
	// Get and return received data from buffer
	return (UDR_InputOutput);
}

void UART_Flush(void) {
	while ( UCSRA & (1<<UCSRA_RXC) ) {
 872:	5f 99       	sbic	0x0b, 7	; 11
 874:	fc cf       	rjmp	.-8      	; 0x86e <UART_Flush+0xc>
		volatile u8 dummy = UDR_InputOutput;
	}
}
 876:	0f 90       	pop	r0
 878:	df 91       	pop	r29
 87a:	cf 91       	pop	r28
 87c:	08 95       	ret

0000087e <__udivmodsi4>:
 87e:	a1 e2       	ldi	r26, 0x21	; 33
 880:	1a 2e       	mov	r1, r26
 882:	aa 1b       	sub	r26, r26
 884:	bb 1b       	sub	r27, r27
 886:	fd 01       	movw	r30, r26
 888:	0d c0       	rjmp	.+26     	; 0x8a4 <__udivmodsi4_ep>

0000088a <__udivmodsi4_loop>:
 88a:	aa 1f       	adc	r26, r26
 88c:	bb 1f       	adc	r27, r27
 88e:	ee 1f       	adc	r30, r30
 890:	ff 1f       	adc	r31, r31
 892:	a2 17       	cp	r26, r18
 894:	b3 07       	cpc	r27, r19
 896:	e4 07       	cpc	r30, r20
 898:	f5 07       	cpc	r31, r21
 89a:	20 f0       	brcs	.+8      	; 0x8a4 <__udivmodsi4_ep>
 89c:	a2 1b       	sub	r26, r18
 89e:	b3 0b       	sbc	r27, r19
 8a0:	e4 0b       	sbc	r30, r20
 8a2:	f5 0b       	sbc	r31, r21

000008a4 <__udivmodsi4_ep>:
 8a4:	66 1f       	adc	r22, r22
 8a6:	77 1f       	adc	r23, r23
 8a8:	88 1f       	adc	r24, r24
 8aa:	99 1f       	adc	r25, r25
 8ac:	1a 94       	dec	r1
 8ae:	69 f7       	brne	.-38     	; 0x88a <__udivmodsi4_loop>
 8b0:	60 95       	com	r22
 8b2:	70 95       	com	r23
 8b4:	80 95       	com	r24
 8b6:	90 95       	com	r25
 8b8:	9b 01       	movw	r18, r22
 8ba:	ac 01       	movw	r20, r24
 8bc:	bd 01       	movw	r22, r26
 8be:	cf 01       	movw	r24, r30
 8c0:	08 95       	ret

000008c2 <sprintf>:
 8c2:	ae e0       	ldi	r26, 0x0E	; 14
 8c4:	b0 e0       	ldi	r27, 0x00	; 0
 8c6:	e7 e6       	ldi	r30, 0x67	; 103
 8c8:	f4 e0       	ldi	r31, 0x04	; 4
 8ca:	0c 94 22 07 	jmp	0xe44	; 0xe44 <__prologue_saves__+0x1c>
 8ce:	0d 89       	ldd	r16, Y+21	; 0x15
 8d0:	1e 89       	ldd	r17, Y+22	; 0x16
 8d2:	86 e0       	ldi	r24, 0x06	; 6
 8d4:	8c 83       	std	Y+4, r24	; 0x04
 8d6:	1a 83       	std	Y+2, r17	; 0x02
 8d8:	09 83       	std	Y+1, r16	; 0x01
 8da:	8f ef       	ldi	r24, 0xFF	; 255
 8dc:	9f e7       	ldi	r25, 0x7F	; 127
 8de:	9e 83       	std	Y+6, r25	; 0x06
 8e0:	8d 83       	std	Y+5, r24	; 0x05
 8e2:	ae 01       	movw	r20, r28
 8e4:	47 5e       	subi	r20, 0xE7	; 231
 8e6:	5f 4f       	sbci	r21, 0xFF	; 255
 8e8:	6f 89       	ldd	r22, Y+23	; 0x17
 8ea:	78 8d       	ldd	r23, Y+24	; 0x18
 8ec:	ce 01       	movw	r24, r28
 8ee:	01 96       	adiw	r24, 0x01	; 1
 8f0:	0e 94 83 04 	call	0x906	; 0x906 <vfprintf>
 8f4:	ef 81       	ldd	r30, Y+7	; 0x07
 8f6:	f8 85       	ldd	r31, Y+8	; 0x08
 8f8:	e0 0f       	add	r30, r16
 8fa:	f1 1f       	adc	r31, r17
 8fc:	10 82       	st	Z, r1
 8fe:	2e 96       	adiw	r28, 0x0e	; 14
 900:	e4 e0       	ldi	r30, 0x04	; 4
 902:	0c 94 3e 07 	jmp	0xe7c	; 0xe7c <__epilogue_restores__+0x1c>

00000906 <vfprintf>:
 906:	ab e0       	ldi	r26, 0x0B	; 11
 908:	b0 e0       	ldi	r27, 0x00	; 0
 90a:	e9 e8       	ldi	r30, 0x89	; 137
 90c:	f4 e0       	ldi	r31, 0x04	; 4
 90e:	0c 94 14 07 	jmp	0xe28	; 0xe28 <__prologue_saves__>
 912:	6c 01       	movw	r12, r24
 914:	7b 01       	movw	r14, r22
 916:	8a 01       	movw	r16, r20
 918:	fc 01       	movw	r30, r24
 91a:	17 82       	std	Z+7, r1	; 0x07
 91c:	16 82       	std	Z+6, r1	; 0x06
 91e:	83 81       	ldd	r24, Z+3	; 0x03
 920:	81 ff       	sbrs	r24, 1
 922:	cc c1       	rjmp	.+920    	; 0xcbc <vfprintf+0x3b6>
 924:	ce 01       	movw	r24, r28
 926:	01 96       	adiw	r24, 0x01	; 1
 928:	3c 01       	movw	r6, r24
 92a:	f6 01       	movw	r30, r12
 92c:	93 81       	ldd	r25, Z+3	; 0x03
 92e:	f7 01       	movw	r30, r14
 930:	93 fd       	sbrc	r25, 3
 932:	85 91       	lpm	r24, Z+
 934:	93 ff       	sbrs	r25, 3
 936:	81 91       	ld	r24, Z+
 938:	7f 01       	movw	r14, r30
 93a:	88 23       	and	r24, r24
 93c:	09 f4       	brne	.+2      	; 0x940 <vfprintf+0x3a>
 93e:	ba c1       	rjmp	.+884    	; 0xcb4 <vfprintf+0x3ae>
 940:	85 32       	cpi	r24, 0x25	; 37
 942:	39 f4       	brne	.+14     	; 0x952 <vfprintf+0x4c>
 944:	93 fd       	sbrc	r25, 3
 946:	85 91       	lpm	r24, Z+
 948:	93 ff       	sbrs	r25, 3
 94a:	81 91       	ld	r24, Z+
 94c:	7f 01       	movw	r14, r30
 94e:	85 32       	cpi	r24, 0x25	; 37
 950:	29 f4       	brne	.+10     	; 0x95c <vfprintf+0x56>
 952:	b6 01       	movw	r22, r12
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <fputc>
 95a:	e7 cf       	rjmp	.-50     	; 0x92a <vfprintf+0x24>
 95c:	91 2c       	mov	r9, r1
 95e:	21 2c       	mov	r2, r1
 960:	31 2c       	mov	r3, r1
 962:	ff e1       	ldi	r31, 0x1F	; 31
 964:	f3 15       	cp	r31, r3
 966:	d8 f0       	brcs	.+54     	; 0x99e <vfprintf+0x98>
 968:	8b 32       	cpi	r24, 0x2B	; 43
 96a:	79 f0       	breq	.+30     	; 0x98a <vfprintf+0x84>
 96c:	38 f4       	brcc	.+14     	; 0x97c <vfprintf+0x76>
 96e:	80 32       	cpi	r24, 0x20	; 32
 970:	79 f0       	breq	.+30     	; 0x990 <vfprintf+0x8a>
 972:	83 32       	cpi	r24, 0x23	; 35
 974:	a1 f4       	brne	.+40     	; 0x99e <vfprintf+0x98>
 976:	23 2d       	mov	r18, r3
 978:	20 61       	ori	r18, 0x10	; 16
 97a:	1d c0       	rjmp	.+58     	; 0x9b6 <vfprintf+0xb0>
 97c:	8d 32       	cpi	r24, 0x2D	; 45
 97e:	61 f0       	breq	.+24     	; 0x998 <vfprintf+0x92>
 980:	80 33       	cpi	r24, 0x30	; 48
 982:	69 f4       	brne	.+26     	; 0x99e <vfprintf+0x98>
 984:	23 2d       	mov	r18, r3
 986:	21 60       	ori	r18, 0x01	; 1
 988:	16 c0       	rjmp	.+44     	; 0x9b6 <vfprintf+0xb0>
 98a:	83 2d       	mov	r24, r3
 98c:	82 60       	ori	r24, 0x02	; 2
 98e:	38 2e       	mov	r3, r24
 990:	e3 2d       	mov	r30, r3
 992:	e4 60       	ori	r30, 0x04	; 4
 994:	3e 2e       	mov	r3, r30
 996:	2a c0       	rjmp	.+84     	; 0x9ec <vfprintf+0xe6>
 998:	f3 2d       	mov	r31, r3
 99a:	f8 60       	ori	r31, 0x08	; 8
 99c:	1d c0       	rjmp	.+58     	; 0x9d8 <vfprintf+0xd2>
 99e:	37 fc       	sbrc	r3, 7
 9a0:	2d c0       	rjmp	.+90     	; 0x9fc <vfprintf+0xf6>
 9a2:	20 ed       	ldi	r18, 0xD0	; 208
 9a4:	28 0f       	add	r18, r24
 9a6:	2a 30       	cpi	r18, 0x0A	; 10
 9a8:	40 f0       	brcs	.+16     	; 0x9ba <vfprintf+0xb4>
 9aa:	8e 32       	cpi	r24, 0x2E	; 46
 9ac:	b9 f4       	brne	.+46     	; 0x9dc <vfprintf+0xd6>
 9ae:	36 fc       	sbrc	r3, 6
 9b0:	81 c1       	rjmp	.+770    	; 0xcb4 <vfprintf+0x3ae>
 9b2:	23 2d       	mov	r18, r3
 9b4:	20 64       	ori	r18, 0x40	; 64
 9b6:	32 2e       	mov	r3, r18
 9b8:	19 c0       	rjmp	.+50     	; 0x9ec <vfprintf+0xe6>
 9ba:	36 fe       	sbrs	r3, 6
 9bc:	06 c0       	rjmp	.+12     	; 0x9ca <vfprintf+0xc4>
 9be:	8a e0       	ldi	r24, 0x0A	; 10
 9c0:	98 9e       	mul	r9, r24
 9c2:	20 0d       	add	r18, r0
 9c4:	11 24       	eor	r1, r1
 9c6:	92 2e       	mov	r9, r18
 9c8:	11 c0       	rjmp	.+34     	; 0x9ec <vfprintf+0xe6>
 9ca:	ea e0       	ldi	r30, 0x0A	; 10
 9cc:	2e 9e       	mul	r2, r30
 9ce:	20 0d       	add	r18, r0
 9d0:	11 24       	eor	r1, r1
 9d2:	22 2e       	mov	r2, r18
 9d4:	f3 2d       	mov	r31, r3
 9d6:	f0 62       	ori	r31, 0x20	; 32
 9d8:	3f 2e       	mov	r3, r31
 9da:	08 c0       	rjmp	.+16     	; 0x9ec <vfprintf+0xe6>
 9dc:	8c 36       	cpi	r24, 0x6C	; 108
 9de:	21 f4       	brne	.+8      	; 0x9e8 <vfprintf+0xe2>
 9e0:	83 2d       	mov	r24, r3
 9e2:	80 68       	ori	r24, 0x80	; 128
 9e4:	38 2e       	mov	r3, r24
 9e6:	02 c0       	rjmp	.+4      	; 0x9ec <vfprintf+0xe6>
 9e8:	88 36       	cpi	r24, 0x68	; 104
 9ea:	41 f4       	brne	.+16     	; 0x9fc <vfprintf+0xf6>
 9ec:	f7 01       	movw	r30, r14
 9ee:	93 fd       	sbrc	r25, 3
 9f0:	85 91       	lpm	r24, Z+
 9f2:	93 ff       	sbrs	r25, 3
 9f4:	81 91       	ld	r24, Z+
 9f6:	7f 01       	movw	r14, r30
 9f8:	81 11       	cpse	r24, r1
 9fa:	b3 cf       	rjmp	.-154    	; 0x962 <vfprintf+0x5c>
 9fc:	98 2f       	mov	r25, r24
 9fe:	9f 7d       	andi	r25, 0xDF	; 223
 a00:	95 54       	subi	r25, 0x45	; 69
 a02:	93 30       	cpi	r25, 0x03	; 3
 a04:	28 f4       	brcc	.+10     	; 0xa10 <vfprintf+0x10a>
 a06:	0c 5f       	subi	r16, 0xFC	; 252
 a08:	1f 4f       	sbci	r17, 0xFF	; 255
 a0a:	9f e3       	ldi	r25, 0x3F	; 63
 a0c:	99 83       	std	Y+1, r25	; 0x01
 a0e:	0d c0       	rjmp	.+26     	; 0xa2a <vfprintf+0x124>
 a10:	83 36       	cpi	r24, 0x63	; 99
 a12:	31 f0       	breq	.+12     	; 0xa20 <vfprintf+0x11a>
 a14:	83 37       	cpi	r24, 0x73	; 115
 a16:	71 f0       	breq	.+28     	; 0xa34 <vfprintf+0x12e>
 a18:	83 35       	cpi	r24, 0x53	; 83
 a1a:	09 f0       	breq	.+2      	; 0xa1e <vfprintf+0x118>
 a1c:	59 c0       	rjmp	.+178    	; 0xad0 <vfprintf+0x1ca>
 a1e:	21 c0       	rjmp	.+66     	; 0xa62 <vfprintf+0x15c>
 a20:	f8 01       	movw	r30, r16
 a22:	80 81       	ld	r24, Z
 a24:	89 83       	std	Y+1, r24	; 0x01
 a26:	0e 5f       	subi	r16, 0xFE	; 254
 a28:	1f 4f       	sbci	r17, 0xFF	; 255
 a2a:	88 24       	eor	r8, r8
 a2c:	83 94       	inc	r8
 a2e:	91 2c       	mov	r9, r1
 a30:	53 01       	movw	r10, r6
 a32:	13 c0       	rjmp	.+38     	; 0xa5a <vfprintf+0x154>
 a34:	28 01       	movw	r4, r16
 a36:	f2 e0       	ldi	r31, 0x02	; 2
 a38:	4f 0e       	add	r4, r31
 a3a:	51 1c       	adc	r5, r1
 a3c:	f8 01       	movw	r30, r16
 a3e:	a0 80       	ld	r10, Z
 a40:	b1 80       	ldd	r11, Z+1	; 0x01
 a42:	36 fe       	sbrs	r3, 6
 a44:	03 c0       	rjmp	.+6      	; 0xa4c <vfprintf+0x146>
 a46:	69 2d       	mov	r22, r9
 a48:	70 e0       	ldi	r23, 0x00	; 0
 a4a:	02 c0       	rjmp	.+4      	; 0xa50 <vfprintf+0x14a>
 a4c:	6f ef       	ldi	r22, 0xFF	; 255
 a4e:	7f ef       	ldi	r23, 0xFF	; 255
 a50:	c5 01       	movw	r24, r10
 a52:	0e 94 6f 06 	call	0xcde	; 0xcde <strnlen>
 a56:	4c 01       	movw	r8, r24
 a58:	82 01       	movw	r16, r4
 a5a:	f3 2d       	mov	r31, r3
 a5c:	ff 77       	andi	r31, 0x7F	; 127
 a5e:	3f 2e       	mov	r3, r31
 a60:	16 c0       	rjmp	.+44     	; 0xa8e <vfprintf+0x188>
 a62:	28 01       	movw	r4, r16
 a64:	22 e0       	ldi	r18, 0x02	; 2
 a66:	42 0e       	add	r4, r18
 a68:	51 1c       	adc	r5, r1
 a6a:	f8 01       	movw	r30, r16
 a6c:	a0 80       	ld	r10, Z
 a6e:	b1 80       	ldd	r11, Z+1	; 0x01
 a70:	36 fe       	sbrs	r3, 6
 a72:	03 c0       	rjmp	.+6      	; 0xa7a <vfprintf+0x174>
 a74:	69 2d       	mov	r22, r9
 a76:	70 e0       	ldi	r23, 0x00	; 0
 a78:	02 c0       	rjmp	.+4      	; 0xa7e <vfprintf+0x178>
 a7a:	6f ef       	ldi	r22, 0xFF	; 255
 a7c:	7f ef       	ldi	r23, 0xFF	; 255
 a7e:	c5 01       	movw	r24, r10
 a80:	0e 94 64 06 	call	0xcc8	; 0xcc8 <strnlen_P>
 a84:	4c 01       	movw	r8, r24
 a86:	f3 2d       	mov	r31, r3
 a88:	f0 68       	ori	r31, 0x80	; 128
 a8a:	3f 2e       	mov	r3, r31
 a8c:	82 01       	movw	r16, r4
 a8e:	33 fc       	sbrc	r3, 3
 a90:	1b c0       	rjmp	.+54     	; 0xac8 <vfprintf+0x1c2>
 a92:	82 2d       	mov	r24, r2
 a94:	90 e0       	ldi	r25, 0x00	; 0
 a96:	88 16       	cp	r8, r24
 a98:	99 06       	cpc	r9, r25
 a9a:	b0 f4       	brcc	.+44     	; 0xac8 <vfprintf+0x1c2>
 a9c:	b6 01       	movw	r22, r12
 a9e:	80 e2       	ldi	r24, 0x20	; 32
 aa0:	90 e0       	ldi	r25, 0x00	; 0
 aa2:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <fputc>
 aa6:	2a 94       	dec	r2
 aa8:	f4 cf       	rjmp	.-24     	; 0xa92 <vfprintf+0x18c>
 aaa:	f5 01       	movw	r30, r10
 aac:	37 fc       	sbrc	r3, 7
 aae:	85 91       	lpm	r24, Z+
 ab0:	37 fe       	sbrs	r3, 7
 ab2:	81 91       	ld	r24, Z+
 ab4:	5f 01       	movw	r10, r30
 ab6:	b6 01       	movw	r22, r12
 ab8:	90 e0       	ldi	r25, 0x00	; 0
 aba:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <fputc>
 abe:	21 10       	cpse	r2, r1
 ac0:	2a 94       	dec	r2
 ac2:	21 e0       	ldi	r18, 0x01	; 1
 ac4:	82 1a       	sub	r8, r18
 ac6:	91 08       	sbc	r9, r1
 ac8:	81 14       	cp	r8, r1
 aca:	91 04       	cpc	r9, r1
 acc:	71 f7       	brne	.-36     	; 0xaaa <vfprintf+0x1a4>
 ace:	e8 c0       	rjmp	.+464    	; 0xca0 <vfprintf+0x39a>
 ad0:	84 36       	cpi	r24, 0x64	; 100
 ad2:	11 f0       	breq	.+4      	; 0xad8 <vfprintf+0x1d2>
 ad4:	89 36       	cpi	r24, 0x69	; 105
 ad6:	41 f5       	brne	.+80     	; 0xb28 <vfprintf+0x222>
 ad8:	f8 01       	movw	r30, r16
 ada:	37 fe       	sbrs	r3, 7
 adc:	07 c0       	rjmp	.+14     	; 0xaec <vfprintf+0x1e6>
 ade:	60 81       	ld	r22, Z
 ae0:	71 81       	ldd	r23, Z+1	; 0x01
 ae2:	82 81       	ldd	r24, Z+2	; 0x02
 ae4:	93 81       	ldd	r25, Z+3	; 0x03
 ae6:	0c 5f       	subi	r16, 0xFC	; 252
 ae8:	1f 4f       	sbci	r17, 0xFF	; 255
 aea:	08 c0       	rjmp	.+16     	; 0xafc <vfprintf+0x1f6>
 aec:	60 81       	ld	r22, Z
 aee:	71 81       	ldd	r23, Z+1	; 0x01
 af0:	07 2e       	mov	r0, r23
 af2:	00 0c       	add	r0, r0
 af4:	88 0b       	sbc	r24, r24
 af6:	99 0b       	sbc	r25, r25
 af8:	0e 5f       	subi	r16, 0xFE	; 254
 afa:	1f 4f       	sbci	r17, 0xFF	; 255
 afc:	f3 2d       	mov	r31, r3
 afe:	ff 76       	andi	r31, 0x6F	; 111
 b00:	3f 2e       	mov	r3, r31
 b02:	97 ff       	sbrs	r25, 7
 b04:	09 c0       	rjmp	.+18     	; 0xb18 <vfprintf+0x212>
 b06:	90 95       	com	r25
 b08:	80 95       	com	r24
 b0a:	70 95       	com	r23
 b0c:	61 95       	neg	r22
 b0e:	7f 4f       	sbci	r23, 0xFF	; 255
 b10:	8f 4f       	sbci	r24, 0xFF	; 255
 b12:	9f 4f       	sbci	r25, 0xFF	; 255
 b14:	f0 68       	ori	r31, 0x80	; 128
 b16:	3f 2e       	mov	r3, r31
 b18:	2a e0       	ldi	r18, 0x0A	; 10
 b1a:	30 e0       	ldi	r19, 0x00	; 0
 b1c:	a3 01       	movw	r20, r6
 b1e:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__ultoa_invert>
 b22:	88 2e       	mov	r8, r24
 b24:	86 18       	sub	r8, r6
 b26:	45 c0       	rjmp	.+138    	; 0xbb2 <vfprintf+0x2ac>
 b28:	85 37       	cpi	r24, 0x75	; 117
 b2a:	31 f4       	brne	.+12     	; 0xb38 <vfprintf+0x232>
 b2c:	23 2d       	mov	r18, r3
 b2e:	2f 7e       	andi	r18, 0xEF	; 239
 b30:	b2 2e       	mov	r11, r18
 b32:	2a e0       	ldi	r18, 0x0A	; 10
 b34:	30 e0       	ldi	r19, 0x00	; 0
 b36:	25 c0       	rjmp	.+74     	; 0xb82 <vfprintf+0x27c>
 b38:	93 2d       	mov	r25, r3
 b3a:	99 7f       	andi	r25, 0xF9	; 249
 b3c:	b9 2e       	mov	r11, r25
 b3e:	8f 36       	cpi	r24, 0x6F	; 111
 b40:	c1 f0       	breq	.+48     	; 0xb72 <vfprintf+0x26c>
 b42:	18 f4       	brcc	.+6      	; 0xb4a <vfprintf+0x244>
 b44:	88 35       	cpi	r24, 0x58	; 88
 b46:	79 f0       	breq	.+30     	; 0xb66 <vfprintf+0x260>
 b48:	b5 c0       	rjmp	.+362    	; 0xcb4 <vfprintf+0x3ae>
 b4a:	80 37       	cpi	r24, 0x70	; 112
 b4c:	19 f0       	breq	.+6      	; 0xb54 <vfprintf+0x24e>
 b4e:	88 37       	cpi	r24, 0x78	; 120
 b50:	21 f0       	breq	.+8      	; 0xb5a <vfprintf+0x254>
 b52:	b0 c0       	rjmp	.+352    	; 0xcb4 <vfprintf+0x3ae>
 b54:	e9 2f       	mov	r30, r25
 b56:	e0 61       	ori	r30, 0x10	; 16
 b58:	be 2e       	mov	r11, r30
 b5a:	b4 fe       	sbrs	r11, 4
 b5c:	0d c0       	rjmp	.+26     	; 0xb78 <vfprintf+0x272>
 b5e:	fb 2d       	mov	r31, r11
 b60:	f4 60       	ori	r31, 0x04	; 4
 b62:	bf 2e       	mov	r11, r31
 b64:	09 c0       	rjmp	.+18     	; 0xb78 <vfprintf+0x272>
 b66:	34 fe       	sbrs	r3, 4
 b68:	0a c0       	rjmp	.+20     	; 0xb7e <vfprintf+0x278>
 b6a:	29 2f       	mov	r18, r25
 b6c:	26 60       	ori	r18, 0x06	; 6
 b6e:	b2 2e       	mov	r11, r18
 b70:	06 c0       	rjmp	.+12     	; 0xb7e <vfprintf+0x278>
 b72:	28 e0       	ldi	r18, 0x08	; 8
 b74:	30 e0       	ldi	r19, 0x00	; 0
 b76:	05 c0       	rjmp	.+10     	; 0xb82 <vfprintf+0x27c>
 b78:	20 e1       	ldi	r18, 0x10	; 16
 b7a:	30 e0       	ldi	r19, 0x00	; 0
 b7c:	02 c0       	rjmp	.+4      	; 0xb82 <vfprintf+0x27c>
 b7e:	20 e1       	ldi	r18, 0x10	; 16
 b80:	32 e0       	ldi	r19, 0x02	; 2
 b82:	f8 01       	movw	r30, r16
 b84:	b7 fe       	sbrs	r11, 7
 b86:	07 c0       	rjmp	.+14     	; 0xb96 <vfprintf+0x290>
 b88:	60 81       	ld	r22, Z
 b8a:	71 81       	ldd	r23, Z+1	; 0x01
 b8c:	82 81       	ldd	r24, Z+2	; 0x02
 b8e:	93 81       	ldd	r25, Z+3	; 0x03
 b90:	0c 5f       	subi	r16, 0xFC	; 252
 b92:	1f 4f       	sbci	r17, 0xFF	; 255
 b94:	06 c0       	rjmp	.+12     	; 0xba2 <vfprintf+0x29c>
 b96:	60 81       	ld	r22, Z
 b98:	71 81       	ldd	r23, Z+1	; 0x01
 b9a:	80 e0       	ldi	r24, 0x00	; 0
 b9c:	90 e0       	ldi	r25, 0x00	; 0
 b9e:	0e 5f       	subi	r16, 0xFE	; 254
 ba0:	1f 4f       	sbci	r17, 0xFF	; 255
 ba2:	a3 01       	movw	r20, r6
 ba4:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__ultoa_invert>
 ba8:	88 2e       	mov	r8, r24
 baa:	86 18       	sub	r8, r6
 bac:	fb 2d       	mov	r31, r11
 bae:	ff 77       	andi	r31, 0x7F	; 127
 bb0:	3f 2e       	mov	r3, r31
 bb2:	36 fe       	sbrs	r3, 6
 bb4:	0d c0       	rjmp	.+26     	; 0xbd0 <vfprintf+0x2ca>
 bb6:	23 2d       	mov	r18, r3
 bb8:	2e 7f       	andi	r18, 0xFE	; 254
 bba:	a2 2e       	mov	r10, r18
 bbc:	89 14       	cp	r8, r9
 bbe:	58 f4       	brcc	.+22     	; 0xbd6 <vfprintf+0x2d0>
 bc0:	34 fe       	sbrs	r3, 4
 bc2:	0b c0       	rjmp	.+22     	; 0xbda <vfprintf+0x2d4>
 bc4:	32 fc       	sbrc	r3, 2
 bc6:	09 c0       	rjmp	.+18     	; 0xbda <vfprintf+0x2d4>
 bc8:	83 2d       	mov	r24, r3
 bca:	8e 7e       	andi	r24, 0xEE	; 238
 bcc:	a8 2e       	mov	r10, r24
 bce:	05 c0       	rjmp	.+10     	; 0xbda <vfprintf+0x2d4>
 bd0:	b8 2c       	mov	r11, r8
 bd2:	a3 2c       	mov	r10, r3
 bd4:	03 c0       	rjmp	.+6      	; 0xbdc <vfprintf+0x2d6>
 bd6:	b8 2c       	mov	r11, r8
 bd8:	01 c0       	rjmp	.+2      	; 0xbdc <vfprintf+0x2d6>
 bda:	b9 2c       	mov	r11, r9
 bdc:	a4 fe       	sbrs	r10, 4
 bde:	0f c0       	rjmp	.+30     	; 0xbfe <vfprintf+0x2f8>
 be0:	fe 01       	movw	r30, r28
 be2:	e8 0d       	add	r30, r8
 be4:	f1 1d       	adc	r31, r1
 be6:	80 81       	ld	r24, Z
 be8:	80 33       	cpi	r24, 0x30	; 48
 bea:	21 f4       	brne	.+8      	; 0xbf4 <vfprintf+0x2ee>
 bec:	9a 2d       	mov	r25, r10
 bee:	99 7e       	andi	r25, 0xE9	; 233
 bf0:	a9 2e       	mov	r10, r25
 bf2:	09 c0       	rjmp	.+18     	; 0xc06 <vfprintf+0x300>
 bf4:	a2 fe       	sbrs	r10, 2
 bf6:	06 c0       	rjmp	.+12     	; 0xc04 <vfprintf+0x2fe>
 bf8:	b3 94       	inc	r11
 bfa:	b3 94       	inc	r11
 bfc:	04 c0       	rjmp	.+8      	; 0xc06 <vfprintf+0x300>
 bfe:	8a 2d       	mov	r24, r10
 c00:	86 78       	andi	r24, 0x86	; 134
 c02:	09 f0       	breq	.+2      	; 0xc06 <vfprintf+0x300>
 c04:	b3 94       	inc	r11
 c06:	a3 fc       	sbrc	r10, 3
 c08:	11 c0       	rjmp	.+34     	; 0xc2c <vfprintf+0x326>
 c0a:	a0 fe       	sbrs	r10, 0
 c0c:	06 c0       	rjmp	.+12     	; 0xc1a <vfprintf+0x314>
 c0e:	b2 14       	cp	r11, r2
 c10:	88 f4       	brcc	.+34     	; 0xc34 <vfprintf+0x32e>
 c12:	28 0c       	add	r2, r8
 c14:	92 2c       	mov	r9, r2
 c16:	9b 18       	sub	r9, r11
 c18:	0e c0       	rjmp	.+28     	; 0xc36 <vfprintf+0x330>
 c1a:	b2 14       	cp	r11, r2
 c1c:	60 f4       	brcc	.+24     	; 0xc36 <vfprintf+0x330>
 c1e:	b6 01       	movw	r22, r12
 c20:	80 e2       	ldi	r24, 0x20	; 32
 c22:	90 e0       	ldi	r25, 0x00	; 0
 c24:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <fputc>
 c28:	b3 94       	inc	r11
 c2a:	f7 cf       	rjmp	.-18     	; 0xc1a <vfprintf+0x314>
 c2c:	b2 14       	cp	r11, r2
 c2e:	18 f4       	brcc	.+6      	; 0xc36 <vfprintf+0x330>
 c30:	2b 18       	sub	r2, r11
 c32:	02 c0       	rjmp	.+4      	; 0xc38 <vfprintf+0x332>
 c34:	98 2c       	mov	r9, r8
 c36:	21 2c       	mov	r2, r1
 c38:	a4 fe       	sbrs	r10, 4
 c3a:	10 c0       	rjmp	.+32     	; 0xc5c <vfprintf+0x356>
 c3c:	b6 01       	movw	r22, r12
 c3e:	80 e3       	ldi	r24, 0x30	; 48
 c40:	90 e0       	ldi	r25, 0x00	; 0
 c42:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <fputc>
 c46:	a2 fe       	sbrs	r10, 2
 c48:	17 c0       	rjmp	.+46     	; 0xc78 <vfprintf+0x372>
 c4a:	a1 fc       	sbrc	r10, 1
 c4c:	03 c0       	rjmp	.+6      	; 0xc54 <vfprintf+0x34e>
 c4e:	88 e7       	ldi	r24, 0x78	; 120
 c50:	90 e0       	ldi	r25, 0x00	; 0
 c52:	02 c0       	rjmp	.+4      	; 0xc58 <vfprintf+0x352>
 c54:	88 e5       	ldi	r24, 0x58	; 88
 c56:	90 e0       	ldi	r25, 0x00	; 0
 c58:	b6 01       	movw	r22, r12
 c5a:	0c c0       	rjmp	.+24     	; 0xc74 <vfprintf+0x36e>
 c5c:	8a 2d       	mov	r24, r10
 c5e:	86 78       	andi	r24, 0x86	; 134
 c60:	59 f0       	breq	.+22     	; 0xc78 <vfprintf+0x372>
 c62:	a1 fe       	sbrs	r10, 1
 c64:	02 c0       	rjmp	.+4      	; 0xc6a <vfprintf+0x364>
 c66:	8b e2       	ldi	r24, 0x2B	; 43
 c68:	01 c0       	rjmp	.+2      	; 0xc6c <vfprintf+0x366>
 c6a:	80 e2       	ldi	r24, 0x20	; 32
 c6c:	a7 fc       	sbrc	r10, 7
 c6e:	8d e2       	ldi	r24, 0x2D	; 45
 c70:	b6 01       	movw	r22, r12
 c72:	90 e0       	ldi	r25, 0x00	; 0
 c74:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <fputc>
 c78:	89 14       	cp	r8, r9
 c7a:	38 f4       	brcc	.+14     	; 0xc8a <vfprintf+0x384>
 c7c:	b6 01       	movw	r22, r12
 c7e:	80 e3       	ldi	r24, 0x30	; 48
 c80:	90 e0       	ldi	r25, 0x00	; 0
 c82:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <fputc>
 c86:	9a 94       	dec	r9
 c88:	f7 cf       	rjmp	.-18     	; 0xc78 <vfprintf+0x372>
 c8a:	8a 94       	dec	r8
 c8c:	f3 01       	movw	r30, r6
 c8e:	e8 0d       	add	r30, r8
 c90:	f1 1d       	adc	r31, r1
 c92:	80 81       	ld	r24, Z
 c94:	b6 01       	movw	r22, r12
 c96:	90 e0       	ldi	r25, 0x00	; 0
 c98:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <fputc>
 c9c:	81 10       	cpse	r8, r1
 c9e:	f5 cf       	rjmp	.-22     	; 0xc8a <vfprintf+0x384>
 ca0:	22 20       	and	r2, r2
 ca2:	09 f4       	brne	.+2      	; 0xca6 <vfprintf+0x3a0>
 ca4:	42 ce       	rjmp	.-892    	; 0x92a <vfprintf+0x24>
 ca6:	b6 01       	movw	r22, r12
 ca8:	80 e2       	ldi	r24, 0x20	; 32
 caa:	90 e0       	ldi	r25, 0x00	; 0
 cac:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <fputc>
 cb0:	2a 94       	dec	r2
 cb2:	f6 cf       	rjmp	.-20     	; 0xca0 <vfprintf+0x39a>
 cb4:	f6 01       	movw	r30, r12
 cb6:	86 81       	ldd	r24, Z+6	; 0x06
 cb8:	97 81       	ldd	r25, Z+7	; 0x07
 cba:	02 c0       	rjmp	.+4      	; 0xcc0 <vfprintf+0x3ba>
 cbc:	8f ef       	ldi	r24, 0xFF	; 255
 cbe:	9f ef       	ldi	r25, 0xFF	; 255
 cc0:	2b 96       	adiw	r28, 0x0b	; 11
 cc2:	e2 e1       	ldi	r30, 0x12	; 18
 cc4:	0c 94 30 07 	jmp	0xe60	; 0xe60 <__epilogue_restores__>

00000cc8 <strnlen_P>:
 cc8:	fc 01       	movw	r30, r24
 cca:	05 90       	lpm	r0, Z+
 ccc:	61 50       	subi	r22, 0x01	; 1
 cce:	70 40       	sbci	r23, 0x00	; 0
 cd0:	01 10       	cpse	r0, r1
 cd2:	d8 f7       	brcc	.-10     	; 0xcca <strnlen_P+0x2>
 cd4:	80 95       	com	r24
 cd6:	90 95       	com	r25
 cd8:	8e 0f       	add	r24, r30
 cda:	9f 1f       	adc	r25, r31
 cdc:	08 95       	ret

00000cde <strnlen>:
 cde:	fc 01       	movw	r30, r24
 ce0:	61 50       	subi	r22, 0x01	; 1
 ce2:	70 40       	sbci	r23, 0x00	; 0
 ce4:	01 90       	ld	r0, Z+
 ce6:	01 10       	cpse	r0, r1
 ce8:	d8 f7       	brcc	.-10     	; 0xce0 <strnlen+0x2>
 cea:	80 95       	com	r24
 cec:	90 95       	com	r25
 cee:	8e 0f       	add	r24, r30
 cf0:	9f 1f       	adc	r25, r31
 cf2:	08 95       	ret

00000cf4 <fputc>:
 cf4:	0f 93       	push	r16
 cf6:	1f 93       	push	r17
 cf8:	cf 93       	push	r28
 cfa:	df 93       	push	r29
 cfc:	fb 01       	movw	r30, r22
 cfe:	23 81       	ldd	r18, Z+3	; 0x03
 d00:	21 fd       	sbrc	r18, 1
 d02:	03 c0       	rjmp	.+6      	; 0xd0a <fputc+0x16>
 d04:	8f ef       	ldi	r24, 0xFF	; 255
 d06:	9f ef       	ldi	r25, 0xFF	; 255
 d08:	2c c0       	rjmp	.+88     	; 0xd62 <fputc+0x6e>
 d0a:	22 ff       	sbrs	r18, 2
 d0c:	16 c0       	rjmp	.+44     	; 0xd3a <fputc+0x46>
 d0e:	46 81       	ldd	r20, Z+6	; 0x06
 d10:	57 81       	ldd	r21, Z+7	; 0x07
 d12:	24 81       	ldd	r18, Z+4	; 0x04
 d14:	35 81       	ldd	r19, Z+5	; 0x05
 d16:	42 17       	cp	r20, r18
 d18:	53 07       	cpc	r21, r19
 d1a:	44 f4       	brge	.+16     	; 0xd2c <fputc+0x38>
 d1c:	a0 81       	ld	r26, Z
 d1e:	b1 81       	ldd	r27, Z+1	; 0x01
 d20:	9d 01       	movw	r18, r26
 d22:	2f 5f       	subi	r18, 0xFF	; 255
 d24:	3f 4f       	sbci	r19, 0xFF	; 255
 d26:	31 83       	std	Z+1, r19	; 0x01
 d28:	20 83       	st	Z, r18
 d2a:	8c 93       	st	X, r24
 d2c:	26 81       	ldd	r18, Z+6	; 0x06
 d2e:	37 81       	ldd	r19, Z+7	; 0x07
 d30:	2f 5f       	subi	r18, 0xFF	; 255
 d32:	3f 4f       	sbci	r19, 0xFF	; 255
 d34:	37 83       	std	Z+7, r19	; 0x07
 d36:	26 83       	std	Z+6, r18	; 0x06
 d38:	14 c0       	rjmp	.+40     	; 0xd62 <fputc+0x6e>
 d3a:	8b 01       	movw	r16, r22
 d3c:	ec 01       	movw	r28, r24
 d3e:	fb 01       	movw	r30, r22
 d40:	00 84       	ldd	r0, Z+8	; 0x08
 d42:	f1 85       	ldd	r31, Z+9	; 0x09
 d44:	e0 2d       	mov	r30, r0
 d46:	09 95       	icall
 d48:	89 2b       	or	r24, r25
 d4a:	e1 f6       	brne	.-72     	; 0xd04 <fputc+0x10>
 d4c:	d8 01       	movw	r26, r16
 d4e:	16 96       	adiw	r26, 0x06	; 6
 d50:	8d 91       	ld	r24, X+
 d52:	9c 91       	ld	r25, X
 d54:	17 97       	sbiw	r26, 0x07	; 7
 d56:	01 96       	adiw	r24, 0x01	; 1
 d58:	17 96       	adiw	r26, 0x07	; 7
 d5a:	9c 93       	st	X, r25
 d5c:	8e 93       	st	-X, r24
 d5e:	16 97       	sbiw	r26, 0x06	; 6
 d60:	ce 01       	movw	r24, r28
 d62:	df 91       	pop	r29
 d64:	cf 91       	pop	r28
 d66:	1f 91       	pop	r17
 d68:	0f 91       	pop	r16
 d6a:	08 95       	ret

00000d6c <__ultoa_invert>:
 d6c:	fa 01       	movw	r30, r20
 d6e:	aa 27       	eor	r26, r26
 d70:	28 30       	cpi	r18, 0x08	; 8
 d72:	51 f1       	breq	.+84     	; 0xdc8 <__ultoa_invert+0x5c>
 d74:	20 31       	cpi	r18, 0x10	; 16
 d76:	81 f1       	breq	.+96     	; 0xdd8 <__ultoa_invert+0x6c>
 d78:	e8 94       	clt
 d7a:	6f 93       	push	r22
 d7c:	6e 7f       	andi	r22, 0xFE	; 254
 d7e:	6e 5f       	subi	r22, 0xFE	; 254
 d80:	7f 4f       	sbci	r23, 0xFF	; 255
 d82:	8f 4f       	sbci	r24, 0xFF	; 255
 d84:	9f 4f       	sbci	r25, 0xFF	; 255
 d86:	af 4f       	sbci	r26, 0xFF	; 255
 d88:	b1 e0       	ldi	r27, 0x01	; 1
 d8a:	3e d0       	rcall	.+124    	; 0xe08 <__ultoa_invert+0x9c>
 d8c:	b4 e0       	ldi	r27, 0x04	; 4
 d8e:	3c d0       	rcall	.+120    	; 0xe08 <__ultoa_invert+0x9c>
 d90:	67 0f       	add	r22, r23
 d92:	78 1f       	adc	r23, r24
 d94:	89 1f       	adc	r24, r25
 d96:	9a 1f       	adc	r25, r26
 d98:	a1 1d       	adc	r26, r1
 d9a:	68 0f       	add	r22, r24
 d9c:	79 1f       	adc	r23, r25
 d9e:	8a 1f       	adc	r24, r26
 da0:	91 1d       	adc	r25, r1
 da2:	a1 1d       	adc	r26, r1
 da4:	6a 0f       	add	r22, r26
 da6:	71 1d       	adc	r23, r1
 da8:	81 1d       	adc	r24, r1
 daa:	91 1d       	adc	r25, r1
 dac:	a1 1d       	adc	r26, r1
 dae:	20 d0       	rcall	.+64     	; 0xdf0 <__ultoa_invert+0x84>
 db0:	09 f4       	brne	.+2      	; 0xdb4 <__ultoa_invert+0x48>
 db2:	68 94       	set
 db4:	3f 91       	pop	r19
 db6:	2a e0       	ldi	r18, 0x0A	; 10
 db8:	26 9f       	mul	r18, r22
 dba:	11 24       	eor	r1, r1
 dbc:	30 19       	sub	r19, r0
 dbe:	30 5d       	subi	r19, 0xD0	; 208
 dc0:	31 93       	st	Z+, r19
 dc2:	de f6       	brtc	.-74     	; 0xd7a <__ultoa_invert+0xe>
 dc4:	cf 01       	movw	r24, r30
 dc6:	08 95       	ret
 dc8:	46 2f       	mov	r20, r22
 dca:	47 70       	andi	r20, 0x07	; 7
 dcc:	40 5d       	subi	r20, 0xD0	; 208
 dce:	41 93       	st	Z+, r20
 dd0:	b3 e0       	ldi	r27, 0x03	; 3
 dd2:	0f d0       	rcall	.+30     	; 0xdf2 <__ultoa_invert+0x86>
 dd4:	c9 f7       	brne	.-14     	; 0xdc8 <__ultoa_invert+0x5c>
 dd6:	f6 cf       	rjmp	.-20     	; 0xdc4 <__ultoa_invert+0x58>
 dd8:	46 2f       	mov	r20, r22
 dda:	4f 70       	andi	r20, 0x0F	; 15
 ddc:	40 5d       	subi	r20, 0xD0	; 208
 dde:	4a 33       	cpi	r20, 0x3A	; 58
 de0:	18 f0       	brcs	.+6      	; 0xde8 <__ultoa_invert+0x7c>
 de2:	49 5d       	subi	r20, 0xD9	; 217
 de4:	31 fd       	sbrc	r19, 1
 de6:	40 52       	subi	r20, 0x20	; 32
 de8:	41 93       	st	Z+, r20
 dea:	02 d0       	rcall	.+4      	; 0xdf0 <__ultoa_invert+0x84>
 dec:	a9 f7       	brne	.-22     	; 0xdd8 <__ultoa_invert+0x6c>
 dee:	ea cf       	rjmp	.-44     	; 0xdc4 <__ultoa_invert+0x58>
 df0:	b4 e0       	ldi	r27, 0x04	; 4
 df2:	a6 95       	lsr	r26
 df4:	97 95       	ror	r25
 df6:	87 95       	ror	r24
 df8:	77 95       	ror	r23
 dfa:	67 95       	ror	r22
 dfc:	ba 95       	dec	r27
 dfe:	c9 f7       	brne	.-14     	; 0xdf2 <__ultoa_invert+0x86>
 e00:	00 97       	sbiw	r24, 0x00	; 0
 e02:	61 05       	cpc	r22, r1
 e04:	71 05       	cpc	r23, r1
 e06:	08 95       	ret
 e08:	9b 01       	movw	r18, r22
 e0a:	ac 01       	movw	r20, r24
 e0c:	0a 2e       	mov	r0, r26
 e0e:	06 94       	lsr	r0
 e10:	57 95       	ror	r21
 e12:	47 95       	ror	r20
 e14:	37 95       	ror	r19
 e16:	27 95       	ror	r18
 e18:	ba 95       	dec	r27
 e1a:	c9 f7       	brne	.-14     	; 0xe0e <__ultoa_invert+0xa2>
 e1c:	62 0f       	add	r22, r18
 e1e:	73 1f       	adc	r23, r19
 e20:	84 1f       	adc	r24, r20
 e22:	95 1f       	adc	r25, r21
 e24:	a0 1d       	adc	r26, r0
 e26:	08 95       	ret

00000e28 <__prologue_saves__>:
 e28:	2f 92       	push	r2
 e2a:	3f 92       	push	r3
 e2c:	4f 92       	push	r4
 e2e:	5f 92       	push	r5
 e30:	6f 92       	push	r6
 e32:	7f 92       	push	r7
 e34:	8f 92       	push	r8
 e36:	9f 92       	push	r9
 e38:	af 92       	push	r10
 e3a:	bf 92       	push	r11
 e3c:	cf 92       	push	r12
 e3e:	df 92       	push	r13
 e40:	ef 92       	push	r14
 e42:	ff 92       	push	r15
 e44:	0f 93       	push	r16
 e46:	1f 93       	push	r17
 e48:	cf 93       	push	r28
 e4a:	df 93       	push	r29
 e4c:	cd b7       	in	r28, 0x3d	; 61
 e4e:	de b7       	in	r29, 0x3e	; 62
 e50:	ca 1b       	sub	r28, r26
 e52:	db 0b       	sbc	r29, r27
 e54:	0f b6       	in	r0, 0x3f	; 63
 e56:	f8 94       	cli
 e58:	de bf       	out	0x3e, r29	; 62
 e5a:	0f be       	out	0x3f, r0	; 63
 e5c:	cd bf       	out	0x3d, r28	; 61
 e5e:	09 94       	ijmp

00000e60 <__epilogue_restores__>:
 e60:	2a 88       	ldd	r2, Y+18	; 0x12
 e62:	39 88       	ldd	r3, Y+17	; 0x11
 e64:	48 88       	ldd	r4, Y+16	; 0x10
 e66:	5f 84       	ldd	r5, Y+15	; 0x0f
 e68:	6e 84       	ldd	r6, Y+14	; 0x0e
 e6a:	7d 84       	ldd	r7, Y+13	; 0x0d
 e6c:	8c 84       	ldd	r8, Y+12	; 0x0c
 e6e:	9b 84       	ldd	r9, Y+11	; 0x0b
 e70:	aa 84       	ldd	r10, Y+10	; 0x0a
 e72:	b9 84       	ldd	r11, Y+9	; 0x09
 e74:	c8 84       	ldd	r12, Y+8	; 0x08
 e76:	df 80       	ldd	r13, Y+7	; 0x07
 e78:	ee 80       	ldd	r14, Y+6	; 0x06
 e7a:	fd 80       	ldd	r15, Y+5	; 0x05
 e7c:	0c 81       	ldd	r16, Y+4	; 0x04
 e7e:	1b 81       	ldd	r17, Y+3	; 0x03
 e80:	aa 81       	ldd	r26, Y+2	; 0x02
 e82:	b9 81       	ldd	r27, Y+1	; 0x01
 e84:	ce 0f       	add	r28, r30
 e86:	d1 1d       	adc	r29, r1
 e88:	0f b6       	in	r0, 0x3f	; 63
 e8a:	f8 94       	cli
 e8c:	de bf       	out	0x3e, r29	; 62
 e8e:	0f be       	out	0x3f, r0	; 63
 e90:	cd bf       	out	0x3d, r28	; 61
 e92:	ed 01       	movw	r28, r26
 e94:	08 95       	ret

00000e96 <_exit>:
 e96:	f8 94       	cli

00000e98 <__stop_program>:
 e98:	ff cf       	rjmp	.-2      	; 0xe98 <__stop_program>
